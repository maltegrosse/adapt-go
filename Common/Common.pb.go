// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.19.6
// source: Common.proto

package Common

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IdType_IdTypeEnum int32

const (
	IdType_UUID    IdType_IdTypeEnum = 0
	IdType_String  IdType_IdTypeEnum = 1
	IdType_LongInt IdType_IdTypeEnum = 2
	IdType_URI     IdType_IdTypeEnum = 3
)

// Enum value maps for IdType_IdTypeEnum.
var (
	IdType_IdTypeEnum_name = map[int32]string{
		0: "UUID",
		1: "String",
		2: "LongInt",
		3: "URI",
	}
	IdType_IdTypeEnum_value = map[string]int32{
		"UUID":    0,
		"String":  1,
		"LongInt": 2,
		"URI":     3,
	}
)

func (x IdType_IdTypeEnum) Enum() *IdType_IdTypeEnum {
	p := new(IdType_IdTypeEnum)
	*p = x
	return p
}

func (x IdType_IdTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IdType_IdTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_proto_enumTypes[0].Descriptor()
}

func (IdType_IdTypeEnum) Type() protoreflect.EnumType {
	return &file_Common_proto_enumTypes[0]
}

func (x IdType_IdTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IdType_IdTypeEnum.Descriptor instead.
func (IdType_IdTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{2, 0}
}

type IdSourceType_IdSourceTypeEnum int32

const (
	IdSourceType_GLN IdSourceType_IdSourceTypeEnum = 0
	IdSourceType_URI IdSourceType_IdSourceTypeEnum = 1
)

// Enum value maps for IdSourceType_IdSourceTypeEnum.
var (
	IdSourceType_IdSourceTypeEnum_name = map[int32]string{
		0: "GLN",
		1: "URI",
	}
	IdSourceType_IdSourceTypeEnum_value = map[string]int32{
		"GLN": 0,
		"URI": 1,
	}
)

func (x IdSourceType_IdSourceTypeEnum) Enum() *IdSourceType_IdSourceTypeEnum {
	p := new(IdSourceType_IdSourceTypeEnum)
	*p = x
	return p
}

func (x IdSourceType_IdSourceTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IdSourceType_IdSourceTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_proto_enumTypes[1].Descriptor()
}

func (IdSourceType_IdSourceTypeEnum) Type() protoreflect.EnumType {
	return &file_Common_proto_enumTypes[1]
}

func (x IdSourceType_IdSourceTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IdSourceType_IdSourceTypeEnum.Descriptor instead.
func (IdSourceType_IdSourceTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{3, 0}
}

type ContextItemValueType_ContextItemValueTypeEnum int32

const (
	ContextItemValueType_Nested  ContextItemValueType_ContextItemValueTypeEnum = 0
	ContextItemValueType_Enum    ContextItemValueType_ContextItemValueTypeEnum = 1
	ContextItemValueType_Bool    ContextItemValueType_ContextItemValueTypeEnum = 2
	ContextItemValueType_String  ContextItemValueType_ContextItemValueTypeEnum = 3
	ContextItemValueType_Double  ContextItemValueType_ContextItemValueTypeEnum = 4
	ContextItemValueType_Integer ContextItemValueType_ContextItemValueTypeEnum = 5
)

// Enum value maps for ContextItemValueType_ContextItemValueTypeEnum.
var (
	ContextItemValueType_ContextItemValueTypeEnum_name = map[int32]string{
		0: "Nested",
		1: "Enum",
		2: "Bool",
		3: "String",
		4: "Double",
		5: "Integer",
	}
	ContextItemValueType_ContextItemValueTypeEnum_value = map[string]int32{
		"Nested":  0,
		"Enum":    1,
		"Bool":    2,
		"String":  3,
		"Double":  4,
		"Integer": 5,
	}
)

func (x ContextItemValueType_ContextItemValueTypeEnum) Enum() *ContextItemValueType_ContextItemValueTypeEnum {
	p := new(ContextItemValueType_ContextItemValueTypeEnum)
	*p = x
	return p
}

func (x ContextItemValueType_ContextItemValueTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContextItemValueType_ContextItemValueTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_proto_enumTypes[2].Descriptor()
}

func (ContextItemValueType_ContextItemValueTypeEnum) Type() protoreflect.EnumType {
	return &file_Common_proto_enumTypes[2]
}

func (x ContextItemValueType_ContextItemValueTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContextItemValueType_ContextItemValueTypeEnum.Descriptor instead.
func (ContextItemValueType_ContextItemValueTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{9, 0}
}

type DateContext_DateContextEnum int32

const (
	DateContext_Approval          DateContext_DateContextEnum = 0
	DateContext_ProposedStart     DateContext_DateContextEnum = 1
	DateContext_ProposedEnd       DateContext_DateContextEnum = 2
	DateContext_CropSeason        DateContext_DateContextEnum = 3 // Interval
	DateContext_TimingEvent       DateContext_DateContextEnum = 4 // Interval
	DateContext_ActualStart       DateContext_DateContextEnum = 5
	DateContext_ActualEnd         DateContext_DateContextEnum = 6
	DateContext_RequestedStart    DateContext_DateContextEnum = 7
	DateContext_RequestedEnd      DateContext_DateContextEnum = 8
	DateContext_Expiration        DateContext_DateContextEnum = 9  // Relevant for Plans, Work Orders, and Recommendations
	DateContext_Creation          DateContext_DateContextEnum = 10 // Relevant to any document or object instance
	DateContext_Modification      DateContext_DateContextEnum = 11 // Relevant to any document or object instance
	DateContext_ValidityRange     DateContext_DateContextEnum = 12 // Interval. Used for Recommendation documents, also for specialized ISO 19156 Observations (such as forecasts)
	DateContext_RequestedShipping DateContext_DateContextEnum = 13
	DateContext_ActualShipping    DateContext_DateContextEnum = 14
	DateContext_Calibration       DateContext_DateContextEnum = 15 // Relevant to a DeviceElement (esp. Sensor)
	DateContext_Load              DateContext_DateContextEnum = 16
	DateContext_Unload            DateContext_DateContextEnum = 17
	DateContext_Suspend           DateContext_DateContextEnum = 18
	DateContext_Resume            DateContext_DateContextEnum = 19
	DateContext_Unspecified       DateContext_DateContextEnum = 20
	DateContext_Installation      DateContext_DateContextEnum = 21 // When was the device, sensor, etc. installed?
	DateContext_Maintenance       DateContext_DateContextEnum = 22 // When was maintenance performed on the device, sensor, etc.?
	DateContext_PhenomenonTime    DateContext_DateContextEnum = 23 // Important attribute of an ISO 19156 Observation
	DateContext_ResultTime        DateContext_DateContextEnum = 24 // Interval. Important attribute of an ISO 19156 Observation
)

// Enum value maps for DateContext_DateContextEnum.
var (
	DateContext_DateContextEnum_name = map[int32]string{
		0:  "Approval",
		1:  "ProposedStart",
		2:  "ProposedEnd",
		3:  "CropSeason",
		4:  "TimingEvent",
		5:  "ActualStart",
		6:  "ActualEnd",
		7:  "RequestedStart",
		8:  "RequestedEnd",
		9:  "Expiration",
		10: "Creation",
		11: "Modification",
		12: "ValidityRange",
		13: "RequestedShipping",
		14: "ActualShipping",
		15: "Calibration",
		16: "Load",
		17: "Unload",
		18: "Suspend",
		19: "Resume",
		20: "Unspecified",
		21: "Installation",
		22: "Maintenance",
		23: "PhenomenonTime",
		24: "ResultTime",
	}
	DateContext_DateContextEnum_value = map[string]int32{
		"Approval":          0,
		"ProposedStart":     1,
		"ProposedEnd":       2,
		"CropSeason":        3,
		"TimingEvent":       4,
		"ActualStart":       5,
		"ActualEnd":         6,
		"RequestedStart":    7,
		"RequestedEnd":      8,
		"Expiration":        9,
		"Creation":          10,
		"Modification":      11,
		"ValidityRange":     12,
		"RequestedShipping": 13,
		"ActualShipping":    14,
		"Calibration":       15,
		"Load":              16,
		"Unload":            17,
		"Suspend":           18,
		"Resume":            19,
		"Unspecified":       20,
		"Installation":      21,
		"Maintenance":       22,
		"PhenomenonTime":    23,
		"ResultTime":        24,
	}
)

func (x DateContext_DateContextEnum) Enum() *DateContext_DateContextEnum {
	p := new(DateContext_DateContextEnum)
	*p = x
	return p
}

func (x DateContext_DateContextEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DateContext_DateContextEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_proto_enumTypes[3].Descriptor()
}

func (DateContext_DateContextEnum) Type() protoreflect.EnumType {
	return &file_Common_proto_enumTypes[3]
}

func (x DateContext_DateContextEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DateContext_DateContextEnum.Descriptor instead.
func (DateContext_DateContextEnum) EnumDescriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{11, 0}
}

type GPCLevel_GPCLevelEnum int32

const (
	GPCLevel_Country GPCLevel_GPCLevelEnum = 0
	GPCLevel_ADM1    GPCLevel_GPCLevelEnum = 1 // Administrative level 1 (e.g., US States, Canadian provinces, Russian oblasts)
	GPCLevel_ADM2    GPCLevel_GPCLevelEnum = 2 // Administrative level 2 (e.g., US counties)
)

// Enum value maps for GPCLevel_GPCLevelEnum.
var (
	GPCLevel_GPCLevelEnum_name = map[int32]string{
		0: "Country",
		1: "ADM1",
		2: "ADM2",
	}
	GPCLevel_GPCLevelEnum_value = map[string]int32{
		"Country": 0,
		"ADM1":    1,
		"ADM2":    2,
	}
)

func (x GPCLevel_GPCLevelEnum) Enum() *GPCLevel_GPCLevelEnum {
	p := new(GPCLevel_GPCLevelEnum)
	*p = x
	return p
}

func (x GPCLevel_GPCLevelEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GPCLevel_GPCLevelEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_proto_enumTypes[4].Descriptor()
}

func (GPCLevel_GPCLevelEnum) Type() protoreflect.EnumType {
	return &file_Common_proto_enumTypes[4]
}

func (x GPCLevel_GPCLevelEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GPCLevel_GPCLevelEnum.Descriptor instead.
func (GPCLevel_GPCLevelEnum) EnumDescriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{12, 0}
}

type GpsSource_GpsSourceEnum int32

const (
	GpsSource_Unknown              GpsSource_GpsSourceEnum = 0
	GpsSource_Drawn                GpsSource_GpsSourceEnum = 1
	GpsSource_MobileGPS            GpsSource_GpsSourceEnum = 2
	GpsSource_DeereRTK             GpsSource_GpsSourceEnum = 3
	GpsSource_DeereRTKX            GpsSource_GpsSourceEnum = 4
	GpsSource_DeereSF1             GpsSource_GpsSourceEnum = 5
	GpsSource_DeereSF2             GpsSource_GpsSourceEnum = 6
	GpsSource_DeereWAAS            GpsSource_GpsSourceEnum = 7
	GpsSource_GNSSfix              GpsSource_GpsSourceEnum = 8
	GpsSource_DGNSSfix             GpsSource_GpsSourceEnum = 9
	GpsSource_PreciseGNSS          GpsSource_GpsSourceEnum = 10
	GpsSource_RTKFixedInteger      GpsSource_GpsSourceEnum = 11
	GpsSource_RTKFloat             GpsSource_GpsSourceEnum = 12
	GpsSource_EstDRmode            GpsSource_GpsSourceEnum = 13
	GpsSource_ManualInput          GpsSource_GpsSourceEnum = 14
	GpsSource_SimulateMode         GpsSource_GpsSourceEnum = 15
	GpsSource_DesktopGeneratedData GpsSource_GpsSourceEnum = 16
	GpsSource_Other                GpsSource_GpsSourceEnum = 17
	GpsSource_PPP                  GpsSource_GpsSourceEnum = 18
	GpsSource_SBAS                 GpsSource_GpsSourceEnum = 19
	GpsSource_Mechanical           GpsSource_GpsSourceEnum = 20
)

// Enum value maps for GpsSource_GpsSourceEnum.
var (
	GpsSource_GpsSourceEnum_name = map[int32]string{
		0:  "Unknown",
		1:  "Drawn",
		2:  "MobileGPS",
		3:  "DeereRTK",
		4:  "DeereRTKX",
		5:  "DeereSF1",
		6:  "DeereSF2",
		7:  "DeereWAAS",
		8:  "GNSSfix",
		9:  "DGNSSfix",
		10: "PreciseGNSS",
		11: "RTKFixedInteger",
		12: "RTKFloat",
		13: "EstDRmode",
		14: "ManualInput",
		15: "SimulateMode",
		16: "DesktopGeneratedData",
		17: "Other",
		18: "PPP",
		19: "SBAS",
		20: "Mechanical",
	}
	GpsSource_GpsSourceEnum_value = map[string]int32{
		"Unknown":              0,
		"Drawn":                1,
		"MobileGPS":            2,
		"DeereRTK":             3,
		"DeereRTKX":            4,
		"DeereSF1":             5,
		"DeereSF2":             6,
		"DeereWAAS":            7,
		"GNSSfix":              8,
		"DGNSSfix":             9,
		"PreciseGNSS":          10,
		"RTKFixedInteger":      11,
		"RTKFloat":             12,
		"EstDRmode":            13,
		"ManualInput":          14,
		"SimulateMode":         15,
		"DesktopGeneratedData": 16,
		"Other":                17,
		"PPP":                  18,
		"SBAS":                 19,
		"Mechanical":           20,
	}
)

func (x GpsSource_GpsSourceEnum) Enum() *GpsSource_GpsSourceEnum {
	p := new(GpsSource_GpsSourceEnum)
	*p = x
	return p
}

func (x GpsSource_GpsSourceEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GpsSource_GpsSourceEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_proto_enumTypes[5].Descriptor()
}

func (GpsSource_GpsSourceEnum) Type() protoreflect.EnumType {
	return &file_Common_proto_enumTypes[5]
}

func (x GpsSource_GpsSourceEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GpsSource_GpsSourceEnum.Descriptor instead.
func (GpsSource_GpsSourceEnum) EnumDescriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{13, 0}
}

type ModelScopeType_ModelScopeTypeEnum int32

const (
	ModelScopeType_ISO11783 ModelScopeType_ModelScopeTypeEnum = 0
	ModelScopeType_ADAPT    ModelScopeType_ModelScopeTypeEnum = 1
)

// Enum value maps for ModelScopeType_ModelScopeTypeEnum.
var (
	ModelScopeType_ModelScopeTypeEnum_name = map[int32]string{
		0: "ISO11783",
		1: "ADAPT",
	}
	ModelScopeType_ModelScopeTypeEnum_value = map[string]int32{
		"ISO11783": 0,
		"ADAPT":    1,
	}
)

func (x ModelScopeType_ModelScopeTypeEnum) Enum() *ModelScopeType_ModelScopeTypeEnum {
	p := new(ModelScopeType_ModelScopeTypeEnum)
	*p = x
	return p
}

func (x ModelScopeType_ModelScopeTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModelScopeType_ModelScopeTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_proto_enumTypes[6].Descriptor()
}

func (ModelScopeType_ModelScopeTypeEnum) Type() protoreflect.EnumType {
	return &file_Common_proto_enumTypes[6]
}

func (x ModelScopeType_ModelScopeTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModelScopeType_ModelScopeTypeEnum.Descriptor instead.
func (ModelScopeType_ModelScopeTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{18, 0}
}

type OperationType_OperationTypeEnum int32

const (
	OperationType_Unknown           OperationType_OperationTypeEnum = 0
	OperationType_Fertilizing       OperationType_OperationTypeEnum = 1
	OperationType_SowingAndPlanting OperationType_OperationTypeEnum = 2
	OperationType_CropProtection    OperationType_OperationTypeEnum = 3
	OperationType_Tillage           OperationType_OperationTypeEnum = 4
	OperationType_Baling            OperationType_OperationTypeEnum = 5
	OperationType_Mowing            OperationType_OperationTypeEnum = 6
	OperationType_Wrapping          OperationType_OperationTypeEnum = 7
	OperationType_Harvesting        OperationType_OperationTypeEnum = 8
	OperationType_ForageHarvesting  OperationType_OperationTypeEnum = 9
	OperationType_Transport         OperationType_OperationTypeEnum = 10
	OperationType_Swathing          OperationType_OperationTypeEnum = 11
	OperationType_Irrigation        OperationType_OperationTypeEnum = 12
	OperationType_DataCollection    OperationType_OperationTypeEnum = 13
)

// Enum value maps for OperationType_OperationTypeEnum.
var (
	OperationType_OperationTypeEnum_name = map[int32]string{
		0:  "Unknown",
		1:  "Fertilizing",
		2:  "SowingAndPlanting",
		3:  "CropProtection",
		4:  "Tillage",
		5:  "Baling",
		6:  "Mowing",
		7:  "Wrapping",
		8:  "Harvesting",
		9:  "ForageHarvesting",
		10: "Transport",
		11: "Swathing",
		12: "Irrigation",
		13: "DataCollection",
	}
	OperationType_OperationTypeEnum_value = map[string]int32{
		"Unknown":           0,
		"Fertilizing":       1,
		"SowingAndPlanting": 2,
		"CropProtection":    3,
		"Tillage":           4,
		"Baling":            5,
		"Mowing":            6,
		"Wrapping":          7,
		"Harvesting":        8,
		"ForageHarvesting":  9,
		"Transport":         10,
		"Swathing":          11,
		"Irrigation":        12,
		"DataCollection":    13,
	}
)

func (x OperationType_OperationTypeEnum) Enum() *OperationType_OperationTypeEnum {
	p := new(OperationType_OperationTypeEnum)
	*p = x
	return p
}

func (x OperationType_OperationTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationType_OperationTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_proto_enumTypes[7].Descriptor()
}

func (OperationType_OperationTypeEnum) Type() protoreflect.EnumType {
	return &file_Common_proto_enumTypes[7]
}

func (x OperationType_OperationTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperationType_OperationTypeEnum.Descriptor instead.
func (OperationType_OperationTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{19, 0}
}

type SetupDataPedigree_SetupDataPedigreeEnum int32

const (
	SetupDataPedigree_LatestOnly            SetupDataPedigree_SetupDataPedigreeEnum = 0 // The system is only keeping the latest copy of setup/configuration data.
	SetupDataPedigree_MatchedByTimeInterval SetupDataPedigree_SetupDataPedigreeEnum = 1 // The system is keeping multiple versions of setup/configuration data, and keeping them time-binned.
	SetupDataPedigree_Unknown               SetupDataPedigree_SetupDataPedigreeEnum = 2 // The strategy used by the system for tracking changes in system configuration is unknown.
)

// Enum value maps for SetupDataPedigree_SetupDataPedigreeEnum.
var (
	SetupDataPedigree_SetupDataPedigreeEnum_name = map[int32]string{
		0: "LatestOnly",
		1: "MatchedByTimeInterval",
		2: "Unknown",
	}
	SetupDataPedigree_SetupDataPedigreeEnum_value = map[string]int32{
		"LatestOnly":            0,
		"MatchedByTimeInterval": 1,
		"Unknown":               2,
	}
)

func (x SetupDataPedigree_SetupDataPedigreeEnum) Enum() *SetupDataPedigree_SetupDataPedigreeEnum {
	p := new(SetupDataPedigree_SetupDataPedigreeEnum)
	*p = x
	return p
}

func (x SetupDataPedigree_SetupDataPedigreeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetupDataPedigree_SetupDataPedigreeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_proto_enumTypes[8].Descriptor()
}

func (SetupDataPedigree_SetupDataPedigreeEnum) Type() protoreflect.EnumType {
	return &file_Common_proto_enumTypes[8]
}

func (x SetupDataPedigree_SetupDataPedigreeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetupDataPedigree_SetupDataPedigreeEnum.Descriptor instead.
func (SetupDataPedigree_SetupDataPedigreeEnum) EnumDescriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{21, 0}
}

type UnitOfMeasureDimension_UnitOfMeasureDimensionEnum int32

const (
	UnitOfMeasureDimension_PerVolume            UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 0
	UnitOfMeasureDimension_Mass                 UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 1
	UnitOfMeasureDimension_CurrencyPerArea      UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 2
	UnitOfMeasureDimension_Sack                 UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 3
	UnitOfMeasureDimension_Unitless             UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 4
	UnitOfMeasureDimension_Seeds                UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 5
	UnitOfMeasureDimension_MassPerBarrel        UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 6
	UnitOfMeasureDimension_MassPerVolume        UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 7
	UnitOfMeasureDimension_MassPerTime          UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 8
	UnitOfMeasureDimension_CurrencyPerContainer UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 9
	UnitOfMeasureDimension_PerBale              UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 10
	UnitOfMeasureDimension_Temperature          UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 11
	UnitOfMeasureDimension_VolumePerMass        UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 12
	UnitOfMeasureDimension_CurrencyPerTime      UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 13
	UnitOfMeasureDimension_DataPointsPerTime    UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 14
	UnitOfMeasureDimension_SeedsPerBag          UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 15
	UnitOfMeasureDimension_Barrel               UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 16
	UnitOfMeasureDimension_MassPerMass          UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 17
	UnitOfMeasureDimension_VolumePerArea        UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 18
	UnitOfMeasureDimension_Currency             UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 19
	UnitOfMeasureDimension_PerContainer         UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 20
	UnitOfMeasureDimension_Container            UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 21
	UnitOfMeasureDimension_CurrencyPerBag       UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 22
	UnitOfMeasureDimension_MassPerContainer     UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 23
	UnitOfMeasureDimension_PerSack              UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 24
	UnitOfMeasureDimension_SeedsPerContainer    UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 25
	UnitOfMeasureDimension_Volume               UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 26
	UnitOfMeasureDimension_VolumePerVolume      UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 27
	UnitOfMeasureDimension_Time                 UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 28
	UnitOfMeasureDimension_BalesPerVolume       UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 29
	UnitOfMeasureDimension_TimeSpan             UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 30
	UnitOfMeasureDimension_Force                UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 31
	UnitOfMeasureDimension_PerTime              UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 32
	UnitOfMeasureDimension_MassPerBale          UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 33
	UnitOfMeasureDimension_Speed                UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 34
	UnitOfMeasureDimension_DistancePerPercent   UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 35
	UnitOfMeasureDimension_BalesPerTime         UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 36
	UnitOfMeasureDimension_VolumePerTime        UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 37
	UnitOfMeasureDimension_CurrencyPerBale      UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 38
	UnitOfMeasureDimension_BarrelPerArea        UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 39
	UnitOfMeasureDimension_SeedsPerVolume       UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 40
	UnitOfMeasureDimension_CurrencyPerVolume    UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 41
	UnitOfMeasureDimension_SeedsPerSack         UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 42
	UnitOfMeasureDimension_AngularVelocity      UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 43
	UnitOfMeasureDimension_MassPerSeeds         UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 44
	UnitOfMeasureDimension_DataPoints           UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 45
	UnitOfMeasureDimension_DistancePerDegree    UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 46
	UnitOfMeasureDimension_Percent              UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 47
	UnitOfMeasureDimension_ElectricCurrent      UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 48
	UnitOfMeasureDimension_SeedsPerTime         UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 49
	UnitOfMeasureDimension_Distance             UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 50
	UnitOfMeasureDimension_BalesPerArea         UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 51
	UnitOfMeasureDimension_CountPerArea         UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 52
	UnitOfMeasureDimension_SeedsPerArea         UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 53
	UnitOfMeasureDimension_PerBag               UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 54
	UnitOfMeasureDimension_Bag                  UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 55
	UnitOfMeasureDimension_SackPerArea          UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 56
	UnitOfMeasureDimension_Rows                 UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 57
	UnitOfMeasureDimension_Pressure             UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 58
	UnitOfMeasureDimension_ContainerPerArea     UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 59
	UnitOfMeasureDimension_MassPerSack          UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 60
	UnitOfMeasureDimension_MassPerBag           UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 61
	UnitOfMeasureDimension_Bale                 UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 62
	UnitOfMeasureDimension_AreaPerTime          UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 63
	UnitOfMeasureDimension_PerField             UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 64
	UnitOfMeasureDimension_Angle                UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 65
	UnitOfMeasureDimension_PerMass              UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 66
	UnitOfMeasureDimension_BagPerArea           UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 67
	UnitOfMeasureDimension_BalesPerMass         UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 68
	UnitOfMeasureDimension_SeedsPerBarrel       UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 69
	UnitOfMeasureDimension_Voltage              UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 70
	UnitOfMeasureDimension_Area                 UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 71
	UnitOfMeasureDimension_Count                UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 72
	UnitOfMeasureDimension_Frequency            UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 73
	UnitOfMeasureDimension_Field                UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 74
	UnitOfMeasureDimension_SeedsPerMass         UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 75
	UnitOfMeasureDimension_MassPerArea          UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 76
	UnitOfMeasureDimension_PerArea              UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 77
	UnitOfMeasureDimension_MassPerDistance      UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 78
	UnitOfMeasureDimension_VolumePerDistance    UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 79
	UnitOfMeasureDimension_Energy               UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 80
	UnitOfMeasureDimension_Power                UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 81
	UnitOfMeasureDimension_Torque               UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 82
	UnitOfMeasureDimension_Gear                 UnitOfMeasureDimension_UnitOfMeasureDimensionEnum = 83
)

// Enum value maps for UnitOfMeasureDimension_UnitOfMeasureDimensionEnum.
var (
	UnitOfMeasureDimension_UnitOfMeasureDimensionEnum_name = map[int32]string{
		0:  "PerVolume",
		1:  "Mass",
		2:  "CurrencyPerArea",
		3:  "Sack",
		4:  "Unitless",
		5:  "Seeds",
		6:  "MassPerBarrel",
		7:  "MassPerVolume",
		8:  "MassPerTime",
		9:  "CurrencyPerContainer",
		10: "PerBale",
		11: "Temperature",
		12: "VolumePerMass",
		13: "CurrencyPerTime",
		14: "DataPointsPerTime",
		15: "SeedsPerBag",
		16: "Barrel",
		17: "MassPerMass",
		18: "VolumePerArea",
		19: "Currency",
		20: "PerContainer",
		21: "Container",
		22: "CurrencyPerBag",
		23: "MassPerContainer",
		24: "PerSack",
		25: "SeedsPerContainer",
		26: "Volume",
		27: "VolumePerVolume",
		28: "Time",
		29: "BalesPerVolume",
		30: "TimeSpan",
		31: "Force",
		32: "PerTime",
		33: "MassPerBale",
		34: "Speed",
		35: "DistancePerPercent",
		36: "BalesPerTime",
		37: "VolumePerTime",
		38: "CurrencyPerBale",
		39: "BarrelPerArea",
		40: "SeedsPerVolume",
		41: "CurrencyPerVolume",
		42: "SeedsPerSack",
		43: "AngularVelocity",
		44: "MassPerSeeds",
		45: "DataPoints",
		46: "DistancePerDegree",
		47: "Percent",
		48: "ElectricCurrent",
		49: "SeedsPerTime",
		50: "Distance",
		51: "BalesPerArea",
		52: "CountPerArea",
		53: "SeedsPerArea",
		54: "PerBag",
		55: "Bag",
		56: "SackPerArea",
		57: "Rows",
		58: "Pressure",
		59: "ContainerPerArea",
		60: "MassPerSack",
		61: "MassPerBag",
		62: "Bale",
		63: "AreaPerTime",
		64: "PerField",
		65: "Angle",
		66: "PerMass",
		67: "BagPerArea",
		68: "BalesPerMass",
		69: "SeedsPerBarrel",
		70: "Voltage",
		71: "Area",
		72: "Count",
		73: "Frequency",
		74: "Field",
		75: "SeedsPerMass",
		76: "MassPerArea",
		77: "PerArea",
		78: "MassPerDistance",
		79: "VolumePerDistance",
		80: "Energy",
		81: "Power",
		82: "Torque",
		83: "Gear",
	}
	UnitOfMeasureDimension_UnitOfMeasureDimensionEnum_value = map[string]int32{
		"PerVolume":            0,
		"Mass":                 1,
		"CurrencyPerArea":      2,
		"Sack":                 3,
		"Unitless":             4,
		"Seeds":                5,
		"MassPerBarrel":        6,
		"MassPerVolume":        7,
		"MassPerTime":          8,
		"CurrencyPerContainer": 9,
		"PerBale":              10,
		"Temperature":          11,
		"VolumePerMass":        12,
		"CurrencyPerTime":      13,
		"DataPointsPerTime":    14,
		"SeedsPerBag":          15,
		"Barrel":               16,
		"MassPerMass":          17,
		"VolumePerArea":        18,
		"Currency":             19,
		"PerContainer":         20,
		"Container":            21,
		"CurrencyPerBag":       22,
		"MassPerContainer":     23,
		"PerSack":              24,
		"SeedsPerContainer":    25,
		"Volume":               26,
		"VolumePerVolume":      27,
		"Time":                 28,
		"BalesPerVolume":       29,
		"TimeSpan":             30,
		"Force":                31,
		"PerTime":              32,
		"MassPerBale":          33,
		"Speed":                34,
		"DistancePerPercent":   35,
		"BalesPerTime":         36,
		"VolumePerTime":        37,
		"CurrencyPerBale":      38,
		"BarrelPerArea":        39,
		"SeedsPerVolume":       40,
		"CurrencyPerVolume":    41,
		"SeedsPerSack":         42,
		"AngularVelocity":      43,
		"MassPerSeeds":         44,
		"DataPoints":           45,
		"DistancePerDegree":    46,
		"Percent":              47,
		"ElectricCurrent":      48,
		"SeedsPerTime":         49,
		"Distance":             50,
		"BalesPerArea":         51,
		"CountPerArea":         52,
		"SeedsPerArea":         53,
		"PerBag":               54,
		"Bag":                  55,
		"SackPerArea":          56,
		"Rows":                 57,
		"Pressure":             58,
		"ContainerPerArea":     59,
		"MassPerSack":          60,
		"MassPerBag":           61,
		"Bale":                 62,
		"AreaPerTime":          63,
		"PerField":             64,
		"Angle":                65,
		"PerMass":              66,
		"BagPerArea":           67,
		"BalesPerMass":         68,
		"SeedsPerBarrel":       69,
		"Voltage":              70,
		"Area":                 71,
		"Count":                72,
		"Frequency":            73,
		"Field":                74,
		"SeedsPerMass":         75,
		"MassPerArea":          76,
		"PerArea":              77,
		"MassPerDistance":      78,
		"VolumePerDistance":    79,
		"Energy":               80,
		"Power":                81,
		"Torque":               82,
		"Gear":                 83,
	}
)

func (x UnitOfMeasureDimension_UnitOfMeasureDimensionEnum) Enum() *UnitOfMeasureDimension_UnitOfMeasureDimensionEnum {
	p := new(UnitOfMeasureDimension_UnitOfMeasureDimensionEnum)
	*p = x
	return p
}

func (x UnitOfMeasureDimension_UnitOfMeasureDimensionEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnitOfMeasureDimension_UnitOfMeasureDimensionEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_proto_enumTypes[9].Descriptor()
}

func (UnitOfMeasureDimension_UnitOfMeasureDimensionEnum) Type() protoreflect.EnumType {
	return &file_Common_proto_enumTypes[9]
}

func (x UnitOfMeasureDimension_UnitOfMeasureDimensionEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnitOfMeasureDimension_UnitOfMeasureDimensionEnum.Descriptor instead.
func (UnitOfMeasureDimension_UnitOfMeasureDimensionEnum) EnumDescriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{23, 0}
}

type UnitOfMeasureAuthority_UnitOfMeasureAuthorityEnum int32

const (
	UnitOfMeasureAuthority_UNRec20 UnitOfMeasureAuthority_UnitOfMeasureAuthorityEnum = 0
	UnitOfMeasureAuthority_QUDT    UnitOfMeasureAuthority_UnitOfMeasureAuthorityEnum = 1
	UnitOfMeasureAuthority_UCUM    UnitOfMeasureAuthority_UnitOfMeasureAuthorityEnum = 2
	UnitOfMeasureAuthority_ADAPT   UnitOfMeasureAuthority_UnitOfMeasureAuthorityEnum = 3
)

// Enum value maps for UnitOfMeasureAuthority_UnitOfMeasureAuthorityEnum.
var (
	UnitOfMeasureAuthority_UnitOfMeasureAuthorityEnum_name = map[int32]string{
		0: "UNRec20",
		1: "QUDT",
		2: "UCUM",
		3: "ADAPT",
	}
	UnitOfMeasureAuthority_UnitOfMeasureAuthorityEnum_value = map[string]int32{
		"UNRec20": 0,
		"QUDT":    1,
		"UCUM":    2,
		"ADAPT":   3,
	}
)

func (x UnitOfMeasureAuthority_UnitOfMeasureAuthorityEnum) Enum() *UnitOfMeasureAuthority_UnitOfMeasureAuthorityEnum {
	p := new(UnitOfMeasureAuthority_UnitOfMeasureAuthorityEnum)
	*p = x
	return p
}

func (x UnitOfMeasureAuthority_UnitOfMeasureAuthorityEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnitOfMeasureAuthority_UnitOfMeasureAuthorityEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_Common_proto_enumTypes[10].Descriptor()
}

func (UnitOfMeasureAuthority_UnitOfMeasureAuthorityEnum) Type() protoreflect.EnumType {
	return &file_Common_proto_enumTypes[10]
}

func (x UnitOfMeasureAuthority_UnitOfMeasureAuthorityEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnitOfMeasureAuthority_UnitOfMeasureAuthorityEnum.Descriptor instead.
func (UnitOfMeasureAuthority_UnitOfMeasureAuthorityEnum) EnumDescriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{24, 0}
}

type CompoundIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReferenceId int64       `protobuf:"varint,1,opt,name=ReferenceId,proto3" json:"ReferenceId,omitempty"`
	UniqueIds   []*UniqueId `protobuf:"bytes,3,rep,name=UniqueIds,proto3" json:"UniqueIds,omitempty"`
}

func (x *CompoundIdentifier) Reset() {
	*x = CompoundIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompoundIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompoundIdentifier) ProtoMessage() {}

func (x *CompoundIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompoundIdentifier.ProtoReflect.Descriptor instead.
func (*CompoundIdentifier) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{0}
}

func (x *CompoundIdentifier) GetReferenceId() int64 {
	if x != nil {
		return x.ReferenceId
	}
	return 0
}

func (x *CompoundIdentifier) GetUniqueIds() []*UniqueId {
	if x != nil {
		return x.UniqueIds
	}
	return nil
}

type UniqueId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string        `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	IdType       *IdType       `protobuf:"bytes,2,opt,name=IdType,proto3" json:"IdType,omitempty"`
	Source       string        `protobuf:"bytes,3,opt,name=Source,proto3" json:"Source,omitempty"`
	IdSourceType *IdSourceType `protobuf:"bytes,4,opt,name=IdSourceType,proto3" json:"IdSourceType,omitempty"`
	ReferenceId  *int64        `protobuf:"varint,201,opt,name=ReferenceId,proto3,oneof" json:"ReferenceId,omitempty"` // ref
}

func (x *UniqueId) Reset() {
	*x = UniqueId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniqueId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniqueId) ProtoMessage() {}

func (x *UniqueId) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniqueId.ProtoReflect.Descriptor instead.
func (*UniqueId) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{1}
}

func (x *UniqueId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UniqueId) GetIdType() *IdType {
	if x != nil {
		return x.IdType
	}
	return nil
}

func (x *UniqueId) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *UniqueId) GetIdSourceType() *IdSourceType {
	if x != nil {
		return x.IdSourceType
	}
	return nil
}

func (x *UniqueId) GetReferenceId() int64 {
	if x != nil && x.ReferenceId != nil {
		return *x.ReferenceId
	}
	return 0
}

type IdType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *string `protobuf:"bytes,201,opt,name=Value,proto3,oneof" json:"Value,omitempty"` // ref
}

func (x *IdType) Reset() {
	*x = IdType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdType) ProtoMessage() {}

func (x *IdType) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdType.ProtoReflect.Descriptor instead.
func (*IdType) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{2}
}

func (x *IdType) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type IdSourceType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *string `protobuf:"bytes,201,opt,name=Value,proto3,oneof" json:"Value,omitempty"` // ref
}

func (x *IdSourceType) Reset() {
	*x = IdSourceType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdSourceType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdSourceType) ProtoMessage() {}

func (x *IdSourceType) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdSourceType.ProtoReflect.Descriptor instead.
func (*IdSourceType) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{3}
}

func (x *IdSourceType) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type ContextItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code        string         `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Value       string         `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	ValueUOM    string         `protobuf:"bytes,3,opt,name=ValueUOM,proto3" json:"ValueUOM,omitempty"`
	NestedItems []*ContextItem `protobuf:"bytes,4,rep,name=NestedItems,proto3" json:"NestedItems,omitempty"`
	TimeScopes  []*TimeScope   `protobuf:"bytes,5,rep,name=TimeScopes,proto3" json:"TimeScopes,omitempty"`
}

func (x *ContextItem) Reset() {
	*x = ContextItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContextItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextItem) ProtoMessage() {}

func (x *ContextItem) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextItem.ProtoReflect.Descriptor instead.
func (*ContextItem) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{4}
}

func (x *ContextItem) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ContextItem) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ContextItem) GetValueUOM() string {
	if x != nil {
		return x.ValueUOM
	}
	return ""
}

func (x *ContextItem) GetNestedItems() []*ContextItem {
	if x != nil {
		return x.NestedItems
	}
	return nil
}

func (x *ContextItem) GetTimeScopes() []*TimeScope {
	if x != nil {
		return x.TimeScopes
	}
	return nil
}

type ContextItemDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     *CompoundIdentifier    `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Keywords               []string               `protobuf:"bytes,2,rep,name=Keywords,proto3" json:"Keywords,omitempty"`
	Lexicalizations        []*Lexicalization      `protobuf:"bytes,3,rep,name=Lexicalizations,proto3" json:"Lexicalizations,omitempty"`
	Properties             []*ContextItem         `protobuf:"bytes,4,rep,name=Properties,proto3" json:"Properties,omitempty"`
	NestedDefIds           []int64                `protobuf:"varint,5,rep,packed,name=NestedDefIds,proto3" json:"NestedDefIds,omitempty"`
	Presentations          []*Presentation        `protobuf:"bytes,6,rep,name=Presentations,proto3" json:"Presentations,omitempty"`
	EnumItems              []*ContextItemEnumItem `protobuf:"bytes,7,rep,name=EnumItems,proto3" json:"EnumItems,omitempty"`
	TimeScopes             []*TimeScope           `protobuf:"bytes,8,rep,name=TimeScopes,proto3" json:"TimeScopes,omitempty"`
	ModelScopeIds          []int64                `protobuf:"varint,9,rep,packed,name=ModelScopeIds,proto3" json:"ModelScopeIds,omitempty"`
	GeoPoliticalContextIds []int64                `protobuf:"varint,10,rep,packed,name=GeoPoliticalContextIds,proto3" json:"GeoPoliticalContextIds,omitempty"`
	ParentId               int64                  `protobuf:"varint,15,opt,name=ParentId,proto3" json:"ParentId,omitempty"`
	Code                   string                 `protobuf:"bytes,16,opt,name=Code,proto3" json:"Code,omitempty"`
	Version                int64                  `protobuf:"varint,17,opt,name=Version,proto3" json:"Version,omitempty"`
	ValueType              *ContextItemValueType  `protobuf:"bytes,18,opt,name=ValueType,proto3" json:"ValueType,omitempty"`
	Description            string                 `protobuf:"bytes,19,opt,name=Description,proto3" json:"Description,omitempty"`
	AgGlossaryURL          string                 `protobuf:"bytes,20,opt,name=AgGlossaryURL,proto3" json:"AgGlossaryURL,omitempty"`
	AgrovocURL             string                 `protobuf:"bytes,21,opt,name=AgrovocURL,proto3" json:"AgrovocURL,omitempty"`
	DefaultUOM             string                 `protobuf:"bytes,22,opt,name=DefaultUOM,proto3" json:"DefaultUOM,omitempty"`
	AllowConversion        bool                   `protobuf:"varint,23,opt,name=AllowConversion,proto3" json:"AllowConversion,omitempty"`
}

func (x *ContextItemDefinition) Reset() {
	*x = ContextItemDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContextItemDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextItemDefinition) ProtoMessage() {}

func (x *ContextItemDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextItemDefinition.ProtoReflect.Descriptor instead.
func (*ContextItemDefinition) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{5}
}

func (x *ContextItemDefinition) GetId() *CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ContextItemDefinition) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *ContextItemDefinition) GetLexicalizations() []*Lexicalization {
	if x != nil {
		return x.Lexicalizations
	}
	return nil
}

func (x *ContextItemDefinition) GetProperties() []*ContextItem {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *ContextItemDefinition) GetNestedDefIds() []int64 {
	if x != nil {
		return x.NestedDefIds
	}
	return nil
}

func (x *ContextItemDefinition) GetPresentations() []*Presentation {
	if x != nil {
		return x.Presentations
	}
	return nil
}

func (x *ContextItemDefinition) GetEnumItems() []*ContextItemEnumItem {
	if x != nil {
		return x.EnumItems
	}
	return nil
}

func (x *ContextItemDefinition) GetTimeScopes() []*TimeScope {
	if x != nil {
		return x.TimeScopes
	}
	return nil
}

func (x *ContextItemDefinition) GetModelScopeIds() []int64 {
	if x != nil {
		return x.ModelScopeIds
	}
	return nil
}

func (x *ContextItemDefinition) GetGeoPoliticalContextIds() []int64 {
	if x != nil {
		return x.GeoPoliticalContextIds
	}
	return nil
}

func (x *ContextItemDefinition) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *ContextItemDefinition) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ContextItemDefinition) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ContextItemDefinition) GetValueType() *ContextItemValueType {
	if x != nil {
		return x.ValueType
	}
	return nil
}

func (x *ContextItemDefinition) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ContextItemDefinition) GetAgGlossaryURL() string {
	if x != nil {
		return x.AgGlossaryURL
	}
	return ""
}

func (x *ContextItemDefinition) GetAgrovocURL() string {
	if x != nil {
		return x.AgrovocURL
	}
	return ""
}

func (x *ContextItemDefinition) GetDefaultUOM() string {
	if x != nil {
		return x.DefaultUOM
	}
	return ""
}

func (x *ContextItemDefinition) GetAllowConversion() bool {
	if x != nil {
		return x.AllowConversion
	}
	return false
}

type TimeScope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *CompoundIdentifier    `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Description string                 `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	DateContext *DateContext           `protobuf:"bytes,3,opt,name=DateContext,proto3" json:"DateContext,omitempty"`
	TimeStamp1  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=TimeStamp1,proto3" json:"TimeStamp1,omitempty"`
	TimeStamp2  *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=TimeStamp2,proto3" json:"TimeStamp2,omitempty"`
	Location1   *Location              `protobuf:"bytes,6,opt,name=Location1,proto3" json:"Location1,omitempty"`
	Location2   *Location              `protobuf:"bytes,7,opt,name=Location2,proto3" json:"Location2,omitempty"`
	Duration    *durationpb.Duration   `protobuf:"bytes,8,opt,name=Duration,proto3" json:"Duration,omitempty"`
}

func (x *TimeScope) Reset() {
	*x = TimeScope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeScope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeScope) ProtoMessage() {}

func (x *TimeScope) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeScope.ProtoReflect.Descriptor instead.
func (*TimeScope) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{6}
}

func (x *TimeScope) GetId() *CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TimeScope) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TimeScope) GetDateContext() *DateContext {
	if x != nil {
		return x.DateContext
	}
	return nil
}

func (x *TimeScope) GetTimeStamp1() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeStamp1
	}
	return nil
}

func (x *TimeScope) GetTimeStamp2() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeStamp2
	}
	return nil
}

func (x *TimeScope) GetLocation1() *Location {
	if x != nil {
		return x.Location1
	}
	return nil
}

func (x *TimeScope) GetLocation2() *Location {
	if x != nil {
		return x.Location2
	}
	return nil
}

func (x *TimeScope) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position         *Point         `protobuf:"bytes,1,opt,name=Position,proto3" json:"Position,omitempty"`
	ContextItems     []*ContextItem `protobuf:"bytes,2,rep,name=ContextItems,proto3" json:"ContextItems,omitempty"`
	GpsSource        *GpsSource     `protobuf:"bytes,3,opt,name=GpsSource,proto3" json:"GpsSource,omitempty"`
	ParentFacilityId int64          `protobuf:"varint,4,opt,name=ParentFacilityId,proto3" json:"ParentFacilityId,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{7}
}

func (x *Location) GetPosition() *Point {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *Location) GetContextItems() []*ContextItem {
	if x != nil {
		return x.ContextItems
	}
	return nil
}

func (x *Location) GetGpsSource() *GpsSource {
	if x != nil {
		return x.GpsSource
	}
	return nil
}

func (x *Location) GetParentFacilityId() int64 {
	if x != nil {
		return x.ParentFacilityId
	}
	return 0
}

// add Point to avoid circular dependencies
type Point struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float64 `protobuf:"fixed64,1,opt,name=X,proto3" json:"X,omitempty"`
	Y float64 `protobuf:"fixed64,2,opt,name=Y,proto3" json:"Y,omitempty"`
	Z float64 `protobuf:"fixed64,3,opt,name=Z,proto3" json:"Z,omitempty"`
}

func (x *Point) Reset() {
	*x = Point{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Point) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Point) ProtoMessage() {}

func (x *Point) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Point.ProtoReflect.Descriptor instead.
func (*Point) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{8}
}

func (x *Point) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Point) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Point) GetZ() float64 {
	if x != nil {
		return x.Z
	}
	return 0
}

type ContextItemValueType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ContextItemValueType) Reset() {
	*x = ContextItemValueType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContextItemValueType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextItemValueType) ProtoMessage() {}

func (x *ContextItemValueType) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextItemValueType.ProtoReflect.Descriptor instead.
func (*ContextItemValueType) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{9}
}

type ContextItemEnumItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value           string            `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
	Version         int64             `protobuf:"varint,2,opt,name=Version,proto3" json:"Version,omitempty"`
	Description     string            `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	AgGlossaryURL   string            `protobuf:"bytes,4,opt,name=AgGlossaryURL,proto3" json:"AgGlossaryURL,omitempty"`
	AgrovocURL      string            `protobuf:"bytes,5,opt,name=AgrovocURL,proto3" json:"AgrovocURL,omitempty"`
	Lexicalizations []*Lexicalization `protobuf:"bytes,6,rep,name=Lexicalizations,proto3" json:"Lexicalizations,omitempty"`
	Properties      []*ContextItem    `protobuf:"bytes,7,rep,name=Properties,proto3" json:"Properties,omitempty"`
}

func (x *ContextItemEnumItem) Reset() {
	*x = ContextItemEnumItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContextItemEnumItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextItemEnumItem) ProtoMessage() {}

func (x *ContextItemEnumItem) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextItemEnumItem.ProtoReflect.Descriptor instead.
func (*ContextItemEnumItem) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{10}
}

func (x *ContextItemEnumItem) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ContextItemEnumItem) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ContextItemEnumItem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ContextItemEnumItem) GetAgGlossaryURL() string {
	if x != nil {
		return x.AgGlossaryURL
	}
	return ""
}

func (x *ContextItemEnumItem) GetAgrovocURL() string {
	if x != nil {
		return x.AgrovocURL
	}
	return ""
}

func (x *ContextItemEnumItem) GetLexicalizations() []*Lexicalization {
	if x != nil {
		return x.Lexicalizations
	}
	return nil
}

func (x *ContextItemEnumItem) GetProperties() []*ContextItem {
	if x != nil {
		return x.Properties
	}
	return nil
}

type DateContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DateContext) Reset() {
	*x = DateContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateContext) ProtoMessage() {}

func (x *DateContext) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateContext.ProtoReflect.Descriptor instead.
func (*DateContext) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{11}
}

type GPCLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GPCLevel) Reset() {
	*x = GPCLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPCLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPCLevel) ProtoMessage() {}

func (x *GPCLevel) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPCLevel.ProtoReflect.Descriptor instead.
func (*GPCLevel) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{12}
}

type GpsSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GpsSource) Reset() {
	*x = GpsSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GpsSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GpsSource) ProtoMessage() {}

func (x *GpsSource) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GpsSource.ProtoReflect.Descriptor instead.
func (*GpsSource) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{13}
}

type GeoPoliticalContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *CompoundIdentifier `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Code        string              `protobuf:"bytes,2,opt,name=Code,proto3" json:"Code,omitempty"`
	Description string              `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
}

func (x *GeoPoliticalContext) Reset() {
	*x = GeoPoliticalContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoPoliticalContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoPoliticalContext) ProtoMessage() {}

func (x *GeoPoliticalContext) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoPoliticalContext.ProtoReflect.Descriptor instead.
func (*GeoPoliticalContext) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{14}
}

func (x *GeoPoliticalContext) GetId() *CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GeoPoliticalContext) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GeoPoliticalContext) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type Language struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *CompoundIdentifier `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Code        string              `protobuf:"bytes,2,opt,name=Code,proto3" json:"Code,omitempty"`
	Description string              `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
}

func (x *Language) Reset() {
	*x = Language{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Language) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Language) ProtoMessage() {}

func (x *Language) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Language.ProtoReflect.Descriptor instead.
func (*Language) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{15}
}

func (x *Language) GetId() *CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Language) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Language) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type Lexicalization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text                   string  `protobuf:"bytes,1,opt,name=Text,proto3" json:"Text,omitempty"`
	LanguageId             int64   `protobuf:"varint,2,opt,name=LanguageId,proto3" json:"LanguageId,omitempty"`
	GeoPoliticalContextIds []int64 `protobuf:"varint,3,rep,packed,name=GeoPoliticalContextIds,proto3" json:"GeoPoliticalContextIds,omitempty"`
}

func (x *Lexicalization) Reset() {
	*x = Lexicalization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lexicalization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lexicalization) ProtoMessage() {}

func (x *Lexicalization) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lexicalization.ProtoReflect.Descriptor instead.
func (*Lexicalization) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{16}
}

func (x *Lexicalization) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Lexicalization) GetLanguageId() int64 {
	if x != nil {
		return x.LanguageId
	}
	return 0
}

func (x *Lexicalization) GetGeoPoliticalContextIds() []int64 {
	if x != nil {
		return x.GeoPoliticalContextIds
	}
	return nil
}

type ModelScope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *CompoundIdentifier `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Code           string              `protobuf:"bytes,2,opt,name=Code,proto3" json:"Code,omitempty"`
	Description    string              `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	ModelScopeType *ModelScopeType     `protobuf:"bytes,4,opt,name=ModelScopeType,proto3" json:"ModelScopeType,omitempty"`
}

func (x *ModelScope) Reset() {
	*x = ModelScope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelScope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelScope) ProtoMessage() {}

func (x *ModelScope) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelScope.ProtoReflect.Descriptor instead.
func (*ModelScope) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{17}
}

func (x *ModelScope) GetId() *CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ModelScope) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ModelScope) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ModelScope) GetModelScopeType() *ModelScopeType {
	if x != nil {
		return x.ModelScopeType
	}
	return nil
}

type ModelScopeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ModelScopeType) Reset() {
	*x = ModelScopeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelScopeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelScopeType) ProtoMessage() {}

func (x *ModelScopeType) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelScopeType.ProtoReflect.Descriptor instead.
func (*ModelScopeType) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{18}
}

type OperationType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *OperationType) Reset() {
	*x = OperationType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationType) ProtoMessage() {}

func (x *OperationType) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationType.ProtoReflect.Descriptor instead.
func (*OperationType) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{19}
}

func (x *OperationType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Presentation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description            string  `protobuf:"bytes,1,opt,name=Description,proto3" json:"Description,omitempty"`
	EntryFormatRegEx       string  `protobuf:"bytes,2,opt,name=EntryFormatRegEx,proto3" json:"EntryFormatRegEx,omitempty"`
	DisplayFormatRegEx     string  `protobuf:"bytes,3,opt,name=DisplayFormatRegEx,proto3" json:"DisplayFormatRegEx,omitempty"`
	GeoPoliticalContextIds []int64 `protobuf:"varint,4,rep,name=GeoPoliticalContextIds,proto3" json:"GeoPoliticalContextIds,omitempty"`
}

func (x *Presentation) Reset() {
	*x = Presentation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Presentation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Presentation) ProtoMessage() {}

func (x *Presentation) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Presentation.ProtoReflect.Descriptor instead.
func (*Presentation) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{20}
}

func (x *Presentation) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Presentation) GetEntryFormatRegEx() string {
	if x != nil {
		return x.EntryFormatRegEx
	}
	return ""
}

func (x *Presentation) GetDisplayFormatRegEx() string {
	if x != nil {
		return x.DisplayFormatRegEx
	}
	return ""
}

func (x *Presentation) GetGeoPoliticalContextIds() []int64 {
	if x != nil {
		return x.GeoPoliticalContextIds
	}
	return nil
}

type SetupDataPedigree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetupDataPedigree) Reset() {
	*x = SetupDataPedigree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetupDataPedigree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetupDataPedigree) ProtoMessage() {}

func (x *SetupDataPedigree) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetupDataPedigree.ProtoReflect.Descriptor instead.
func (*SetupDataPedigree) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{21}
}

type UnitOfMeasure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      *CompoundIdentifier     `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Code                    string                  `protobuf:"bytes,2,opt,name=Code,proto3" json:"Code,omitempty"`
	Dimension               *UnitOfMeasureDimension `protobuf:"bytes,3,opt,name=Dimension,proto3" json:"Dimension,omitempty"`
	IsReferenceForDimension bool                    `protobuf:"varint,4,opt,name=IsReferenceForDimension,proto3" json:"IsReferenceForDimension,omitempty"`
	Scale                   float64                 `protobuf:"fixed64,5,opt,name=Scale,proto3" json:"Scale,omitempty"`
	Offset                  float64                 `protobuf:"fixed64,6,opt,name=Offset,proto3" json:"Offset,omitempty"`
}

func (x *UnitOfMeasure) Reset() {
	*x = UnitOfMeasure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnitOfMeasure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnitOfMeasure) ProtoMessage() {}

func (x *UnitOfMeasure) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnitOfMeasure.ProtoReflect.Descriptor instead.
func (*UnitOfMeasure) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{22}
}

func (x *UnitOfMeasure) GetId() *CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UnitOfMeasure) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *UnitOfMeasure) GetDimension() *UnitOfMeasureDimension {
	if x != nil {
		return x.Dimension
	}
	return nil
}

func (x *UnitOfMeasure) GetIsReferenceForDimension() bool {
	if x != nil {
		return x.IsReferenceForDimension
	}
	return false
}

func (x *UnitOfMeasure) GetScale() float64 {
	if x != nil {
		return x.Scale
	}
	return 0
}

func (x *UnitOfMeasure) GetOffset() float64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type UnitOfMeasureDimension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnitOfMeasureDimension) Reset() {
	*x = UnitOfMeasureDimension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnitOfMeasureDimension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnitOfMeasureDimension) ProtoMessage() {}

func (x *UnitOfMeasureDimension) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnitOfMeasureDimension.ProtoReflect.Descriptor instead.
func (*UnitOfMeasureDimension) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{23}
}

type UnitOfMeasureAuthority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnitOfMeasureAuthority) Reset() {
	*x = UnitOfMeasureAuthority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Common_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnitOfMeasureAuthority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnitOfMeasureAuthority) ProtoMessage() {}

func (x *UnitOfMeasureAuthority) ProtoReflect() protoreflect.Message {
	mi := &file_Common_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnitOfMeasureAuthority.ProtoReflect.Descriptor instead.
func (*UnitOfMeasureAuthority) Descriptor() ([]byte, []int) {
	return file_Common_proto_rawDescGZIP(), []int{24}
}

var File_Common_proto protoreflect.FileDescriptor

var file_Common_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c,
	0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6c, 0x0a,
	0x12, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x09, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64,
	0x52, 0x09, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x73, 0x22, 0xd8, 0x01, 0x0a, 0x08,
	0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x49, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06,
	0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3e,
	0x0a, 0x0c, 0x49, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0c, 0x49, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26,
	0x0a, 0x0b, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0xc9, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0b, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x68, 0x0a, 0x06, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x22, 0x38, 0x0a, 0x0a,
	0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x55,
	0x49, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x6f, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x10, 0x02, 0x12, 0x07, 0x0a,
	0x03, 0x55, 0x52, 0x49, 0x10, 0x03, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x5a, 0x0a, 0x0c, 0x49, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x22, 0x24, 0x0a, 0x10,
	0x49, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x07, 0x0a, 0x03, 0x47, 0x4c, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x52, 0x49,
	0x10, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc9, 0x01, 0x0a,
	0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55,
	0x4f, 0x4d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55,
	0x4f, 0x4d, 0x12, 0x3b, 0x0a, 0x0b, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x0b, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12,
	0x37, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x0a, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22, 0xe4, 0x06, 0x0a, 0x15, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x02, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x12, 0x46, 0x0a, 0x0f, 0x4c, 0x65, 0x78, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x41, 0x44, 0x41, 0x50,
	0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x65, 0x78, 0x69, 0x63, 0x61, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x4c, 0x65, 0x78, 0x69, 0x63, 0x61, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x41,
	0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x44, 0x65, 0x66,
	0x49, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x4e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x44, 0x65, 0x66, 0x49, 0x64, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x09, 0x45, 0x6e, 0x75,
	0x6d, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x41,
	0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x6e, 0x75, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x09, 0x45, 0x6e, 0x75, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x49, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x47, 0x65, 0x6f,
	0x50, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x49, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x03, 0x52, 0x16, 0x47, 0x65, 0x6f, 0x50, 0x6f,
	0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x09, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x24, 0x0a, 0x0d, 0x41, 0x67, 0x47, 0x6c, 0x6f, 0x73, 0x73, 0x61, 0x72, 0x79, 0x55, 0x52, 0x4c,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x41, 0x67, 0x47, 0x6c, 0x6f, 0x73, 0x73, 0x61,
	0x72, 0x79, 0x55, 0x52, 0x4c, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x67, 0x72, 0x6f, 0x76, 0x6f, 0x63,
	0x55, 0x52, 0x4c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x67, 0x72, 0x6f, 0x76,
	0x6f, 0x63, 0x55, 0x52, 0x4c, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x55, 0x4f, 0x4d, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x55, 0x4f, 0x4d, 0x12, 0x28, 0x0a, 0x0f, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xb7, 0x03, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x30, 0x0a,
	0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x41, 0x44, 0x41, 0x50,
	0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e,
	0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x0b, 0x44, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3a,
	0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x31, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x31, 0x12, 0x3a, 0x0a, 0x0a, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x6d, 0x70, 0x32, 0x12, 0x34, 0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x31, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x41, 0x44, 0x41, 0x50,
	0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x12, 0x34, 0x0a, 0x09,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x32, 0x12, 0x35, 0x0a, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xdd, 0x01, 0x0a, 0x08, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x47, 0x70, 0x73, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x41, 0x44, 0x41, 0x50,
	0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x70, 0x73, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x09, 0x47, 0x70, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2a, 0x0a,
	0x10, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x46,
	0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x31, 0x0a, 0x05, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x58, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x58,
	0x12, 0x0c, 0x0a, 0x01, 0x59, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x59, 0x12, 0x0c,
	0x0a, 0x01, 0x5a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x5a, 0x22, 0x77, 0x0a, 0x14,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x5f, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x45, 0x6e, 0x75, 0x6d, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x6f, 0x6f, 0x6c, 0x10, 0x02,
	0x12, 0x0a, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x10, 0x05, 0x22, 0xb0, 0x02, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x45, 0x6e, 0x75, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x24, 0x0a, 0x0d, 0x41, 0x67, 0x47, 0x6c, 0x6f, 0x73, 0x73, 0x61, 0x72, 0x79, 0x55, 0x52, 0x4c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x41, 0x67, 0x47, 0x6c, 0x6f, 0x73, 0x73, 0x61,
	0x72, 0x79, 0x55, 0x52, 0x4c, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x67, 0x72, 0x6f, 0x76, 0x6f, 0x63,
	0x55, 0x52, 0x4c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x67, 0x72, 0x6f, 0x76,
	0x6f, 0x63, 0x55, 0x52, 0x4c, 0x12, 0x46, 0x0a, 0x0f, 0x4c, 0x65, 0x78, 0x69, 0x63, 0x61, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x65,
	0x78, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x4c, 0x65,
	0x78, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39, 0x0a,
	0x0a, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0xc0, 0x03, 0x0a, 0x0b, 0x44, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xb0, 0x03, 0x0a, 0x0f, 0x44, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0c, 0x0a, 0x08,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0x01, 0x12, 0x0f, 0x0a,
	0x0b, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x45, 0x6e, 0x64, 0x10, 0x02, 0x12, 0x0e,
	0x0a, 0x0a, 0x43, 0x72, 0x6f, 0x70, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x10, 0x03, 0x12, 0x0f,
	0x0a, 0x0b, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x04, 0x12,
	0x0f, 0x0a, 0x0b, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0x05,
	0x12, 0x0d, 0x0a, 0x09, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x45, 0x6e, 0x64, 0x10, 0x06, 0x12,
	0x12, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x45, 0x6e, 0x64, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x0c, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x10, 0x0d, 0x12,
	0x12, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x10, 0x0e, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x10, 0x0f, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x6f, 0x61, 0x64, 0x10, 0x10, 0x12, 0x0a,
	0x0a, 0x06, 0x55, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x10, 0x11, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75,
	0x73, 0x70, 0x65, 0x6e, 0x64, 0x10, 0x12, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6d,
	0x65, 0x10, 0x13, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x10, 0x14, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x15, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x10, 0x16, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x68, 0x65, 0x6e, 0x6f,
	0x6d, 0x65, 0x6e, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x17, 0x12, 0x0e, 0x0a, 0x0a, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x18, 0x22, 0x3b, 0x0a, 0x08, 0x47,
	0x50, 0x43, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x2f, 0x0a, 0x0c, 0x47, 0x50, 0x43, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x44, 0x4d, 0x31, 0x10, 0x01, 0x12, 0x08,
	0x0a, 0x04, 0x41, 0x44, 0x4d, 0x32, 0x10, 0x02, 0x22, 0xd5, 0x02, 0x0a, 0x09, 0x47, 0x70, 0x73,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xc7, 0x02, 0x0a, 0x0d, 0x47, 0x70, 0x73, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x72, 0x61, 0x77, 0x6e, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x47, 0x50, 0x53, 0x10, 0x02, 0x12,
	0x0c, 0x0a, 0x08, 0x44, 0x65, 0x65, 0x72, 0x65, 0x52, 0x54, 0x4b, 0x10, 0x03, 0x12, 0x0d, 0x0a,
	0x09, 0x44, 0x65, 0x65, 0x72, 0x65, 0x52, 0x54, 0x4b, 0x58, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08,
	0x44, 0x65, 0x65, 0x72, 0x65, 0x53, 0x46, 0x31, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x65,
	0x65, 0x72, 0x65, 0x53, 0x46, 0x32, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x65, 0x65, 0x72,
	0x65, 0x57, 0x41, 0x41, 0x53, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x4e, 0x53, 0x53, 0x66,
	0x69, 0x78, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x47, 0x4e, 0x53, 0x53, 0x66, 0x69, 0x78,
	0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x65, 0x47, 0x4e, 0x53,
	0x53, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x54, 0x4b, 0x46, 0x69, 0x78, 0x65, 0x64, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x10, 0x0b, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x54, 0x4b, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x10, 0x0c, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x73, 0x74, 0x44, 0x52, 0x6d,
	0x6f, 0x64, 0x65, 0x10, 0x0d, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x10, 0x0e, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x0f, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x65, 0x73, 0x6b,
	0x74, 0x6f, 0x70, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x10, 0x10, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x10, 0x11, 0x12, 0x07, 0x0a,
	0x03, 0x50, 0x50, 0x50, 0x10, 0x12, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x42, 0x41, 0x53, 0x10, 0x13,
	0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x10, 0x14,
	0x22, 0x7d, 0x0a, 0x13, 0x47, 0x65, 0x6f, 0x50, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x72, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x7c, 0x0a, 0x0e, 0x4c, 0x65, 0x78, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x47, 0x65, 0x6f,
	0x50, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x16, 0x47, 0x65, 0x6f, 0x50, 0x6f,
	0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64,
	0x73, 0x22, 0xba, 0x01, 0x0a, 0x0a, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x41,
	0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3f,
	0x0a, 0x0e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x2d, 0x0a, 0x12, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x53, 0x4f, 0x31, 0x31, 0x37,
	0x38, 0x33, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x44, 0x41, 0x50, 0x54, 0x10, 0x01, 0x22,
	0x9e, 0x02, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf6, 0x01, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x65,
	0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x53,
	0x6f, 0x77, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x72, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x69, 0x6c, 0x6c, 0x61, 0x67,
	0x65, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x10, 0x05, 0x12,
	0x0a, 0x0a, 0x06, 0x4d, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x57,
	0x72, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x61, 0x72,
	0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x48, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x09, 0x12,
	0x0d, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x10, 0x0a, 0x12, 0x0c,
	0x0a, 0x08, 0x53, 0x77, 0x61, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x10, 0x0b, 0x12, 0x0e, 0x0a, 0x0a,
	0x49, 0x72, 0x72, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0c, 0x12, 0x12, 0x0a, 0x0e,
	0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0d,
	0x22, 0xc8, 0x01, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x52, 0x65, 0x67, 0x45, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x65, 0x67, 0x45, 0x78, 0x12,
	0x2e, 0x0a, 0x12, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x52, 0x65, 0x67, 0x45, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x65, 0x67, 0x45, 0x78, 0x12,
	0x3a, 0x0a, 0x16, 0x47, 0x65, 0x6f, 0x50, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x42,
	0x02, 0x10, 0x00, 0x52, 0x16, 0x47, 0x65, 0x6f, 0x50, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x73, 0x22, 0x64, 0x0a, 0x11, 0x53,
	0x65, 0x74, 0x75, 0x70, 0x44, 0x61, 0x74, 0x61, 0x50, 0x65, 0x64, 0x69, 0x67, 0x72, 0x65, 0x65,
	0x22, 0x4f, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x75, 0x70, 0x44, 0x61, 0x74, 0x61, 0x50, 0x65, 0x64,
	0x69, 0x67, 0x72, 0x65, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x42, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10,
	0x02, 0x22, 0x81, 0x02, 0x0a, 0x0d, 0x55, 0x6e, 0x69, 0x74, 0x4f, 0x66, 0x4d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x44, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x41,
	0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x6e, 0x69, 0x74,
	0x4f, 0x66, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a,
	0x17, 0x49, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x44,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17,
	0x49, 0x73, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x44, 0x69,
	0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x63, 0x61, 0x6c, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x8e, 0x0b, 0x0a, 0x16, 0x55, 0x6e, 0x69, 0x74, 0x4f, 0x66,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0xf3, 0x0a, 0x0a, 0x1a, 0x55, 0x6e, 0x69, 0x74, 0x4f, 0x66, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x0d, 0x0a, 0x09, 0x50, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x4d, 0x61, 0x73, 0x73, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x50, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x10, 0x02, 0x12, 0x08, 0x0a,
	0x04, 0x53, 0x61, 0x63, 0x6b, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x6e, 0x69, 0x74, 0x6c,
	0x65, 0x73, 0x73, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x65, 0x65, 0x64, 0x73, 0x10, 0x05,
	0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x61, 0x73, 0x73, 0x50, 0x65, 0x72, 0x42, 0x61, 0x72, 0x72, 0x65,
	0x6c, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x61, 0x73, 0x73, 0x50, 0x65, 0x72, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x61, 0x73, 0x73, 0x50, 0x65,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x08, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x50, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x10,
	0x09, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x65, 0x10, 0x0a, 0x12, 0x0f,
	0x0a, 0x0b, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x10, 0x0b, 0x12,
	0x11, 0x0a, 0x0d, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x4d, 0x61, 0x73, 0x73,
	0x10, 0x0c, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x65,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x0d, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x61, 0x74, 0x61, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x0e, 0x12, 0x0f,
	0x0a, 0x0b, 0x53, 0x65, 0x65, 0x64, 0x73, 0x50, 0x65, 0x72, 0x42, 0x61, 0x67, 0x10, 0x0f, 0x12,
	0x0a, 0x0a, 0x06, 0x42, 0x61, 0x72, 0x72, 0x65, 0x6c, 0x10, 0x10, 0x12, 0x0f, 0x0a, 0x0b, 0x4d,
	0x61, 0x73, 0x73, 0x50, 0x65, 0x72, 0x4d, 0x61, 0x73, 0x73, 0x10, 0x11, 0x12, 0x11, 0x0a, 0x0d,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x10, 0x12, 0x12,
	0x0c, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x10, 0x13, 0x12, 0x10, 0x0a,
	0x0c, 0x50, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x10, 0x14, 0x12,
	0x0d, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x10, 0x15, 0x12, 0x12,
	0x0a, 0x0e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x65, 0x72, 0x42, 0x61, 0x67,
	0x10, 0x16, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x61, 0x73, 0x73, 0x50, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x10, 0x17, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x65, 0x72, 0x53,
	0x61, 0x63, 0x6b, 0x10, 0x18, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x65, 0x65, 0x64, 0x73, 0x50, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x10, 0x19, 0x12, 0x0a, 0x0a, 0x06,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x10, 0x1a, 0x12, 0x13, 0x0a, 0x0f, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x50, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x10, 0x1b, 0x12, 0x08, 0x0a,
	0x04, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x1c, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x61, 0x6c, 0x65, 0x73,
	0x50, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x10, 0x1d, 0x12, 0x0c, 0x0a, 0x08, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x10, 0x1e, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x6f, 0x72,
	0x63, 0x65, 0x10, 0x1f, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x10,
	0x20, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x61, 0x73, 0x73, 0x50, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x65,
	0x10, 0x21, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x10, 0x22, 0x12, 0x16, 0x0a,
	0x12, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x10, 0x23, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x65,
	0x72, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x24, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x50, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x25, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x65, 0x10, 0x26, 0x12,
	0x11, 0x0a, 0x0d, 0x42, 0x61, 0x72, 0x72, 0x65, 0x6c, 0x50, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61,
	0x10, 0x27, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x65, 0x65, 0x64, 0x73, 0x50, 0x65, 0x72, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x10, 0x28, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x50, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x10, 0x29, 0x12, 0x10, 0x0a,
	0x0c, 0x53, 0x65, 0x65, 0x64, 0x73, 0x50, 0x65, 0x72, 0x53, 0x61, 0x63, 0x6b, 0x10, 0x2a, 0x12,
	0x13, 0x0a, 0x0f, 0x41, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69,
	0x74, 0x79, 0x10, 0x2b, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x61, 0x73, 0x73, 0x50, 0x65, 0x72, 0x53,
	0x65, 0x65, 0x64, 0x73, 0x10, 0x2c, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x10, 0x2d, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x50, 0x65, 0x72, 0x44, 0x65, 0x67, 0x72, 0x65, 0x65, 0x10, 0x2e, 0x12, 0x0b, 0x0a,
	0x07, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x10, 0x2f, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x6c,
	0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x10, 0x30, 0x12,
	0x10, 0x0a, 0x0c, 0x53, 0x65, 0x65, 0x64, 0x73, 0x50, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x10,
	0x31, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x10, 0x32, 0x12,
	0x10, 0x0a, 0x0c, 0x42, 0x61, 0x6c, 0x65, 0x73, 0x50, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x10,
	0x33, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x41, 0x72, 0x65,
	0x61, 0x10, 0x34, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x65, 0x65, 0x64, 0x73, 0x50, 0x65, 0x72, 0x41,
	0x72, 0x65, 0x61, 0x10, 0x35, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x65, 0x72, 0x42, 0x61, 0x67, 0x10,
	0x36, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x61, 0x67, 0x10, 0x37, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x61,
	0x63, 0x6b, 0x50, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x10, 0x38, 0x12, 0x08, 0x0a, 0x04, 0x52,
	0x6f, 0x77, 0x73, 0x10, 0x39, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72,
	0x65, 0x10, 0x3a, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x50, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x10, 0x3b, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x61, 0x73,
	0x73, 0x50, 0x65, 0x72, 0x53, 0x61, 0x63, 0x6b, 0x10, 0x3c, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x61,
	0x73, 0x73, 0x50, 0x65, 0x72, 0x42, 0x61, 0x67, 0x10, 0x3d, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x61,
	0x6c, 0x65, 0x10, 0x3e, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x72, 0x65, 0x61, 0x50, 0x65, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x10, 0x3f, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x10, 0x40, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x10, 0x41, 0x12, 0x0b,
	0x0a, 0x07, 0x50, 0x65, 0x72, 0x4d, 0x61, 0x73, 0x73, 0x10, 0x42, 0x12, 0x0e, 0x0a, 0x0a, 0x42,
	0x61, 0x67, 0x50, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x10, 0x43, 0x12, 0x10, 0x0a, 0x0c, 0x42,
	0x61, 0x6c, 0x65, 0x73, 0x50, 0x65, 0x72, 0x4d, 0x61, 0x73, 0x73, 0x10, 0x44, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x65, 0x65, 0x64, 0x73, 0x50, 0x65, 0x72, 0x42, 0x61, 0x72, 0x72, 0x65, 0x6c, 0x10,
	0x45, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x10, 0x46, 0x12, 0x08,
	0x0a, 0x04, 0x41, 0x72, 0x65, 0x61, 0x10, 0x47, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x10, 0x48, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x10, 0x49, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x10, 0x4a, 0x12, 0x10, 0x0a,
	0x0c, 0x53, 0x65, 0x65, 0x64, 0x73, 0x50, 0x65, 0x72, 0x4d, 0x61, 0x73, 0x73, 0x10, 0x4b, 0x12,
	0x0f, 0x0a, 0x0b, 0x4d, 0x61, 0x73, 0x73, 0x50, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x10, 0x4c,
	0x12, 0x0b, 0x0a, 0x07, 0x50, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x10, 0x4d, 0x12, 0x13, 0x0a,
	0x0f, 0x4d, 0x61, 0x73, 0x73, 0x50, 0x65, 0x72, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x10, 0x4e, 0x12, 0x15, 0x0a, 0x11, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x65, 0x72, 0x44,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x10, 0x4f, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x6e, 0x65,
	0x72, 0x67, 0x79, 0x10, 0x50, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x10, 0x51,
	0x12, 0x0a, 0x0a, 0x06, 0x54, 0x6f, 0x72, 0x71, 0x75, 0x65, 0x10, 0x52, 0x12, 0x08, 0x0a, 0x04,
	0x47, 0x65, 0x61, 0x72, 0x10, 0x53, 0x22, 0x62, 0x0a, 0x16, 0x55, 0x6e, 0x69, 0x74, 0x4f, 0x66,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x22, 0x48, 0x0a, 0x1a, 0x55, 0x6e, 0x69, 0x74, 0x4f, 0x66, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x52, 0x65, 0x63, 0x32, 0x30, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x51,
	0x55, 0x44, 0x54, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x43, 0x55, 0x4d, 0x10, 0x02, 0x12,
	0x09, 0x0a, 0x05, 0x41, 0x44, 0x41, 0x50, 0x54, 0x10, 0x03, 0x42, 0x28, 0x5a, 0x26, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x61, 0x6c, 0x74, 0x65, 0x67, 0x72,
	0x6f, 0x73, 0x73, 0x65, 0x2f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x2d, 0x67, 0x6f, 0x2f, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_Common_proto_rawDescOnce sync.Once
	file_Common_proto_rawDescData = file_Common_proto_rawDesc
)

func file_Common_proto_rawDescGZIP() []byte {
	file_Common_proto_rawDescOnce.Do(func() {
		file_Common_proto_rawDescData = protoimpl.X.CompressGZIP(file_Common_proto_rawDescData)
	})
	return file_Common_proto_rawDescData
}

var file_Common_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_Common_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_Common_proto_goTypes = []interface{}{
	(IdType_IdTypeEnum)(0),                                 // 0: ADAPT.Common.IdType.IdTypeEnum
	(IdSourceType_IdSourceTypeEnum)(0),                     // 1: ADAPT.Common.IdSourceType.IdSourceTypeEnum
	(ContextItemValueType_ContextItemValueTypeEnum)(0),     // 2: ADAPT.Common.ContextItemValueType.ContextItemValueTypeEnum
	(DateContext_DateContextEnum)(0),                       // 3: ADAPT.Common.DateContext.DateContextEnum
	(GPCLevel_GPCLevelEnum)(0),                             // 4: ADAPT.Common.GPCLevel.GPCLevelEnum
	(GpsSource_GpsSourceEnum)(0),                           // 5: ADAPT.Common.GpsSource.GpsSourceEnum
	(ModelScopeType_ModelScopeTypeEnum)(0),                 // 6: ADAPT.Common.ModelScopeType.ModelScopeTypeEnum
	(OperationType_OperationTypeEnum)(0),                   // 7: ADAPT.Common.OperationType.OperationTypeEnum
	(SetupDataPedigree_SetupDataPedigreeEnum)(0),           // 8: ADAPT.Common.SetupDataPedigree.SetupDataPedigreeEnum
	(UnitOfMeasureDimension_UnitOfMeasureDimensionEnum)(0), // 9: ADAPT.Common.UnitOfMeasureDimension.UnitOfMeasureDimensionEnum
	(UnitOfMeasureAuthority_UnitOfMeasureAuthorityEnum)(0), // 10: ADAPT.Common.UnitOfMeasureAuthority.UnitOfMeasureAuthorityEnum
	(*CompoundIdentifier)(nil),                             // 11: ADAPT.Common.CompoundIdentifier
	(*UniqueId)(nil),                                       // 12: ADAPT.Common.UniqueId
	(*IdType)(nil),                                         // 13: ADAPT.Common.IdType
	(*IdSourceType)(nil),                                   // 14: ADAPT.Common.IdSourceType
	(*ContextItem)(nil),                                    // 15: ADAPT.Common.ContextItem
	(*ContextItemDefinition)(nil),                          // 16: ADAPT.Common.ContextItemDefinition
	(*TimeScope)(nil),                                      // 17: ADAPT.Common.TimeScope
	(*Location)(nil),                                       // 18: ADAPT.Common.Location
	(*Point)(nil),                                          // 19: ADAPT.Common.Point
	(*ContextItemValueType)(nil),                           // 20: ADAPT.Common.ContextItemValueType
	(*ContextItemEnumItem)(nil),                            // 21: ADAPT.Common.ContextItemEnumItem
	(*DateContext)(nil),                                    // 22: ADAPT.Common.DateContext
	(*GPCLevel)(nil),                                       // 23: ADAPT.Common.GPCLevel
	(*GpsSource)(nil),                                      // 24: ADAPT.Common.GpsSource
	(*GeoPoliticalContext)(nil),                            // 25: ADAPT.Common.GeoPoliticalContext
	(*Language)(nil),                                       // 26: ADAPT.Common.Language
	(*Lexicalization)(nil),                                 // 27: ADAPT.Common.Lexicalization
	(*ModelScope)(nil),                                     // 28: ADAPT.Common.ModelScope
	(*ModelScopeType)(nil),                                 // 29: ADAPT.Common.ModelScopeType
	(*OperationType)(nil),                                  // 30: ADAPT.Common.OperationType
	(*Presentation)(nil),                                   // 31: ADAPT.Common.Presentation
	(*SetupDataPedigree)(nil),                              // 32: ADAPT.Common.SetupDataPedigree
	(*UnitOfMeasure)(nil),                                  // 33: ADAPT.Common.UnitOfMeasure
	(*UnitOfMeasureDimension)(nil),                         // 34: ADAPT.Common.UnitOfMeasureDimension
	(*UnitOfMeasureAuthority)(nil),                         // 35: ADAPT.Common.UnitOfMeasureAuthority
	(*timestamppb.Timestamp)(nil),                          // 36: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),                            // 37: google.protobuf.Duration
}
var file_Common_proto_depIdxs = []int32{
	12, // 0: ADAPT.Common.CompoundIdentifier.UniqueIds:type_name -> ADAPT.Common.UniqueId
	13, // 1: ADAPT.Common.UniqueId.IdType:type_name -> ADAPT.Common.IdType
	14, // 2: ADAPT.Common.UniqueId.IdSourceType:type_name -> ADAPT.Common.IdSourceType
	15, // 3: ADAPT.Common.ContextItem.NestedItems:type_name -> ADAPT.Common.ContextItem
	17, // 4: ADAPT.Common.ContextItem.TimeScopes:type_name -> ADAPT.Common.TimeScope
	11, // 5: ADAPT.Common.ContextItemDefinition.Id:type_name -> ADAPT.Common.CompoundIdentifier
	27, // 6: ADAPT.Common.ContextItemDefinition.Lexicalizations:type_name -> ADAPT.Common.Lexicalization
	15, // 7: ADAPT.Common.ContextItemDefinition.Properties:type_name -> ADAPT.Common.ContextItem
	31, // 8: ADAPT.Common.ContextItemDefinition.Presentations:type_name -> ADAPT.Common.Presentation
	21, // 9: ADAPT.Common.ContextItemDefinition.EnumItems:type_name -> ADAPT.Common.ContextItemEnumItem
	17, // 10: ADAPT.Common.ContextItemDefinition.TimeScopes:type_name -> ADAPT.Common.TimeScope
	20, // 11: ADAPT.Common.ContextItemDefinition.ValueType:type_name -> ADAPT.Common.ContextItemValueType
	11, // 12: ADAPT.Common.TimeScope.Id:type_name -> ADAPT.Common.CompoundIdentifier
	22, // 13: ADAPT.Common.TimeScope.DateContext:type_name -> ADAPT.Common.DateContext
	36, // 14: ADAPT.Common.TimeScope.TimeStamp1:type_name -> google.protobuf.Timestamp
	36, // 15: ADAPT.Common.TimeScope.TimeStamp2:type_name -> google.protobuf.Timestamp
	18, // 16: ADAPT.Common.TimeScope.Location1:type_name -> ADAPT.Common.Location
	18, // 17: ADAPT.Common.TimeScope.Location2:type_name -> ADAPT.Common.Location
	37, // 18: ADAPT.Common.TimeScope.Duration:type_name -> google.protobuf.Duration
	19, // 19: ADAPT.Common.Location.Position:type_name -> ADAPT.Common.Point
	15, // 20: ADAPT.Common.Location.ContextItems:type_name -> ADAPT.Common.ContextItem
	24, // 21: ADAPT.Common.Location.GpsSource:type_name -> ADAPT.Common.GpsSource
	27, // 22: ADAPT.Common.ContextItemEnumItem.Lexicalizations:type_name -> ADAPT.Common.Lexicalization
	15, // 23: ADAPT.Common.ContextItemEnumItem.Properties:type_name -> ADAPT.Common.ContextItem
	11, // 24: ADAPT.Common.GeoPoliticalContext.Id:type_name -> ADAPT.Common.CompoundIdentifier
	11, // 25: ADAPT.Common.Language.Id:type_name -> ADAPT.Common.CompoundIdentifier
	11, // 26: ADAPT.Common.ModelScope.Id:type_name -> ADAPT.Common.CompoundIdentifier
	29, // 27: ADAPT.Common.ModelScope.ModelScopeType:type_name -> ADAPT.Common.ModelScopeType
	11, // 28: ADAPT.Common.UnitOfMeasure.Id:type_name -> ADAPT.Common.CompoundIdentifier
	34, // 29: ADAPT.Common.UnitOfMeasure.Dimension:type_name -> ADAPT.Common.UnitOfMeasureDimension
	30, // [30:30] is the sub-list for method output_type
	30, // [30:30] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_Common_proto_init() }
func file_Common_proto_init() {
	if File_Common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_Common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompoundIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniqueId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdSourceType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContextItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContextItemDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeScope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Point); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContextItemValueType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContextItemEnumItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DateContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GPCLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GpsSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoPoliticalContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Language); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lexicalization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelScope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelScopeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Presentation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetupDataPedigree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnitOfMeasure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnitOfMeasureDimension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Common_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnitOfMeasureAuthority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_Common_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_Common_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_Common_proto_msgTypes[3].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Common_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Common_proto_goTypes,
		DependencyIndexes: file_Common_proto_depIdxs,
		EnumInfos:         file_Common_proto_enumTypes,
		MessageInfos:      file_Common_proto_msgTypes,
	}.Build()
	File_Common_proto = out.File
	file_Common_proto_rawDesc = nil
	file_Common_proto_goTypes = nil
	file_Common_proto_depIdxs = nil
}
