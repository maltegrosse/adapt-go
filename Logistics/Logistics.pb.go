// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.19.6
// source: Logistics.proto

package Logistics

import (
	Common "github.com/maltegrosse/adapt-go/Common"
	Notes "github.com/maltegrosse/adapt-go/Notes"
	Representations "github.com/maltegrosse/adapt-go/Representations"
	Shapes "github.com/maltegrosse/adapt-go/Shapes"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ContactType_ContactTypeEnum int32

const (
	ContactType_FixedPhone  ContactType_ContactTypeEnum = 0
	ContactType_MobilePhone ContactType_ContactTypeEnum = 1
	ContactType_Fax         ContactType_ContactTypeEnum = 2
	ContactType_Email       ContactType_ContactTypeEnum = 3
)

// Enum value maps for ContactType_ContactTypeEnum.
var (
	ContactType_ContactTypeEnum_name = map[int32]string{
		0: "FixedPhone",
		1: "MobilePhone",
		2: "Fax",
		3: "Email",
	}
	ContactType_ContactTypeEnum_value = map[string]int32{
		"FixedPhone":  0,
		"MobilePhone": 1,
		"Fax":         2,
		"Email":       3,
	}
)

func (x ContactType_ContactTypeEnum) Enum() *ContactType_ContactTypeEnum {
	p := new(ContactType_ContactTypeEnum)
	*p = x
	return p
}

func (x ContactType_ContactTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContactType_ContactTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_Logistics_proto_enumTypes[0].Descriptor()
}

func (ContactType_ContactTypeEnum) Type() protoreflect.EnumType {
	return &file_Logistics_proto_enumTypes[0]
}

func (x ContactType_ContactTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContactType_ContactTypeEnum.Descriptor instead.
func (ContactType_ContactTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_Logistics_proto_rawDescGZIP(), []int{3, 0}
}

type GpsSourceType_GpsSourceTypeEnum int32

const (
	GpsSourceType_Unknown              GpsSourceType_GpsSourceTypeEnum = 0
	GpsSourceType_Drawn                GpsSourceType_GpsSourceTypeEnum = 1
	GpsSourceType_MobileGPS            GpsSourceType_GpsSourceTypeEnum = 2
	GpsSourceType_DeereRTK             GpsSourceType_GpsSourceTypeEnum = 3
	GpsSourceType_DeereRTKX            GpsSourceType_GpsSourceTypeEnum = 4
	GpsSourceType_DeereSF1             GpsSourceType_GpsSourceTypeEnum = 5
	GpsSourceType_DeereSF2             GpsSourceType_GpsSourceTypeEnum = 6
	GpsSourceType_DeereWAAS            GpsSourceType_GpsSourceTypeEnum = 7
	GpsSourceType_GNSSfix              GpsSourceType_GpsSourceTypeEnum = 8
	GpsSourceType_DGNSSfix             GpsSourceType_GpsSourceTypeEnum = 9
	GpsSourceType_PreciseGNSS          GpsSourceType_GpsSourceTypeEnum = 10
	GpsSourceType_RTKFixedInteger      GpsSourceType_GpsSourceTypeEnum = 11
	GpsSourceType_RTKFloat             GpsSourceType_GpsSourceTypeEnum = 12
	GpsSourceType_EstDRmode            GpsSourceType_GpsSourceTypeEnum = 13
	GpsSourceType_ManualInput          GpsSourceType_GpsSourceTypeEnum = 14
	GpsSourceType_SimulateMode         GpsSourceType_GpsSourceTypeEnum = 15
	GpsSourceType_DesktopGeneratedData GpsSourceType_GpsSourceTypeEnum = 16
	GpsSourceType_Other                GpsSourceType_GpsSourceTypeEnum = 17
	GpsSourceType_PPP                  GpsSourceType_GpsSourceTypeEnum = 18
	GpsSourceType_SBAS                 GpsSourceType_GpsSourceTypeEnum = 19
	GpsSourceType_Mechanical           GpsSourceType_GpsSourceTypeEnum = 20
)

// Enum value maps for GpsSourceType_GpsSourceTypeEnum.
var (
	GpsSourceType_GpsSourceTypeEnum_name = map[int32]string{
		0:  "Unknown",
		1:  "Drawn",
		2:  "MobileGPS",
		3:  "DeereRTK",
		4:  "DeereRTKX",
		5:  "DeereSF1",
		6:  "DeereSF2",
		7:  "DeereWAAS",
		8:  "GNSSfix",
		9:  "DGNSSfix",
		10: "PreciseGNSS",
		11: "RTKFixedInteger",
		12: "RTKFloat",
		13: "EstDRmode",
		14: "ManualInput",
		15: "SimulateMode",
		16: "DesktopGeneratedData",
		17: "Other",
		18: "PPP",
		19: "SBAS",
		20: "Mechanical",
	}
	GpsSourceType_GpsSourceTypeEnum_value = map[string]int32{
		"Unknown":              0,
		"Drawn":                1,
		"MobileGPS":            2,
		"DeereRTK":             3,
		"DeereRTKX":            4,
		"DeereSF1":             5,
		"DeereSF2":             6,
		"DeereWAAS":            7,
		"GNSSfix":              8,
		"DGNSSfix":             9,
		"PreciseGNSS":          10,
		"RTKFixedInteger":      11,
		"RTKFloat":             12,
		"EstDRmode":            13,
		"ManualInput":          14,
		"SimulateMode":         15,
		"DesktopGeneratedData": 16,
		"Other":                17,
		"PPP":                  18,
		"SBAS":                 19,
		"Mechanical":           20,
	}
)

func (x GpsSourceType_GpsSourceTypeEnum) Enum() *GpsSourceType_GpsSourceTypeEnum {
	p := new(GpsSourceType_GpsSourceTypeEnum)
	*p = x
	return p
}

func (x GpsSourceType_GpsSourceTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GpsSourceType_GpsSourceTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_Logistics_proto_enumTypes[1].Descriptor()
}

func (GpsSourceType_GpsSourceTypeEnum) Type() protoreflect.EnumType {
	return &file_Logistics_proto_enumTypes[1]
}

func (x GpsSourceType_GpsSourceTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GpsSourceType_GpsSourceTypeEnum.Descriptor instead.
func (GpsSourceType_GpsSourceTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_Logistics_proto_rawDescGZIP(), []int{11, 0}
}

type PlaceType_PlaceTypeEnum int32

const (
	PlaceType_Location      PlaceType_PlaceTypeEnum = 0 // This case produces a Place that is functionally equivalent to a PAIL / ISO 19112 Location.
	PlaceType_Facility      PlaceType_PlaceTypeEnum = 1
	PlaceType_DeviceElement PlaceType_PlaceTypeEnum = 2
	PlaceType_Container     PlaceType_PlaceTypeEnum = 3
	PlaceType_Farm          PlaceType_PlaceTypeEnum = 4
	PlaceType_Field         PlaceType_PlaceTypeEnum = 5
	PlaceType_CropZone      PlaceType_PlaceTypeEnum = 6
	PlaceType_Mixed         PlaceType_PlaceTypeEnum = 7 // Enables "adding what you know"; when there may be position, farm & field, for example.
)

// Enum value maps for PlaceType_PlaceTypeEnum.
var (
	PlaceType_PlaceTypeEnum_name = map[int32]string{
		0: "Location",
		1: "Facility",
		2: "DeviceElement",
		3: "Container",
		4: "Farm",
		5: "Field",
		6: "CropZone",
		7: "Mixed",
	}
	PlaceType_PlaceTypeEnum_value = map[string]int32{
		"Location":      0,
		"Facility":      1,
		"DeviceElement": 2,
		"Container":     3,
		"Farm":          4,
		"Field":         5,
		"CropZone":      6,
		"Mixed":         7,
	}
)

func (x PlaceType_PlaceTypeEnum) Enum() *PlaceType_PlaceTypeEnum {
	p := new(PlaceType_PlaceTypeEnum)
	*p = x
	return p
}

func (x PlaceType_PlaceTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlaceType_PlaceTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_Logistics_proto_enumTypes[2].Descriptor()
}

func (PlaceType_PlaceTypeEnum) Type() protoreflect.EnumType {
	return &file_Logistics_proto_enumTypes[2]
}

func (x PlaceType_PlaceTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlaceType_PlaceTypeEnum.Descriptor instead.
func (PlaceType_PlaceTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_Logistics_proto_rawDescGZIP(), []int{18, 0}
}

type Brand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *Common.CompoundIdentifier `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Description    string                     `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	ManufacturerId int64                      `protobuf:"varint,3,opt,name=ManufacturerId,proto3" json:"ManufacturerId,omitempty"`
	ContextItems   []*Common.ContextItem      `protobuf:"bytes,4,rep,name=ContextItems,proto3" json:"ContextItems,omitempty"`
}

func (x *Brand) Reset() {
	*x = Brand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Logistics_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Brand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Brand) ProtoMessage() {}

func (x *Brand) ProtoReflect() protoreflect.Message {
	mi := &file_Logistics_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Brand.ProtoReflect.Descriptor instead.
func (*Brand) Descriptor() ([]byte, []int) {
	return file_Logistics_proto_rawDescGZIP(), []int{0}
}

func (x *Brand) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Brand) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Brand) GetManufacturerId() int64 {
	if x != nil {
		return x.ManufacturerId
	}
	return 0
}

func (x *Brand) GetContextItems() []*Common.ContextItem {
	if x != nil {
		return x.ContextItems
	}
	return nil
}

type Company struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            *Common.CompoundIdentifier `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name          string                     `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	ContactInfoId int64                      `protobuf:"varint,3,opt,name=ContactInfoId,proto3" json:"ContactInfoId,omitempty"`
	ContextItems  []*Common.ContextItem      `protobuf:"bytes,4,rep,name=ContextItems,proto3" json:"ContextItems,omitempty"`
}

func (x *Company) Reset() {
	*x = Company{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Logistics_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Company) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Company) ProtoMessage() {}

func (x *Company) ProtoReflect() protoreflect.Message {
	mi := &file_Logistics_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Company.ProtoReflect.Descriptor instead.
func (*Company) Descriptor() ([]byte, []int) {
	return file_Logistics_proto_rawDescGZIP(), []int{1}
}

func (x *Company) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Company) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Company) GetContactInfoId() int64 {
	if x != nil {
		return x.ContactInfoId
	}
	return 0
}

func (x *Company) GetContextItems() []*Common.ContextItem {
	if x != nil {
		return x.ContextItems
	}
	return nil
}

type Contact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number string       `protobuf:"bytes,1,opt,name=Number,proto3" json:"Number,omitempty"`
	Type   *ContactType `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
}

func (x *Contact) Reset() {
	*x = Contact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Logistics_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contact) ProtoMessage() {}

func (x *Contact) ProtoReflect() protoreflect.Message {
	mi := &file_Logistics_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contact.ProtoReflect.Descriptor instead.
func (*Contact) Descriptor() ([]byte, []int) {
	return file_Logistics_proto_rawDescGZIP(), []int{2}
}

func (x *Contact) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *Contact) GetType() *ContactType {
	if x != nil {
		return x.Type
	}
	return nil
}

type ContactType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ContactType) Reset() {
	*x = ContactType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Logistics_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactType) ProtoMessage() {}

func (x *ContactType) ProtoReflect() protoreflect.Message {
	mi := &file_Logistics_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactType.ProtoReflect.Descriptor instead.
func (*ContactType) Descriptor() ([]byte, []int) {
	return file_Logistics_proto_rawDescGZIP(), []int{3}
}

type ContactInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              *Common.CompoundIdentifier `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	AddressLine1    string                     `protobuf:"bytes,2,opt,name=AddressLine1,proto3" json:"AddressLine1,omitempty"`
	AddressLine2    string                     `protobuf:"bytes,3,opt,name=AddressLine2,proto3" json:"AddressLine2,omitempty"`
	PoBoxNumber     string                     `protobuf:"bytes,4,opt,name=PoBoxNumber,proto3" json:"PoBoxNumber,omitempty"`
	PostalCode      string                     `protobuf:"bytes,5,opt,name=PostalCode,proto3" json:"PostalCode,omitempty"`
	City            string                     `protobuf:"bytes,6,opt,name=City,proto3" json:"City,omitempty"`
	StateOrProvince string                     `protobuf:"bytes,7,opt,name=StateOrProvince,proto3" json:"StateOrProvince,omitempty"`
	Country         string                     `protobuf:"bytes,8,opt,name=Country,proto3" json:"Country,omitempty"`
	CountryCode     string                     `protobuf:"bytes,9,opt,name=CountryCode,proto3" json:"CountryCode,omitempty"`
	Contacts        []*Contact                 `protobuf:"bytes,10,rep,name=Contacts,proto3" json:"Contacts,omitempty"`
	Location        *Common.Location           `protobuf:"bytes,11,opt,name=Location,proto3" json:"Location,omitempty"`
	ContextItems    []*Common.ContextItem      `protobuf:"bytes,12,rep,name=ContextItems,proto3" json:"ContextItems,omitempty"`
}

func (x *ContactInfo) Reset() {
	*x = ContactInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Logistics_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactInfo) ProtoMessage() {}

func (x *ContactInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Logistics_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactInfo.ProtoReflect.Descriptor instead.
func (*ContactInfo) Descriptor() ([]byte, []int) {
	return file_Logistics_proto_rawDescGZIP(), []int{4}
}

func (x *ContactInfo) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ContactInfo) GetAddressLine1() string {
	if x != nil {
		return x.AddressLine1
	}
	return ""
}

func (x *ContactInfo) GetAddressLine2() string {
	if x != nil {
		return x.AddressLine2
	}
	return ""
}

func (x *ContactInfo) GetPoBoxNumber() string {
	if x != nil {
		return x.PoBoxNumber
	}
	return ""
}

func (x *ContactInfo) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *ContactInfo) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *ContactInfo) GetStateOrProvince() string {
	if x != nil {
		return x.StateOrProvince
	}
	return ""
}

func (x *ContactInfo) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *ContactInfo) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *ContactInfo) GetContacts() []*Contact {
	if x != nil {
		return x.Contacts
	}
	return nil
}

func (x *ContactInfo) GetLocation() *Common.Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *ContactInfo) GetContextItems() []*Common.ContextItem {
	if x != nil {
		return x.ContextItems
	}
	return nil
}

type CropZone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               *Common.CompoundIdentifier                  `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	TimeScopes       []*Common.TimeScope                         `protobuf:"bytes,2,rep,name=TimeScopes,proto3" json:"TimeScopes,omitempty"`
	Description      string                                      `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	FieldId          int64                                       `protobuf:"varint,4,opt,name=FieldId,proto3" json:"FieldId,omitempty"`
	CropId           int64                                       `protobuf:"varint,5,opt,name=CropId,proto3" json:"CropId,omitempty"`
	Area             *Representations.NumericRepresentationValue `protobuf:"bytes,6,opt,name=Area,proto3" json:"Area,omitempty"`
	BoundingRegion   *Shapes.MultiPolygon                        `protobuf:"bytes,7,opt,name=BoundingRegion,proto3" json:"BoundingRegion,omitempty"`
	BoundarySource   *GpsSource                                  `protobuf:"bytes,8,opt,name=BoundarySource,proto3" json:"BoundarySource,omitempty"`
	Notes            []*Notes.Note                               `protobuf:"bytes,9,rep,name=Notes,proto3" json:"Notes,omitempty"`
	GuidanceGroupIds []int64                                     `protobuf:"varint,10,rep,packed,name=GuidanceGroupIds,proto3" json:"GuidanceGroupIds,omitempty"`
	ContextItems     []*Common.ContextItem                       `protobuf:"bytes,11,rep,name=ContextItems,proto3" json:"ContextItems,omitempty"`
}

func (x *CropZone) Reset() {
	*x = CropZone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Logistics_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CropZone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CropZone) ProtoMessage() {}

func (x *CropZone) ProtoReflect() protoreflect.Message {
	mi := &file_Logistics_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CropZone.ProtoReflect.Descriptor instead.
func (*CropZone) Descriptor() ([]byte, []int) {
	return file_Logistics_proto_rawDescGZIP(), []int{5}
}

func (x *CropZone) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CropZone) GetTimeScopes() []*Common.TimeScope {
	if x != nil {
		return x.TimeScopes
	}
	return nil
}

func (x *CropZone) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CropZone) GetFieldId() int64 {
	if x != nil {
		return x.FieldId
	}
	return 0
}

func (x *CropZone) GetCropId() int64 {
	if x != nil {
		return x.CropId
	}
	return 0
}

func (x *CropZone) GetArea() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.Area
	}
	return nil
}

func (x *CropZone) GetBoundingRegion() *Shapes.MultiPolygon {
	if x != nil {
		return x.BoundingRegion
	}
	return nil
}

func (x *CropZone) GetBoundarySource() *GpsSource {
	if x != nil {
		return x.BoundarySource
	}
	return nil
}

func (x *CropZone) GetNotes() []*Notes.Note {
	if x != nil {
		return x.Notes
	}
	return nil
}

func (x *CropZone) GetGuidanceGroupIds() []int64 {
	if x != nil {
		return x.GuidanceGroupIds
	}
	return nil
}

func (x *CropZone) GetContextItems() []*Common.ContextItem {
	if x != nil {
		return x.ContextItems
	}
	return nil
}

type Destination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *Common.CompoundIdentifier `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Description string                     `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	Location    *Common.Location           `protobuf:"bytes,3,opt,name=Location,proto3" json:"Location,omitempty"`
	FacilityId  int64                      `protobuf:"varint,4,opt,name=FacilityId,proto3" json:"FacilityId,omitempty"`
}

func (x *Destination) Reset() {
	*x = Destination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Logistics_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Destination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Destination) ProtoMessage() {}

func (x *Destination) ProtoReflect() protoreflect.Message {
	mi := &file_Logistics_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Destination.ProtoReflect.Descriptor instead.
func (*Destination) Descriptor() ([]byte, []int) {
	return file_Logistics_proto_rawDescGZIP(), []int{6}
}

func (x *Destination) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Destination) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Destination) GetLocation() *Common.Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Destination) GetFacilityId() int64 {
	if x != nil {
		return x.FacilityId
	}
	return 0
}

type Facility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               *Common.CompoundIdentifier       `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	CompanyId        int64                            `protobuf:"varint,2,opt,name=CompanyId,proto3" json:"CompanyId,omitempty"`
	Description      string                           `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	ContactInfo      *ContactInfo                     `protobuf:"bytes,4,opt,name=ContactInfo,proto3" json:"ContactInfo,omitempty"`
	FacilityType     *Representations.EnumeratedValue `protobuf:"bytes,5,opt,name=FacilityType,proto3" json:"FacilityType,omitempty"`
	ContextItems     []*Common.ContextItem            `protobuf:"bytes,6,rep,name=ContextItems,proto3" json:"ContextItems,omitempty"`
	ParentFacilityId int64                            `protobuf:"varint,7,opt,name=ParentFacilityId,proto3" json:"ParentFacilityId,omitempty"`
}

func (x *Facility) Reset() {
	*x = Facility{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Logistics_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Facility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Facility) ProtoMessage() {}

func (x *Facility) ProtoReflect() protoreflect.Message {
	mi := &file_Logistics_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Facility.ProtoReflect.Descriptor instead.
func (*Facility) Descriptor() ([]byte, []int) {
	return file_Logistics_proto_rawDescGZIP(), []int{7}
}

func (x *Facility) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Facility) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *Facility) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Facility) GetContactInfo() *ContactInfo {
	if x != nil {
		return x.ContactInfo
	}
	return nil
}

func (x *Facility) GetFacilityType() *Representations.EnumeratedValue {
	if x != nil {
		return x.FacilityType
	}
	return nil
}

func (x *Facility) GetContextItems() []*Common.ContextItem {
	if x != nil {
		return x.ContextItems
	}
	return nil
}

func (x *Facility) GetParentFacilityId() int64 {
	if x != nil {
		return x.ParentFacilityId
	}
	return 0
}

type Farm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           *Common.CompoundIdentifier `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Description  string                     `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	GrowerId     int64                      `protobuf:"varint,3,opt,name=GrowerId,proto3" json:"GrowerId,omitempty"`
	ContactInfo  *ContactInfo               `protobuf:"bytes,4,opt,name=ContactInfo,proto3" json:"ContactInfo,omitempty"`
	TimeScopes   []*Common.TimeScope        `protobuf:"bytes,5,rep,name=TimeScopes,proto3" json:"TimeScopes,omitempty"`
	ContextItems []*Common.ContextItem      `protobuf:"bytes,6,rep,name=ContextItems,proto3" json:"ContextItems,omitempty"`
}

func (x *Farm) Reset() {
	*x = Farm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Logistics_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Farm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Farm) ProtoMessage() {}

func (x *Farm) ProtoReflect() protoreflect.Message {
	mi := &file_Logistics_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Farm.ProtoReflect.Descriptor instead.
func (*Farm) Descriptor() ([]byte, []int) {
	return file_Logistics_proto_rawDescGZIP(), []int{8}
}

func (x *Farm) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Farm) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Farm) GetGrowerId() int64 {
	if x != nil {
		return x.GrowerId
	}
	return 0
}

func (x *Farm) GetContactInfo() *ContactInfo {
	if x != nil {
		return x.ContactInfo
	}
	return nil
}

func (x *Farm) GetTimeScopes() []*Common.TimeScope {
	if x != nil {
		return x.TimeScopes
	}
	return nil
}

func (x *Farm) GetContextItems() []*Common.ContextItem {
	if x != nil {
		return x.ContextItems
	}
	return nil
}

type Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               *Common.CompoundIdentifier                  `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Description      string                                      `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	FarmId           int64                                       `protobuf:"varint,3,opt,name=FarmId,proto3" json:"FarmId,omitempty"`
	Area             *Representations.NumericRepresentationValue `protobuf:"bytes,4,opt,name=Area,proto3" json:"Area,omitempty"`
	ActiveBoundaryId int64                                       `protobuf:"varint,5,opt,name=ActiveBoundaryId,proto3" json:"ActiveBoundaryId,omitempty"`
	ContextItems     []*Common.ContextItem                       `protobuf:"bytes,6,rep,name=ContextItems,proto3" json:"ContextItems,omitempty"`
	Slope            *Representations.NumericRepresentationValue `protobuf:"bytes,7,opt,name=Slope,proto3" json:"Slope,omitempty"`
	Aspect           *Representations.NumericRepresentationValue `protobuf:"bytes,8,opt,name=Aspect,proto3" json:"Aspect,omitempty"`
	SlopeLength      *Representations.NumericRepresentationValue `protobuf:"bytes,9,opt,name=SlopeLength,proto3" json:"SlopeLength,omitempty"`
	GuidanceGroupIds []int64                                     `protobuf:"varint,10,rep,name=GuidanceGroupIds,proto3" json:"GuidanceGroupIds,omitempty"`
	TimeScopes       []*Common.TimeScope                         `protobuf:"bytes,11,rep,name=TimeScopes,proto3" json:"TimeScopes,omitempty"`
	GrowerId         int64                                       `protobuf:"varint,12,opt,name=GrowerId,proto3" json:"GrowerId,omitempty"`
}

func (x *Field) Reset() {
	*x = Field{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Logistics_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Field) ProtoMessage() {}

func (x *Field) ProtoReflect() protoreflect.Message {
	mi := &file_Logistics_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Field.ProtoReflect.Descriptor instead.
func (*Field) Descriptor() ([]byte, []int) {
	return file_Logistics_proto_rawDescGZIP(), []int{9}
}

func (x *Field) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Field) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Field) GetFarmId() int64 {
	if x != nil {
		return x.FarmId
	}
	return 0
}

func (x *Field) GetArea() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.Area
	}
	return nil
}

func (x *Field) GetActiveBoundaryId() int64 {
	if x != nil {
		return x.ActiveBoundaryId
	}
	return 0
}

func (x *Field) GetContextItems() []*Common.ContextItem {
	if x != nil {
		return x.ContextItems
	}
	return nil
}

func (x *Field) GetSlope() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.Slope
	}
	return nil
}

func (x *Field) GetAspect() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.Aspect
	}
	return nil
}

func (x *Field) GetSlopeLength() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.SlopeLength
	}
	return nil
}

func (x *Field) GetGuidanceGroupIds() []int64 {
	if x != nil {
		return x.GuidanceGroupIds
	}
	return nil
}

func (x *Field) GetTimeScopes() []*Common.TimeScope {
	if x != nil {
		return x.TimeScopes
	}
	return nil
}

func (x *Field) GetGrowerId() int64 {
	if x != nil {
		return x.GrowerId
	}
	return 0
}

type GpsSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceType         *GpsSourceType                              `protobuf:"bytes,1,opt,name=SourceType,proto3" json:"SourceType,omitempty"`
	EstimatedPrecision *Representations.NumericRepresentationValue `protobuf:"bytes,2,opt,name=EstimatedPrecision,proto3" json:"EstimatedPrecision,omitempty"`
	HorizontalAccuracy *Representations.NumericRepresentationValue `protobuf:"bytes,3,opt,name=HorizontalAccuracy,proto3" json:"HorizontalAccuracy,omitempty"`
	VerticalAccuracy   *Representations.NumericRepresentationValue `protobuf:"bytes,4,opt,name=VerticalAccuracy,proto3" json:"VerticalAccuracy,omitempty"`
	NumberOfSatellites int64                                       `protobuf:"varint,5,opt,name=NumberOfSatellites,proto3" json:"NumberOfSatellites,omitempty"`
	GpsUtcTime         *timestamppb.Timestamp                      `protobuf:"bytes,6,opt,name=GpsUtcTime,proto3" json:"GpsUtcTime,omitempty"`
}

func (x *GpsSource) Reset() {
	*x = GpsSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Logistics_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GpsSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GpsSource) ProtoMessage() {}

func (x *GpsSource) ProtoReflect() protoreflect.Message {
	mi := &file_Logistics_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GpsSource.ProtoReflect.Descriptor instead.
func (*GpsSource) Descriptor() ([]byte, []int) {
	return file_Logistics_proto_rawDescGZIP(), []int{10}
}

func (x *GpsSource) GetSourceType() *GpsSourceType {
	if x != nil {
		return x.SourceType
	}
	return nil
}

func (x *GpsSource) GetEstimatedPrecision() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.EstimatedPrecision
	}
	return nil
}

func (x *GpsSource) GetHorizontalAccuracy() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.HorizontalAccuracy
	}
	return nil
}

func (x *GpsSource) GetVerticalAccuracy() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.VerticalAccuracy
	}
	return nil
}

func (x *GpsSource) GetNumberOfSatellites() int64 {
	if x != nil {
		return x.NumberOfSatellites
	}
	return 0
}

func (x *GpsSource) GetGpsUtcTime() *timestamppb.Timestamp {
	if x != nil {
		return x.GpsUtcTime
	}
	return nil
}

type GpsSourceType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GpsSourceType) Reset() {
	*x = GpsSourceType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Logistics_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GpsSourceType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GpsSourceType) ProtoMessage() {}

func (x *GpsSourceType) ProtoReflect() protoreflect.Message {
	mi := &file_Logistics_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GpsSourceType.ProtoReflect.Descriptor instead.
func (*GpsSourceType) Descriptor() ([]byte, []int) {
	return file_Logistics_proto_rawDescGZIP(), []int{11}
}

type Grower struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           *Common.CompoundIdentifier `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name         string                     `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	ContactInfo  *ContactInfo               `protobuf:"bytes,3,opt,name=ContactInfo,proto3" json:"ContactInfo,omitempty"`
	ContextItems []*Common.ContextItem      `protobuf:"bytes,4,rep,name=ContextItems,proto3" json:"ContextItems,omitempty"`
}

func (x *Grower) Reset() {
	*x = Grower{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Logistics_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Grower) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Grower) ProtoMessage() {}

func (x *Grower) ProtoReflect() protoreflect.Message {
	mi := &file_Logistics_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Grower.ProtoReflect.Descriptor instead.
func (*Grower) Descriptor() ([]byte, []int) {
	return file_Logistics_proto_rawDescGZIP(), []int{12}
}

func (x *Grower) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Grower) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Grower) GetContactInfo() *ContactInfo {
	if x != nil {
		return x.ContactInfo
	}
	return nil
}

func (x *Grower) GetContextItems() []*Common.ContextItem {
	if x != nil {
		return x.ContextItems
	}
	return nil
}

type Manufacturer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           *Common.CompoundIdentifier `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Description  string                     `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	ContextItems []*Common.ContextItem      `protobuf:"bytes,3,rep,name=ContextItems,proto3" json:"ContextItems,omitempty"`
}

func (x *Manufacturer) Reset() {
	*x = Manufacturer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Logistics_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Manufacturer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Manufacturer) ProtoMessage() {}

func (x *Manufacturer) ProtoReflect() protoreflect.Message {
	mi := &file_Logistics_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Manufacturer.ProtoReflect.Descriptor instead.
func (*Manufacturer) Descriptor() ([]byte, []int) {
	return file_Logistics_proto_rawDescGZIP(), []int{13}
}

func (x *Manufacturer) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Manufacturer) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Manufacturer) GetContextItems() []*Common.ContextItem {
	if x != nil {
		return x.ContextItems
	}
	return nil
}

type PermittedProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           *Common.CompoundIdentifier `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	TimeScopes   []*Common.TimeScope        `protobuf:"bytes,2,rep,name=TimeScopes,proto3" json:"TimeScopes,omitempty"`
	GrowerId     int64                      `protobuf:"varint,3,opt,name=GrowerId,proto3" json:"GrowerId,omitempty"`
	ProductId    int64                      `protobuf:"varint,4,opt,name=ProductId,proto3" json:"ProductId,omitempty"`
	ContextItems []*Common.ContextItem      `protobuf:"bytes,5,rep,name=ContextItems,proto3" json:"ContextItems,omitempty"`
}

func (x *PermittedProduct) Reset() {
	*x = PermittedProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Logistics_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermittedProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermittedProduct) ProtoMessage() {}

func (x *PermittedProduct) ProtoReflect() protoreflect.Message {
	mi := &file_Logistics_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermittedProduct.ProtoReflect.Descriptor instead.
func (*PermittedProduct) Descriptor() ([]byte, []int) {
	return file_Logistics_proto_rawDescGZIP(), []int{14}
}

func (x *PermittedProduct) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PermittedProduct) GetTimeScopes() []*Common.TimeScope {
	if x != nil {
		return x.TimeScopes
	}
	return nil
}

func (x *PermittedProduct) GetGrowerId() int64 {
	if x != nil {
		return x.GrowerId
	}
	return 0
}

func (x *PermittedProduct) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *PermittedProduct) GetContextItems() []*Common.ContextItem {
	if x != nil {
		return x.ContextItems
	}
	return nil
}

type Person struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            *Common.CompoundIdentifier `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	FirstName     string                     `protobuf:"bytes,2,opt,name=FirstName,proto3" json:"FirstName,omitempty"`
	MiddleName    string                     `protobuf:"bytes,3,opt,name=MiddleName,proto3" json:"MiddleName,omitempty"`
	LastName      string                     `protobuf:"bytes,4,opt,name=LastName,proto3" json:"LastName,omitempty"`
	CombinedName  string                     `protobuf:"bytes,5,opt,name=CombinedName,proto3" json:"CombinedName,omitempty"`
	ContactInfoId int64                      `protobuf:"varint,6,opt,name=ContactInfoId,proto3" json:"ContactInfoId,omitempty"`
	ContextItems  []*Common.ContextItem      `protobuf:"bytes,7,rep,name=ContextItems,proto3" json:"ContextItems,omitempty"`
}

func (x *Person) Reset() {
	*x = Person{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Logistics_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Person) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Person) ProtoMessage() {}

func (x *Person) ProtoReflect() protoreflect.Message {
	mi := &file_Logistics_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Person.ProtoReflect.Descriptor instead.
func (*Person) Descriptor() ([]byte, []int) {
	return file_Logistics_proto_rawDescGZIP(), []int{15}
}

func (x *Person) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Person) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *Person) GetMiddleName() string {
	if x != nil {
		return x.MiddleName
	}
	return ""
}

func (x *Person) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *Person) GetCombinedName() string {
	if x != nil {
		return x.CombinedName
	}
	return ""
}

func (x *Person) GetContactInfoId() int64 {
	if x != nil {
		return x.ContactInfoId
	}
	return 0
}

func (x *Person) GetContextItems() []*Common.ContextItem {
	if x != nil {
		return x.ContextItems
	}
	return nil
}

type PersonRole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         *Common.CompoundIdentifier       `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	PersonId   int64                            `protobuf:"varint,2,opt,name=PersonId,proto3" json:"PersonId,omitempty"`
	Role       *Representations.EnumeratedValue `protobuf:"bytes,3,opt,name=Role,proto3" json:"Role,omitempty"`
	GrowerId   int64                            `protobuf:"varint,4,opt,name=GrowerId,proto3" json:"GrowerId,omitempty"`
	TimeScopes []*Common.TimeScope              `protobuf:"bytes,5,rep,name=TimeScopes,proto3" json:"TimeScopes,omitempty"`
	CompanyId  int64                            `protobuf:"varint,6,opt,name=CompanyId,proto3" json:"CompanyId,omitempty"`
}

func (x *PersonRole) Reset() {
	*x = PersonRole{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Logistics_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonRole) ProtoMessage() {}

func (x *PersonRole) ProtoReflect() protoreflect.Message {
	mi := &file_Logistics_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonRole.ProtoReflect.Descriptor instead.
func (*PersonRole) Descriptor() ([]byte, []int) {
	return file_Logistics_proto_rawDescGZIP(), []int{16}
}

func (x *PersonRole) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PersonRole) GetPersonId() int64 {
	if x != nil {
		return x.PersonId
	}
	return 0
}

func (x *PersonRole) GetRole() *Representations.EnumeratedValue {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *PersonRole) GetGrowerId() int64 {
	if x != nil {
		return x.GrowerId
	}
	return 0
}

func (x *PersonRole) GetTimeScopes() []*Common.TimeScope {
	if x != nil {
		return x.TimeScopes
	}
	return nil
}

func (x *PersonRole) GetCompanyId() int64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

type Place struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              *Common.CompoundIdentifier `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Description     string                     `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	PlaceType       *PlaceType                 `protobuf:"bytes,3,opt,name=PlaceType,proto3" json:"PlaceType,omitempty"`
	DeviceElementId int64                      `protobuf:"varint,4,opt,name=DeviceElementId,proto3" json:"DeviceElementId,omitempty"` // Allows associating an observation or ProductContainerOperation to a DeviceElement
	ContainerId     int64                      `protobuf:"varint,5,opt,name=ContainerId,proto3" json:"ContainerId,omitempty"`         // Allows associating an observation or ProductContainerOperation to a Container
	FarmId          int64                      `protobuf:"varint,6,opt,name=FarmId,proto3" json:"FarmId,omitempty"`
	FieldId         int64                      `protobuf:"varint,7,opt,name=FieldId,proto3" json:"FieldId,omitempty"`
	CropZoneId      int64                      `protobuf:"varint,8,opt,name=CropZoneId,proto3" json:"CropZoneId,omitempty"`
	FacilityId      int64                      `protobuf:"varint,9,opt,name=FacilityId,proto3" json:"FacilityId,omitempty"`
	Location        *Common.Location           `protobuf:"bytes,10,opt,name=Location,proto3" json:"Location,omitempty"` // Enables using Locations by reference, like in PAIL and ISO 19112.
	ContextItems    []*Common.ContextItem      `protobuf:"bytes,11,rep,name=ContextItems,proto3" json:"ContextItems,omitempty"`
}

func (x *Place) Reset() {
	*x = Place{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Logistics_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Place) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Place) ProtoMessage() {}

func (x *Place) ProtoReflect() protoreflect.Message {
	mi := &file_Logistics_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Place.ProtoReflect.Descriptor instead.
func (*Place) Descriptor() ([]byte, []int) {
	return file_Logistics_proto_rawDescGZIP(), []int{17}
}

func (x *Place) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Place) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Place) GetPlaceType() *PlaceType {
	if x != nil {
		return x.PlaceType
	}
	return nil
}

func (x *Place) GetDeviceElementId() int64 {
	if x != nil {
		return x.DeviceElementId
	}
	return 0
}

func (x *Place) GetContainerId() int64 {
	if x != nil {
		return x.ContainerId
	}
	return 0
}

func (x *Place) GetFarmId() int64 {
	if x != nil {
		return x.FarmId
	}
	return 0
}

func (x *Place) GetFieldId() int64 {
	if x != nil {
		return x.FieldId
	}
	return 0
}

func (x *Place) GetCropZoneId() int64 {
	if x != nil {
		return x.CropZoneId
	}
	return 0
}

func (x *Place) GetFacilityId() int64 {
	if x != nil {
		return x.FacilityId
	}
	return 0
}

func (x *Place) GetLocation() *Common.Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Place) GetContextItems() []*Common.ContextItem {
	if x != nil {
		return x.ContextItems
	}
	return nil
}

type PlaceType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PlaceType) Reset() {
	*x = PlaceType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Logistics_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaceType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaceType) ProtoMessage() {}

func (x *PlaceType) ProtoReflect() protoreflect.Message {
	mi := &file_Logistics_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaceType.ProtoReflect.Descriptor instead.
func (*PlaceType) Descriptor() ([]byte, []int) {
	return file_Logistics_proto_rawDescGZIP(), []int{18}
}

var File_Logistics_proto protoreflect.FileDescriptor

var file_Logistics_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0f, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x1a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x15, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x53, 0x68, 0x61, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xc2, 0x01, 0x0a, 0x05, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x30, 0x0a,
	0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x41, 0x44, 0x41, 0x50,
	0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e,
	0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x4d, 0x61, 0x6e, 0x75, 0x66,
	0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xb4, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x64,
	0x12, 0x3d, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0x53, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x55, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x46, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x69, 0x78, 0x65, 0x64, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x61, 0x78, 0x10, 0x02,
	0x12, 0x09, 0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x10, 0x03, 0x22, 0xec, 0x03, 0x0a, 0x0b,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x31, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x65,
	0x31, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x65,
	0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x4c, 0x69, 0x6e, 0x65, 0x32, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6f, 0x42, 0x6f, 0x78, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x6f, 0x42, 0x6f,
	0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6f, 0x73,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x69, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x34, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x4c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x08, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x41, 0x44, 0x41, 0x50,
	0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0c, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xac, 0x04, 0x0a, 0x08, 0x43,
	0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0a, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x43, 0x72, 0x6f, 0x70, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x43, 0x72, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x04, 0x41, 0x72, 0x65, 0x61, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d,
	0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x41, 0x72, 0x65, 0x61, 0x12, 0x42, 0x0a,
	0x0e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x53, 0x68,
	0x61, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f,
	0x6e, 0x52, 0x0e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x12, 0x42, 0x0a, 0x0e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x41, 0x44, 0x41, 0x50,
	0x54, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x47, 0x70, 0x73, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x4e, 0x6f, 0x74,
	0x65, 0x73, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x2a,
	0x0a, 0x10, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x03, 0x52, 0x10, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e,
	0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xb5, 0x01, 0x0a, 0x0b, 0x44, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a,
	0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x22, 0xf3, 0x02, 0x0a, 0x08, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x30,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x41, 0x44, 0x41,
	0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75,
	0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3e, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x4c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x4a, 0x0a, 0x0c, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52,
	0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c,
	0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0c,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x63,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0xae, 0x02, 0x0a, 0x04, 0x46, 0x61, 0x72, 0x6d,
	0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x41,
	0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x47, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x3e, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x4c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x37, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x0a, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x93, 0x05, 0x0a, 0x05, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x02, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x61, 0x72, 0x6d, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x46, 0x61, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x45,
	0x0a, 0x04, 0x41, 0x72, 0x65, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41,
	0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x41, 0x72, 0x65, 0x61, 0x12, 0x2a, 0x0a, 0x10, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x49,
	0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x12, 0x47, 0x0a, 0x05, 0x53, 0x6c, 0x6f, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52,
	0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x53, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x41, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41, 0x50,
	0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x41, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x12, 0x53, 0x0a, 0x0b, 0x53, 0x6c, 0x6f, 0x70, 0x65, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41, 0x50,
	0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x53, 0x6c,
	0x6f, 0x70, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2e, 0x0a, 0x10, 0x47, 0x75, 0x69,
	0x64, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x03, 0x42, 0x02, 0x10, 0x00, 0x52, 0x10, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x47, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x64, 0x22, 0xdc,
	0x03, 0x0a, 0x09, 0x47, 0x70, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x0a,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x47, 0x70, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x61, 0x0a, 0x12,
	0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54,
	0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x45, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x61, 0x0a, 0x12, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x41, 0x63, 0x63,
	0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44,
	0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12,
	0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61,
	0x63, 0x79, 0x12, 0x5d, 0x0a, 0x10, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x63,
	0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41,
	0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x10, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63,
	0x79, 0x12, 0x2e, 0x0a, 0x12, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x53, 0x61, 0x74,
	0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65,
	0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x47, 0x70, 0x73, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x47, 0x70, 0x73, 0x55, 0x74, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xdd, 0x02,
	0x0a, 0x0d, 0x47, 0x70, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22,
	0xcb, 0x02, 0x0a, 0x11, 0x47, 0x70, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x72, 0x61, 0x77, 0x6e, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x47, 0x50, 0x53, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x44, 0x65, 0x65, 0x72, 0x65, 0x52, 0x54, 0x4b, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x65,
	0x65, 0x72, 0x65, 0x52, 0x54, 0x4b, 0x58, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x65, 0x65,
	0x72, 0x65, 0x53, 0x46, 0x31, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x65, 0x65, 0x72, 0x65,
	0x53, 0x46, 0x32, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x65, 0x65, 0x72, 0x65, 0x57, 0x41,
	0x41, 0x53, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x4e, 0x53, 0x53, 0x66, 0x69, 0x78, 0x10,
	0x08, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x47, 0x4e, 0x53, 0x53, 0x66, 0x69, 0x78, 0x10, 0x09, 0x12,
	0x0f, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x65, 0x47, 0x4e, 0x53, 0x53, 0x10, 0x0a,
	0x12, 0x13, 0x0a, 0x0f, 0x52, 0x54, 0x4b, 0x46, 0x69, 0x78, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x10, 0x0b, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x54, 0x4b, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x10, 0x0c, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x73, 0x74, 0x44, 0x52, 0x6d, 0x6f, 0x64, 0x65,
	0x10, 0x0d, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x10, 0x0e, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x10, 0x0f, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x10, 0x10, 0x12,
	0x09, 0x0a, 0x05, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x10, 0x11, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x50,
	0x50, 0x10, 0x12, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x42, 0x41, 0x53, 0x10, 0x13, 0x12, 0x0e, 0x0a,
	0x0a, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x10, 0x14, 0x22, 0xcd, 0x01,
	0x0a, 0x06, 0x47, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e,
	0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x4c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d,
	0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xa1, 0x01,
	0x0a, 0x0c, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x30,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x41, 0x44, 0x41,
	0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75,
	0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x22, 0xf6, 0x01, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x41,
	0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x47, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x9d, 0x02, 0x0a, 0x06, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x89, 0x02, 0x0a, 0x0a, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x52,
	0x6f, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x47, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x37, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x0a, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x22, 0xc6, 0x03, 0x0a, 0x05, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x41,
	0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x61,
	0x72, 0x6d, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x46, 0x61, 0x72, 0x6d,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x43, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x43, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x08,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3d, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0x88, 0x01, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x7b, 0x0a,
	0x0d, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0c,
	0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x02, 0x12, 0x0d, 0x0a,
	0x09, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04,
	0x46, 0x61, 0x72, 0x6d, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x10,
	0x05, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x10, 0x06, 0x12,
	0x09, 0x0a, 0x05, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x10, 0x07, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x61, 0x6c, 0x74, 0x65, 0x67, 0x72,
	0x6f, 0x73, 0x73, 0x65, 0x2f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x2d, 0x67, 0x6f, 0x2f, 0x4c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_Logistics_proto_rawDescOnce sync.Once
	file_Logistics_proto_rawDescData = file_Logistics_proto_rawDesc
)

func file_Logistics_proto_rawDescGZIP() []byte {
	file_Logistics_proto_rawDescOnce.Do(func() {
		file_Logistics_proto_rawDescData = protoimpl.X.CompressGZIP(file_Logistics_proto_rawDescData)
	})
	return file_Logistics_proto_rawDescData
}

var file_Logistics_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_Logistics_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_Logistics_proto_goTypes = []interface{}{
	(ContactType_ContactTypeEnum)(0),     // 0: ADAPT.Logistics.ContactType.ContactTypeEnum
	(GpsSourceType_GpsSourceTypeEnum)(0), // 1: ADAPT.Logistics.GpsSourceType.GpsSourceTypeEnum
	(PlaceType_PlaceTypeEnum)(0),         // 2: ADAPT.Logistics.PlaceType.PlaceTypeEnum
	(*Brand)(nil),                        // 3: ADAPT.Logistics.Brand
	(*Company)(nil),                      // 4: ADAPT.Logistics.Company
	(*Contact)(nil),                      // 5: ADAPT.Logistics.Contact
	(*ContactType)(nil),                  // 6: ADAPT.Logistics.ContactType
	(*ContactInfo)(nil),                  // 7: ADAPT.Logistics.ContactInfo
	(*CropZone)(nil),                     // 8: ADAPT.Logistics.CropZone
	(*Destination)(nil),                  // 9: ADAPT.Logistics.Destination
	(*Facility)(nil),                     // 10: ADAPT.Logistics.Facility
	(*Farm)(nil),                         // 11: ADAPT.Logistics.Farm
	(*Field)(nil),                        // 12: ADAPT.Logistics.Field
	(*GpsSource)(nil),                    // 13: ADAPT.Logistics.GpsSource
	(*GpsSourceType)(nil),                // 14: ADAPT.Logistics.GpsSourceType
	(*Grower)(nil),                       // 15: ADAPT.Logistics.Grower
	(*Manufacturer)(nil),                 // 16: ADAPT.Logistics.Manufacturer
	(*PermittedProduct)(nil),             // 17: ADAPT.Logistics.PermittedProduct
	(*Person)(nil),                       // 18: ADAPT.Logistics.Person
	(*PersonRole)(nil),                   // 19: ADAPT.Logistics.PersonRole
	(*Place)(nil),                        // 20: ADAPT.Logistics.Place
	(*PlaceType)(nil),                    // 21: ADAPT.Logistics.PlaceType
	(*Common.CompoundIdentifier)(nil),    // 22: ADAPT.Common.CompoundIdentifier
	(*Common.ContextItem)(nil),           // 23: ADAPT.Common.ContextItem
	(*Common.Location)(nil),              // 24: ADAPT.Common.Location
	(*Common.TimeScope)(nil),             // 25: ADAPT.Common.TimeScope
	(*Representations.NumericRepresentationValue)(nil), // 26: ADAPT.Representations.NumericRepresentationValue
	(*Shapes.MultiPolygon)(nil),                        // 27: ADAPT.Shapes.MultiPolygon
	(*Notes.Note)(nil),                                 // 28: ADAPT.Notes.Note
	(*Representations.EnumeratedValue)(nil),            // 29: ADAPT.Representations.EnumeratedValue
	(*timestamppb.Timestamp)(nil),                      // 30: google.protobuf.Timestamp
}
var file_Logistics_proto_depIdxs = []int32{
	22, // 0: ADAPT.Logistics.Brand.Id:type_name -> ADAPT.Common.CompoundIdentifier
	23, // 1: ADAPT.Logistics.Brand.ContextItems:type_name -> ADAPT.Common.ContextItem
	22, // 2: ADAPT.Logistics.Company.Id:type_name -> ADAPT.Common.CompoundIdentifier
	23, // 3: ADAPT.Logistics.Company.ContextItems:type_name -> ADAPT.Common.ContextItem
	6,  // 4: ADAPT.Logistics.Contact.Type:type_name -> ADAPT.Logistics.ContactType
	22, // 5: ADAPT.Logistics.ContactInfo.Id:type_name -> ADAPT.Common.CompoundIdentifier
	5,  // 6: ADAPT.Logistics.ContactInfo.Contacts:type_name -> ADAPT.Logistics.Contact
	24, // 7: ADAPT.Logistics.ContactInfo.Location:type_name -> ADAPT.Common.Location
	23, // 8: ADAPT.Logistics.ContactInfo.ContextItems:type_name -> ADAPT.Common.ContextItem
	22, // 9: ADAPT.Logistics.CropZone.Id:type_name -> ADAPT.Common.CompoundIdentifier
	25, // 10: ADAPT.Logistics.CropZone.TimeScopes:type_name -> ADAPT.Common.TimeScope
	26, // 11: ADAPT.Logistics.CropZone.Area:type_name -> ADAPT.Representations.NumericRepresentationValue
	27, // 12: ADAPT.Logistics.CropZone.BoundingRegion:type_name -> ADAPT.Shapes.MultiPolygon
	13, // 13: ADAPT.Logistics.CropZone.BoundarySource:type_name -> ADAPT.Logistics.GpsSource
	28, // 14: ADAPT.Logistics.CropZone.Notes:type_name -> ADAPT.Notes.Note
	23, // 15: ADAPT.Logistics.CropZone.ContextItems:type_name -> ADAPT.Common.ContextItem
	22, // 16: ADAPT.Logistics.Destination.Id:type_name -> ADAPT.Common.CompoundIdentifier
	24, // 17: ADAPT.Logistics.Destination.Location:type_name -> ADAPT.Common.Location
	22, // 18: ADAPT.Logistics.Facility.Id:type_name -> ADAPT.Common.CompoundIdentifier
	7,  // 19: ADAPT.Logistics.Facility.ContactInfo:type_name -> ADAPT.Logistics.ContactInfo
	29, // 20: ADAPT.Logistics.Facility.FacilityType:type_name -> ADAPT.Representations.EnumeratedValue
	23, // 21: ADAPT.Logistics.Facility.ContextItems:type_name -> ADAPT.Common.ContextItem
	22, // 22: ADAPT.Logistics.Farm.Id:type_name -> ADAPT.Common.CompoundIdentifier
	7,  // 23: ADAPT.Logistics.Farm.ContactInfo:type_name -> ADAPT.Logistics.ContactInfo
	25, // 24: ADAPT.Logistics.Farm.TimeScopes:type_name -> ADAPT.Common.TimeScope
	23, // 25: ADAPT.Logistics.Farm.ContextItems:type_name -> ADAPT.Common.ContextItem
	22, // 26: ADAPT.Logistics.Field.Id:type_name -> ADAPT.Common.CompoundIdentifier
	26, // 27: ADAPT.Logistics.Field.Area:type_name -> ADAPT.Representations.NumericRepresentationValue
	23, // 28: ADAPT.Logistics.Field.ContextItems:type_name -> ADAPT.Common.ContextItem
	26, // 29: ADAPT.Logistics.Field.Slope:type_name -> ADAPT.Representations.NumericRepresentationValue
	26, // 30: ADAPT.Logistics.Field.Aspect:type_name -> ADAPT.Representations.NumericRepresentationValue
	26, // 31: ADAPT.Logistics.Field.SlopeLength:type_name -> ADAPT.Representations.NumericRepresentationValue
	25, // 32: ADAPT.Logistics.Field.TimeScopes:type_name -> ADAPT.Common.TimeScope
	14, // 33: ADAPT.Logistics.GpsSource.SourceType:type_name -> ADAPT.Logistics.GpsSourceType
	26, // 34: ADAPT.Logistics.GpsSource.EstimatedPrecision:type_name -> ADAPT.Representations.NumericRepresentationValue
	26, // 35: ADAPT.Logistics.GpsSource.HorizontalAccuracy:type_name -> ADAPT.Representations.NumericRepresentationValue
	26, // 36: ADAPT.Logistics.GpsSource.VerticalAccuracy:type_name -> ADAPT.Representations.NumericRepresentationValue
	30, // 37: ADAPT.Logistics.GpsSource.GpsUtcTime:type_name -> google.protobuf.Timestamp
	22, // 38: ADAPT.Logistics.Grower.Id:type_name -> ADAPT.Common.CompoundIdentifier
	7,  // 39: ADAPT.Logistics.Grower.ContactInfo:type_name -> ADAPT.Logistics.ContactInfo
	23, // 40: ADAPT.Logistics.Grower.ContextItems:type_name -> ADAPT.Common.ContextItem
	22, // 41: ADAPT.Logistics.Manufacturer.Id:type_name -> ADAPT.Common.CompoundIdentifier
	23, // 42: ADAPT.Logistics.Manufacturer.ContextItems:type_name -> ADAPT.Common.ContextItem
	22, // 43: ADAPT.Logistics.PermittedProduct.Id:type_name -> ADAPT.Common.CompoundIdentifier
	25, // 44: ADAPT.Logistics.PermittedProduct.TimeScopes:type_name -> ADAPT.Common.TimeScope
	23, // 45: ADAPT.Logistics.PermittedProduct.ContextItems:type_name -> ADAPT.Common.ContextItem
	22, // 46: ADAPT.Logistics.Person.Id:type_name -> ADAPT.Common.CompoundIdentifier
	23, // 47: ADAPT.Logistics.Person.ContextItems:type_name -> ADAPT.Common.ContextItem
	22, // 48: ADAPT.Logistics.PersonRole.Id:type_name -> ADAPT.Common.CompoundIdentifier
	29, // 49: ADAPT.Logistics.PersonRole.Role:type_name -> ADAPT.Representations.EnumeratedValue
	25, // 50: ADAPT.Logistics.PersonRole.TimeScopes:type_name -> ADAPT.Common.TimeScope
	22, // 51: ADAPT.Logistics.Place.Id:type_name -> ADAPT.Common.CompoundIdentifier
	21, // 52: ADAPT.Logistics.Place.PlaceType:type_name -> ADAPT.Logistics.PlaceType
	24, // 53: ADAPT.Logistics.Place.Location:type_name -> ADAPT.Common.Location
	23, // 54: ADAPT.Logistics.Place.ContextItems:type_name -> ADAPT.Common.ContextItem
	55, // [55:55] is the sub-list for method output_type
	55, // [55:55] is the sub-list for method input_type
	55, // [55:55] is the sub-list for extension type_name
	55, // [55:55] is the sub-list for extension extendee
	0,  // [0:55] is the sub-list for field type_name
}

func init() { file_Logistics_proto_init() }
func file_Logistics_proto_init() {
	if File_Logistics_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_Logistics_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Brand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Logistics_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Company); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Logistics_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Logistics_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Logistics_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Logistics_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CropZone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Logistics_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Destination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Logistics_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Facility); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Logistics_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Farm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Logistics_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Field); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Logistics_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GpsSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Logistics_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GpsSourceType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Logistics_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Grower); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Logistics_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Manufacturer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Logistics_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermittedProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Logistics_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Person); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Logistics_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonRole); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Logistics_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Place); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Logistics_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaceType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Logistics_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Logistics_proto_goTypes,
		DependencyIndexes: file_Logistics_proto_depIdxs,
		EnumInfos:         file_Logistics_proto_enumTypes,
		MessageInfos:      file_Logistics_proto_msgTypes,
	}.Build()
	File_Logistics_proto = out.File
	file_Logistics_proto_rawDesc = nil
	file_Logistics_proto_goTypes = nil
	file_Logistics_proto_depIdxs = nil
}
