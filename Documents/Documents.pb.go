// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.19.6
// source: Documents.proto

package Documents

import (
	Common "github.com/maltegrosse/adapt-go/Common"
	Equipment "github.com/maltegrosse/adapt-go/Equipment"
	Notes "github.com/maltegrosse/adapt-go/Notes"
	Products "github.com/maltegrosse/adapt-go/Products"
	Representations "github.com/maltegrosse/adapt-go/Representations"
	Shapes "github.com/maltegrosse/adapt-go/Shapes"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DocRelationshipType_DocRelationshipTypeEnum int32

const (
	DocRelationshipType_Casual        DocRelationshipType_DocRelationshipTypeEnum = 0
	DocRelationshipType_Contextual    DocRelationshipType_DocRelationshipTypeEnum = 1
	DocRelationshipType_Compositional DocRelationshipType_DocRelationshipTypeEnum = 2
)

// Enum value maps for DocRelationshipType_DocRelationshipTypeEnum.
var (
	DocRelationshipType_DocRelationshipTypeEnum_name = map[int32]string{
		0: "Casual",
		1: "Contextual",
		2: "Compositional",
	}
	DocRelationshipType_DocRelationshipTypeEnum_value = map[string]int32{
		"Casual":        0,
		"Contextual":    1,
		"Compositional": 2,
	}
)

func (x DocRelationshipType_DocRelationshipTypeEnum) Enum() *DocRelationshipType_DocRelationshipTypeEnum {
	p := new(DocRelationshipType_DocRelationshipTypeEnum)
	*p = x
	return p
}

func (x DocRelationshipType_DocRelationshipTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DocRelationshipType_DocRelationshipTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_Documents_proto_enumTypes[0].Descriptor()
}

func (DocRelationshipType_DocRelationshipTypeEnum) Type() protoreflect.EnumType {
	return &file_Documents_proto_enumTypes[0]
}

func (x DocRelationshipType_DocRelationshipTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DocRelationshipType_DocRelationshipTypeEnum.Descriptor instead.
func (DocRelationshipType_DocRelationshipTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_Documents_proto_rawDescGZIP(), []int{1, 0}
}

type OMCodeComponentPart_OMCodeComponentPartEnum int32

const (
	OMCodeComponentPart_ComponentType OMCodeComponentPart_OMCodeComponentPartEnum = 0
	OMCodeComponentPart_Selector      OMCodeComponentPart_OMCodeComponentPartEnum = 1
	OMCodeComponentPart_Value         OMCodeComponentPart_OMCodeComponentPartEnum = 2
	OMCodeComponentPart_UoM           OMCodeComponentPart_OMCodeComponentPartEnum = 3
)

// Enum value maps for OMCodeComponentPart_OMCodeComponentPartEnum.
var (
	OMCodeComponentPart_OMCodeComponentPartEnum_name = map[int32]string{
		0: "ComponentType",
		1: "Selector",
		2: "Value",
		3: "UoM",
	}
	OMCodeComponentPart_OMCodeComponentPartEnum_value = map[string]int32{
		"ComponentType": 0,
		"Selector":      1,
		"Value":         2,
		"UoM":           3,
	}
)

func (x OMCodeComponentPart_OMCodeComponentPartEnum) Enum() *OMCodeComponentPart_OMCodeComponentPartEnum {
	p := new(OMCodeComponentPart_OMCodeComponentPartEnum)
	*p = x
	return p
}

func (x OMCodeComponentPart_OMCodeComponentPartEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OMCodeComponentPart_OMCodeComponentPartEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_Documents_proto_enumTypes[1].Descriptor()
}

func (OMCodeComponentPart_OMCodeComponentPartEnum) Type() protoreflect.EnumType {
	return &file_Documents_proto_enumTypes[1]
}

func (x OMCodeComponentPart_OMCodeComponentPartEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OMCodeComponentPart_OMCodeComponentPartEnum.Descriptor instead.
func (OMCodeComponentPart_OMCodeComponentPartEnum) EnumDescriptor() ([]byte, []int) {
	return file_Documents_proto_rawDescGZIP(), []int{11, 0}
}

type OMCodeComponentValueType_OMCodeComponentValueTypeEnum int32

const (
	OMCodeComponentValueType_Enum     OMCodeComponentValueType_OMCodeComponentValueTypeEnum = 0
	OMCodeComponentValueType_Bool     OMCodeComponentValueType_OMCodeComponentValueTypeEnum = 1
	OMCodeComponentValueType_String   OMCodeComponentValueType_OMCodeComponentValueTypeEnum = 2
	OMCodeComponentValueType_Double   OMCodeComponentValueType_OMCodeComponentValueTypeEnum = 3
	OMCodeComponentValueType_Integer  OMCodeComponentValueType_OMCodeComponentValueTypeEnum = 4
	OMCodeComponentValueType_DateTime OMCodeComponentValueType_OMCodeComponentValueTypeEnum = 5
)

// Enum value maps for OMCodeComponentValueType_OMCodeComponentValueTypeEnum.
var (
	OMCodeComponentValueType_OMCodeComponentValueTypeEnum_name = map[int32]string{
		0: "Enum",
		1: "Bool",
		2: "String",
		3: "Double",
		4: "Integer",
		5: "DateTime",
	}
	OMCodeComponentValueType_OMCodeComponentValueTypeEnum_value = map[string]int32{
		"Enum":     0,
		"Bool":     1,
		"String":   2,
		"Double":   3,
		"Integer":  4,
		"DateTime": 5,
	}
)

func (x OMCodeComponentValueType_OMCodeComponentValueTypeEnum) Enum() *OMCodeComponentValueType_OMCodeComponentValueTypeEnum {
	p := new(OMCodeComponentValueType_OMCodeComponentValueTypeEnum)
	*p = x
	return p
}

func (x OMCodeComponentValueType_OMCodeComponentValueTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OMCodeComponentValueType_OMCodeComponentValueTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_Documents_proto_enumTypes[2].Descriptor()
}

func (OMCodeComponentValueType_OMCodeComponentValueTypeEnum) Type() protoreflect.EnumType {
	return &file_Documents_proto_enumTypes[2]
}

func (x OMCodeComponentValueType_OMCodeComponentValueTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OMCodeComponentValueType_OMCodeComponentValueTypeEnum.Descriptor instead.
func (OMCodeComponentValueType_OMCodeComponentValueTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_Documents_proto_rawDescGZIP(), []int{12, 0}
}

type OMSemanticResourceLevel_OMSemanticResourceLevelEnum int32

const (
	OMSemanticResourceLevel_OMCode                OMSemanticResourceLevel_OMSemanticResourceLevelEnum = 0
	OMSemanticResourceLevel_OMCodeComponent       OMSemanticResourceLevel_OMSemanticResourceLevelEnum = 1
	OMSemanticResourceLevel_CodeComponentType     OMSemanticResourceLevel_OMSemanticResourceLevelEnum = 2
	OMSemanticResourceLevel_CodeComponentSelector OMSemanticResourceLevel_OMSemanticResourceLevelEnum = 3
	OMSemanticResourceLevel_CodeComponentValue    OMSemanticResourceLevel_OMSemanticResourceLevelEnum = 4
	OMSemanticResourceLevel_CodeComponentUoM      OMSemanticResourceLevel_OMSemanticResourceLevelEnum = 5
)

// Enum value maps for OMSemanticResourceLevel_OMSemanticResourceLevelEnum.
var (
	OMSemanticResourceLevel_OMSemanticResourceLevelEnum_name = map[int32]string{
		0: "OMCode",
		1: "OMCodeComponent",
		2: "CodeComponentType",
		3: "CodeComponentSelector",
		4: "CodeComponentValue",
		5: "CodeComponentUoM",
	}
	OMSemanticResourceLevel_OMSemanticResourceLevelEnum_value = map[string]int32{
		"OMCode":                0,
		"OMCodeComponent":       1,
		"CodeComponentType":     2,
		"CodeComponentSelector": 3,
		"CodeComponentValue":    4,
		"CodeComponentUoM":      5,
	}
)

func (x OMSemanticResourceLevel_OMSemanticResourceLevelEnum) Enum() *OMSemanticResourceLevel_OMSemanticResourceLevelEnum {
	p := new(OMSemanticResourceLevel_OMSemanticResourceLevelEnum)
	*p = x
	return p
}

func (x OMSemanticResourceLevel_OMSemanticResourceLevelEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OMSemanticResourceLevel_OMSemanticResourceLevelEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_Documents_proto_enumTypes[3].Descriptor()
}

func (OMSemanticResourceLevel_OMSemanticResourceLevelEnum) Type() protoreflect.EnumType {
	return &file_Documents_proto_enumTypes[3]
}

func (x OMSemanticResourceLevel_OMSemanticResourceLevelEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OMSemanticResourceLevel_OMSemanticResourceLevelEnum.Descriptor instead.
func (OMSemanticResourceLevel_OMSemanticResourceLevelEnum) EnumDescriptor() ([]byte, []int) {
	return file_Documents_proto_rawDescGZIP(), []int{13, 0}
}

type OMSemanticResourceStatus_OMSemanticResourceStatusEnum int32

const (
	OMSemanticResourceStatus_Active      OMSemanticResourceStatus_OMSemanticResourceStatusEnum = 0
	OMSemanticResourceStatus_Deprecated  OMSemanticResourceStatus_OMSemanticResourceStatusEnum = 1
	OMSemanticResourceStatus_Candidate   OMSemanticResourceStatus_OMSemanticResourceStatusEnum = 2
	OMSemanticResourceStatus_Proprietary OMSemanticResourceStatus_OMSemanticResourceStatusEnum = 3
)

// Enum value maps for OMSemanticResourceStatus_OMSemanticResourceStatusEnum.
var (
	OMSemanticResourceStatus_OMSemanticResourceStatusEnum_name = map[int32]string{
		0: "Active",
		1: "Deprecated",
		2: "Candidate",
		3: "Proprietary",
	}
	OMSemanticResourceStatus_OMSemanticResourceStatusEnum_value = map[string]int32{
		"Active":      0,
		"Deprecated":  1,
		"Candidate":   2,
		"Proprietary": 3,
	}
)

func (x OMSemanticResourceStatus_OMSemanticResourceStatusEnum) Enum() *OMSemanticResourceStatus_OMSemanticResourceStatusEnum {
	p := new(OMSemanticResourceStatus_OMSemanticResourceStatusEnum)
	*p = x
	return p
}

func (x OMSemanticResourceStatus_OMSemanticResourceStatusEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OMSemanticResourceStatus_OMSemanticResourceStatusEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_Documents_proto_enumTypes[4].Descriptor()
}

func (OMSemanticResourceStatus_OMSemanticResourceStatusEnum) Type() protoreflect.EnumType {
	return &file_Documents_proto_enumTypes[4]
}

func (x OMSemanticResourceStatus_OMSemanticResourceStatusEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OMSemanticResourceStatus_OMSemanticResourceStatusEnum.Descriptor instead.
func (OMSemanticResourceStatus_OMSemanticResourceStatusEnum) EnumDescriptor() ([]byte, []int) {
	return file_Documents_proto_rawDescGZIP(), []int{14, 0}
}

type WorkItemPriority_WorkItemPriorityEnum int32

const (
	WorkItemPriority_Immediately    WorkItemPriority_WorkItemPriorityEnum = 0
	WorkItemPriority_SoonAsPossible WorkItemPriority_WorkItemPriorityEnum = 1
	WorkItemPriority_High           WorkItemPriority_WorkItemPriorityEnum = 2
	WorkItemPriority_Medium         WorkItemPriority_WorkItemPriorityEnum = 3
	WorkItemPriority_Low            WorkItemPriority_WorkItemPriorityEnum = 4
)

// Enum value maps for WorkItemPriority_WorkItemPriorityEnum.
var (
	WorkItemPriority_WorkItemPriorityEnum_name = map[int32]string{
		0: "Immediately",
		1: "SoonAsPossible",
		2: "High",
		3: "Medium",
		4: "Low",
	}
	WorkItemPriority_WorkItemPriorityEnum_value = map[string]int32{
		"Immediately":    0,
		"SoonAsPossible": 1,
		"High":           2,
		"Medium":         3,
		"Low":            4,
	}
)

func (x WorkItemPriority_WorkItemPriorityEnum) Enum() *WorkItemPriority_WorkItemPriorityEnum {
	p := new(WorkItemPriority_WorkItemPriorityEnum)
	*p = x
	return p
}

func (x WorkItemPriority_WorkItemPriorityEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkItemPriority_WorkItemPriorityEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_Documents_proto_enumTypes[5].Descriptor()
}

func (WorkItemPriority_WorkItemPriorityEnum) Type() protoreflect.EnumType {
	return &file_Documents_proto_enumTypes[5]
}

func (x WorkItemPriority_WorkItemPriorityEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkItemPriority_WorkItemPriorityEnum.Descriptor instead.
func (WorkItemPriority_WorkItemPriorityEnum) EnumDescriptor() ([]byte, []int) {
	return file_Documents_proto_rawDescGZIP(), []int{27, 0}
}

type WorkStatus_WorkStatusEnum int32

const (
	WorkStatus_Scheduled          WorkStatus_WorkStatusEnum = 0
	WorkStatus_InProgress         WorkStatus_WorkStatusEnum = 1
	WorkStatus_Paused             WorkStatus_WorkStatusEnum = 2
	WorkStatus_PartiallyCompleted WorkStatus_WorkStatusEnum = 3
	WorkStatus_Completed          WorkStatus_WorkStatusEnum = 4
	WorkStatus_Cancelled          WorkStatus_WorkStatusEnum = 5
)

// Enum value maps for WorkStatus_WorkStatusEnum.
var (
	WorkStatus_WorkStatusEnum_name = map[int32]string{
		0: "Scheduled",
		1: "InProgress",
		2: "Paused",
		3: "PartiallyCompleted",
		4: "Completed",
		5: "Cancelled",
	}
	WorkStatus_WorkStatusEnum_value = map[string]int32{
		"Scheduled":          0,
		"InProgress":         1,
		"Paused":             2,
		"PartiallyCompleted": 3,
		"Completed":          4,
		"Cancelled":          5,
	}
)

func (x WorkStatus_WorkStatusEnum) Enum() *WorkStatus_WorkStatusEnum {
	p := new(WorkStatus_WorkStatusEnum)
	*p = x
	return p
}

func (x WorkStatus_WorkStatusEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkStatus_WorkStatusEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_Documents_proto_enumTypes[6].Descriptor()
}

func (WorkStatus_WorkStatusEnum) Type() protoreflect.EnumType {
	return &file_Documents_proto_enumTypes[6]
}

func (x WorkStatus_WorkStatusEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkStatus_WorkStatusEnum.Descriptor instead.
func (WorkStatus_WorkStatusEnum) EnumDescriptor() ([]byte, []int) {
	return file_Documents_proto_rawDescGZIP(), []int{31, 0}
}

type Document struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            *Common.CompoundIdentifier                  `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	ContextItems  []*Common.ContextItem                       `protobuf:"bytes,2,rep,name=ContextItems,proto3" json:"ContextItems,omitempty"`
	CropIds       []int64                                     `protobuf:"varint,3,rep,packed,name=CropIds,proto3" json:"CropIds,omitempty"`
	CropZoneIds   []int64                                     `protobuf:"varint,4,rep,packed,name=CropZoneIds,proto3" json:"CropZoneIds,omitempty"`
	Description   string                                      `protobuf:"bytes,5,opt,name=Description,proto3" json:"Description,omitempty"`
	EstimatedArea *Representations.NumericRepresentationValue `protobuf:"bytes,6,opt,name=EstimatedArea,proto3" json:"EstimatedArea,omitempty"`
	FarmIds       []int64                                     `protobuf:"varint,7,rep,packed,name=FarmIds,proto3" json:"FarmIds,omitempty"`
	FieldIds      []int64                                     `protobuf:"varint,8,rep,packed,name=FieldIds,proto3" json:"FieldIds,omitempty"`
	GrowerId      int64                                       `protobuf:"varint,9,opt,name=GrowerId,proto3" json:"GrowerId,omitempty"`
	Notes         []*Notes.Note                               `protobuf:"bytes,10,rep,name=Notes,proto3" json:"Notes,omitempty"`
	PersonRoleIds []int64                                     `protobuf:"varint,11,rep,packed,name=PersonRoleIds,proto3" json:"PersonRoleIds,omitempty"`
	TimeScopes    []*Common.TimeScope                         `protobuf:"bytes,12,rep,name=TimeScopes,proto3" json:"TimeScopes,omitempty"`
	Version       int64                                       `protobuf:"varint,15,opt,name=Version,proto3" json:"Version,omitempty"`
	// Types that are assignable to Subtype:
	//
	//	*Document_Plan
	//	*Document_Recommendation
	//	*Document_WorkOrder
	//	*Document_WorkRecord
	//	*Document_Observations
	Subtype isDocument_Subtype `protobuf_oneof:"subtype"`
}

func (x *Document) Reset() {
	*x = Document{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Documents_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Document) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Document) ProtoMessage() {}

func (x *Document) ProtoReflect() protoreflect.Message {
	mi := &file_Documents_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Document.ProtoReflect.Descriptor instead.
func (*Document) Descriptor() ([]byte, []int) {
	return file_Documents_proto_rawDescGZIP(), []int{0}
}

func (x *Document) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Document) GetContextItems() []*Common.ContextItem {
	if x != nil {
		return x.ContextItems
	}
	return nil
}

func (x *Document) GetCropIds() []int64 {
	if x != nil {
		return x.CropIds
	}
	return nil
}

func (x *Document) GetCropZoneIds() []int64 {
	if x != nil {
		return x.CropZoneIds
	}
	return nil
}

func (x *Document) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Document) GetEstimatedArea() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.EstimatedArea
	}
	return nil
}

func (x *Document) GetFarmIds() []int64 {
	if x != nil {
		return x.FarmIds
	}
	return nil
}

func (x *Document) GetFieldIds() []int64 {
	if x != nil {
		return x.FieldIds
	}
	return nil
}

func (x *Document) GetGrowerId() int64 {
	if x != nil {
		return x.GrowerId
	}
	return 0
}

func (x *Document) GetNotes() []*Notes.Note {
	if x != nil {
		return x.Notes
	}
	return nil
}

func (x *Document) GetPersonRoleIds() []int64 {
	if x != nil {
		return x.PersonRoleIds
	}
	return nil
}

func (x *Document) GetTimeScopes() []*Common.TimeScope {
	if x != nil {
		return x.TimeScopes
	}
	return nil
}

func (x *Document) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (m *Document) GetSubtype() isDocument_Subtype {
	if m != nil {
		return m.Subtype
	}
	return nil
}

func (x *Document) GetPlan() *Plan {
	if x, ok := x.GetSubtype().(*Document_Plan); ok {
		return x.Plan
	}
	return nil
}

func (x *Document) GetRecommendation() *Recommendation {
	if x, ok := x.GetSubtype().(*Document_Recommendation); ok {
		return x.Recommendation
	}
	return nil
}

func (x *Document) GetWorkOrder() *WorkOrder {
	if x, ok := x.GetSubtype().(*Document_WorkOrder); ok {
		return x.WorkOrder
	}
	return nil
}

func (x *Document) GetWorkRecord() *WorkRecord {
	if x, ok := x.GetSubtype().(*Document_WorkRecord); ok {
		return x.WorkRecord
	}
	return nil
}

func (x *Document) GetObservations() *Observations {
	if x, ok := x.GetSubtype().(*Document_Observations); ok {
		return x.Observations
	}
	return nil
}

type isDocument_Subtype interface {
	isDocument_Subtype()
}

type Document_Plan struct {
	Plan *Plan `protobuf:"bytes,101,opt,name=Plan,proto3,oneof"`
}

type Document_Recommendation struct {
	Recommendation *Recommendation `protobuf:"bytes,102,opt,name=Recommendation,proto3,oneof"`
}

type Document_WorkOrder struct {
	WorkOrder *WorkOrder `protobuf:"bytes,103,opt,name=WorkOrder,proto3,oneof"`
}

type Document_WorkRecord struct {
	WorkRecord *WorkRecord `protobuf:"bytes,104,opt,name=WorkRecord,proto3,oneof"`
}

type Document_Observations struct {
	Observations *Observations `protobuf:"bytes,105,opt,name=Observations,proto3,oneof"`
}

func (*Document_Plan) isDocument_Subtype() {}

func (*Document_Recommendation) isDocument_Subtype() {}

func (*Document_WorkOrder) isDocument_Subtype() {}

func (*Document_WorkRecord) isDocument_Subtype() {}

func (*Document_Observations) isDocument_Subtype() {}

type DocRelationshipType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DocRelationshipType) Reset() {
	*x = DocRelationshipType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Documents_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocRelationshipType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocRelationshipType) ProtoMessage() {}

func (x *DocRelationshipType) ProtoReflect() protoreflect.Message {
	mi := &file_Documents_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocRelationshipType.ProtoReflect.Descriptor instead.
func (*DocRelationshipType) Descriptor() ([]byte, []int) {
	return file_Documents_proto_rawDescGZIP(), []int{1}
}

type DocumentCorrelation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    *Common.CompoundIdentifier `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	RelationshipType      *DocRelationshipType       `protobuf:"bytes,2,opt,name=RelationshipType,proto3" json:"RelationshipType,omitempty"`
	DocumentId            int64                      `protobuf:"varint,3,opt,name=DocumentId,proto3" json:"DocumentId,omitempty"`
	OriginatingDocumentId int64                      `protobuf:"varint,4,opt,name=OriginatingDocumentId,proto3" json:"OriginatingDocumentId,omitempty"`
	TimeScopes            []*Common.TimeScope        `protobuf:"bytes,5,rep,name=TimeScopes,proto3" json:"TimeScopes,omitempty"`
	PersonRoleIds         []int64                    `protobuf:"varint,6,rep,packed,name=PersonRoleIds,proto3" json:"PersonRoleIds,omitempty"`
}

func (x *DocumentCorrelation) Reset() {
	*x = DocumentCorrelation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Documents_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentCorrelation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentCorrelation) ProtoMessage() {}

func (x *DocumentCorrelation) ProtoReflect() protoreflect.Message {
	mi := &file_Documents_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentCorrelation.ProtoReflect.Descriptor instead.
func (*DocumentCorrelation) Descriptor() ([]byte, []int) {
	return file_Documents_proto_rawDescGZIP(), []int{2}
}

func (x *DocumentCorrelation) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DocumentCorrelation) GetRelationshipType() *DocRelationshipType {
	if x != nil {
		return x.RelationshipType
	}
	return nil
}

func (x *DocumentCorrelation) GetDocumentId() int64 {
	if x != nil {
		return x.DocumentId
	}
	return 0
}

func (x *DocumentCorrelation) GetOriginatingDocumentId() int64 {
	if x != nil {
		return x.OriginatingDocumentId
	}
	return 0
}

func (x *DocumentCorrelation) GetTimeScopes() []*Common.TimeScope {
	if x != nil {
		return x.TimeScopes
	}
	return nil
}

func (x *DocumentCorrelation) GetPersonRoleIds() []int64 {
	if x != nil {
		return x.PersonRoleIds
	}
	return nil
}

type IrrCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  *Common.CompoundIdentifier                  `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	TimeScopes          []*Common.TimeScope                         `protobuf:"bytes,2,rep,name=TimeScopes,proto3" json:"TimeScopes,omitempty"`
	SpatialScope        *IrrSpatialScope                            `protobuf:"bytes,3,opt,name=SpatialScope,proto3" json:"SpatialScope,omitempty"`
	FlowTags            []*Equipment.IrrFlowTag                     `protobuf:"bytes,4,rep,name=FlowTags,proto3" json:"FlowTags,omitempty"`
	RotCtr              *Shapes.Point                               `protobuf:"bytes,5,opt,name=RotCtr,proto3" json:"RotCtr,omitempty"`
	IrrItems            []*IrrItem                                  `protobuf:"bytes,6,rep,name=IrrItems,proto3" json:"IrrItems,omitempty"`
	Pressure            *Representations.NumericRepresentationValue `protobuf:"bytes,7,opt,name=Pressure,proto3" json:"Pressure,omitempty"`
	EstimatedEfficiency *Representations.NumericRepresentationValue `protobuf:"bytes,8,opt,name=EstimatedEfficiency,proto3" json:"EstimatedEfficiency,omitempty"`
}

func (x *IrrCollection) Reset() {
	*x = IrrCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Documents_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrrCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrrCollection) ProtoMessage() {}

func (x *IrrCollection) ProtoReflect() protoreflect.Message {
	mi := &file_Documents_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrrCollection.ProtoReflect.Descriptor instead.
func (*IrrCollection) Descriptor() ([]byte, []int) {
	return file_Documents_proto_rawDescGZIP(), []int{3}
}

func (x *IrrCollection) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *IrrCollection) GetTimeScopes() []*Common.TimeScope {
	if x != nil {
		return x.TimeScopes
	}
	return nil
}

func (x *IrrCollection) GetSpatialScope() *IrrSpatialScope {
	if x != nil {
		return x.SpatialScope
	}
	return nil
}

func (x *IrrCollection) GetFlowTags() []*Equipment.IrrFlowTag {
	if x != nil {
		return x.FlowTags
	}
	return nil
}

func (x *IrrCollection) GetRotCtr() *Shapes.Point {
	if x != nil {
		return x.RotCtr
	}
	return nil
}

func (x *IrrCollection) GetIrrItems() []*IrrItem {
	if x != nil {
		return x.IrrItems
	}
	return nil
}

func (x *IrrCollection) GetPressure() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.Pressure
	}
	return nil
}

func (x *IrrCollection) GetEstimatedEfficiency() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.EstimatedEfficiency
	}
	return nil
}

type IrrItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeScopes          []*Common.TimeScope                         `protobuf:"bytes,1,rep,name=TimeScopes,proto3" json:"TimeScopes,omitempty"`
	SpatialScope        *IrrSpatialScope                            `protobuf:"bytes,2,opt,name=SpatialScope,proto3" json:"SpatialScope,omitempty"`
	FlowTags            []*Equipment.IrrFlowTag                     `protobuf:"bytes,3,rep,name=FlowTags,proto3" json:"FlowTags,omitempty"`
	RotCtr              *Shapes.Point                               `protobuf:"bytes,4,opt,name=RotCtr,proto3" json:"RotCtr,omitempty"`
	SectionFlows        []*IrrSectionFlow                           `protobuf:"bytes,5,rep,name=SectionFlows,proto3" json:"SectionFlows,omitempty"`
	Pressure            *Representations.NumericRepresentationValue `protobuf:"bytes,6,opt,name=Pressure,proto3" json:"Pressure,omitempty"`
	ErrorCode           *Equipment.IrrErrorCode                     `protobuf:"bytes,7,opt,name=ErrorCode,proto3" json:"ErrorCode,omitempty"`
	EstimatedEfficiency *Representations.NumericRepresentationValue `protobuf:"bytes,8,opt,name=EstimatedEfficiency,proto3" json:"EstimatedEfficiency,omitempty"`
}

func (x *IrrItem) Reset() {
	*x = IrrItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Documents_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrrItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrrItem) ProtoMessage() {}

func (x *IrrItem) ProtoReflect() protoreflect.Message {
	mi := &file_Documents_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrrItem.ProtoReflect.Descriptor instead.
func (*IrrItem) Descriptor() ([]byte, []int) {
	return file_Documents_proto_rawDescGZIP(), []int{4}
}

func (x *IrrItem) GetTimeScopes() []*Common.TimeScope {
	if x != nil {
		return x.TimeScopes
	}
	return nil
}

func (x *IrrItem) GetSpatialScope() *IrrSpatialScope {
	if x != nil {
		return x.SpatialScope
	}
	return nil
}

func (x *IrrItem) GetFlowTags() []*Equipment.IrrFlowTag {
	if x != nil {
		return x.FlowTags
	}
	return nil
}

func (x *IrrItem) GetRotCtr() *Shapes.Point {
	if x != nil {
		return x.RotCtr
	}
	return nil
}

func (x *IrrItem) GetSectionFlows() []*IrrSectionFlow {
	if x != nil {
		return x.SectionFlows
	}
	return nil
}

func (x *IrrItem) GetPressure() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.Pressure
	}
	return nil
}

func (x *IrrItem) GetErrorCode() *Equipment.IrrErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return nil
}

func (x *IrrItem) GetEstimatedEfficiency() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.EstimatedEfficiency
	}
	return nil
}

type IrrRadialSpatialScope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartAngle *Representations.NumericRepresentationValue `protobuf:"bytes,1,opt,name=StartAngle,proto3" json:"StartAngle,omitempty"`
	EndAngle   *Representations.NumericRepresentationValue `protobuf:"bytes,2,opt,name=EndAngle,proto3" json:"EndAngle,omitempty"`
}

func (x *IrrRadialSpatialScope) Reset() {
	*x = IrrRadialSpatialScope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Documents_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrrRadialSpatialScope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrrRadialSpatialScope) ProtoMessage() {}

func (x *IrrRadialSpatialScope) ProtoReflect() protoreflect.Message {
	mi := &file_Documents_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrrRadialSpatialScope.ProtoReflect.Descriptor instead.
func (*IrrRadialSpatialScope) Descriptor() ([]byte, []int) {
	return file_Documents_proto_rawDescGZIP(), []int{5}
}

func (x *IrrRadialSpatialScope) GetStartAngle() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.StartAngle
	}
	return nil
}

func (x *IrrRadialSpatialScope) GetEndAngle() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.EndAngle
	}
	return nil
}

type IrrRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                         *Common.CompoundIdentifier                  `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	WorkRecordId               int64                                       `protobuf:"varint,2,opt,name=WorkRecordId,proto3" json:"WorkRecordId,omitempty"`
	TimeScopes                 []*Common.TimeScope                         `protobuf:"bytes,3,rep,name=TimeScopes,proto3" json:"TimeScopes,omitempty"`
	PersonRoleIds              []int64                                     `protobuf:"varint,4,rep,packed,name=PersonRoleIds,proto3" json:"PersonRoleIds,omitempty"`
	WorkItemIds                []int64                                     `protobuf:"varint,5,rep,packed,name=WorkItemIds,proto3" json:"WorkItemIds,omitempty"`
	GrowerId                   int64                                       `protobuf:"varint,6,opt,name=GrowerId,proto3" json:"GrowerId,omitempty"`
	FarmId                     int64                                       `protobuf:"varint,7,opt,name=FarmId,proto3" json:"FarmId,omitempty"`
	FieldId                    int64                                       `protobuf:"varint,8,opt,name=FieldId,proto3" json:"FieldId,omitempty"`
	CropZoneId                 int64                                       `protobuf:"varint,9,opt,name=CropZoneId,proto3" json:"CropZoneId,omitempty"`
	SpatialScope               *IrrSpatialScope                            `protobuf:"bytes,10,opt,name=SpatialScope,proto3" json:"SpatialScope,omitempty"`
	TotalArea                  *Representations.NumericRepresentationValue `protobuf:"bytes,11,opt,name=TotalArea,proto3" json:"TotalArea,omitempty"`
	TotalWaterVolume           *Representations.NumericRepresentationValue `protobuf:"bytes,12,opt,name=TotalWaterVolume,proto3" json:"TotalWaterVolume,omitempty"`
	ProductUseSummaries        []*Products.ProductUse                      `protobuf:"bytes,13,rep,name=ProductUseSummaries,proto3" json:"ProductUseSummaries,omitempty"`
	IrrSystemConfigurationIds  []int64                                     `protobuf:"varint,14,rep,packed,name=IrrSystemConfigurationIds,proto3" json:"IrrSystemConfigurationIds,omitempty"`
	IrrSectionConfigurationIds []int64                                     `protobuf:"varint,15,rep,packed,name=IrrSectionConfigurationIds,proto3" json:"IrrSectionConfigurationIds,omitempty"`
	IrrCollectionIds           []int64                                     `protobuf:"varint,16,rep,packed,name=IrrCollectionIds,proto3" json:"IrrCollectionIds,omitempty"`
	Notes                      []*Notes.Note                               `protobuf:"bytes,17,rep,name=Notes,proto3" json:"Notes,omitempty"`
	ContextItems               []*Common.ContextItem                       `protobuf:"bytes,18,rep,name=ContextItems,proto3" json:"ContextItems,omitempty"`
}

func (x *IrrRecord) Reset() {
	*x = IrrRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Documents_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrrRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrrRecord) ProtoMessage() {}

func (x *IrrRecord) ProtoReflect() protoreflect.Message {
	mi := &file_Documents_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrrRecord.ProtoReflect.Descriptor instead.
func (*IrrRecord) Descriptor() ([]byte, []int) {
	return file_Documents_proto_rawDescGZIP(), []int{6}
}

func (x *IrrRecord) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *IrrRecord) GetWorkRecordId() int64 {
	if x != nil {
		return x.WorkRecordId
	}
	return 0
}

func (x *IrrRecord) GetTimeScopes() []*Common.TimeScope {
	if x != nil {
		return x.TimeScopes
	}
	return nil
}

func (x *IrrRecord) GetPersonRoleIds() []int64 {
	if x != nil {
		return x.PersonRoleIds
	}
	return nil
}

func (x *IrrRecord) GetWorkItemIds() []int64 {
	if x != nil {
		return x.WorkItemIds
	}
	return nil
}

func (x *IrrRecord) GetGrowerId() int64 {
	if x != nil {
		return x.GrowerId
	}
	return 0
}

func (x *IrrRecord) GetFarmId() int64 {
	if x != nil {
		return x.FarmId
	}
	return 0
}

func (x *IrrRecord) GetFieldId() int64 {
	if x != nil {
		return x.FieldId
	}
	return 0
}

func (x *IrrRecord) GetCropZoneId() int64 {
	if x != nil {
		return x.CropZoneId
	}
	return 0
}

func (x *IrrRecord) GetSpatialScope() *IrrSpatialScope {
	if x != nil {
		return x.SpatialScope
	}
	return nil
}

func (x *IrrRecord) GetTotalArea() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.TotalArea
	}
	return nil
}

func (x *IrrRecord) GetTotalWaterVolume() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.TotalWaterVolume
	}
	return nil
}

func (x *IrrRecord) GetProductUseSummaries() []*Products.ProductUse {
	if x != nil {
		return x.ProductUseSummaries
	}
	return nil
}

func (x *IrrRecord) GetIrrSystemConfigurationIds() []int64 {
	if x != nil {
		return x.IrrSystemConfigurationIds
	}
	return nil
}

func (x *IrrRecord) GetIrrSectionConfigurationIds() []int64 {
	if x != nil {
		return x.IrrSectionConfigurationIds
	}
	return nil
}

func (x *IrrRecord) GetIrrCollectionIds() []int64 {
	if x != nil {
		return x.IrrCollectionIds
	}
	return nil
}

func (x *IrrRecord) GetNotes() []*Notes.Note {
	if x != nil {
		return x.Notes
	}
	return nil
}

func (x *IrrRecord) GetContextItems() []*Common.ContextItem {
	if x != nil {
		return x.ContextItems
	}
	return nil
}

type IrrSectionFlow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SectionId       int64                                       `protobuf:"varint,1,opt,name=SectionId,proto3" json:"SectionId,omitempty"`
	Volume          *Representations.NumericRepresentationValue `protobuf:"bytes,2,opt,name=Volume,proto3" json:"Volume,omitempty"`
	Depth           *Representations.NumericRepresentationValue `protobuf:"bytes,3,opt,name=Depth,proto3" json:"Depth,omitempty"`
	ProductUses     []*Products.ProductUse                      `protobuf:"bytes,4,rep,name=ProductUses,proto3" json:"ProductUses,omitempty"`
	PolygonCoverage *Shapes.MultiPolygon                        `protobuf:"bytes,5,opt,name=PolygonCoverage,proto3" json:"PolygonCoverage,omitempty"`
}

func (x *IrrSectionFlow) Reset() {
	*x = IrrSectionFlow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Documents_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrrSectionFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrrSectionFlow) ProtoMessage() {}

func (x *IrrSectionFlow) ProtoReflect() protoreflect.Message {
	mi := &file_Documents_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrrSectionFlow.ProtoReflect.Descriptor instead.
func (*IrrSectionFlow) Descriptor() ([]byte, []int) {
	return file_Documents_proto_rawDescGZIP(), []int{7}
}

func (x *IrrSectionFlow) GetSectionId() int64 {
	if x != nil {
		return x.SectionId
	}
	return 0
}

func (x *IrrSectionFlow) GetVolume() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.Volume
	}
	return nil
}

func (x *IrrSectionFlow) GetDepth() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.Depth
	}
	return nil
}

func (x *IrrSectionFlow) GetProductUses() []*Products.ProductUse {
	if x != nil {
		return x.ProductUses
	}
	return nil
}

func (x *IrrSectionFlow) GetPolygonCoverage() *Shapes.MultiPolygon {
	if x != nil {
		return x.PolygonCoverage
	}
	return nil
}

type IrrSpatialScope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RadialScope       *IrrRadialSpatialScope `protobuf:"bytes,1,opt,name=RadialScope,proto3" json:"RadialScope,omitempty"`
	MultiPolygonScope *Shapes.MultiPolygon   `protobuf:"bytes,2,opt,name=MultiPolygonScope,proto3" json:"MultiPolygonScope,omitempty"`
}

func (x *IrrSpatialScope) Reset() {
	*x = IrrSpatialScope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Documents_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrrSpatialScope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrrSpatialScope) ProtoMessage() {}

func (x *IrrSpatialScope) ProtoReflect() protoreflect.Message {
	mi := &file_Documents_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrrSpatialScope.ProtoReflect.Descriptor instead.
func (*IrrSpatialScope) Descriptor() ([]byte, []int) {
	return file_Documents_proto_rawDescGZIP(), []int{8}
}

func (x *IrrSpatialScope) GetRadialScope() *IrrRadialSpatialScope {
	if x != nil {
		return x.RadialScope
	}
	return nil
}

func (x *IrrSpatialScope) GetMultiPolygonScope() *Shapes.MultiPolygon {
	if x != nil {
		return x.MultiPolygonScope
	}
	return nil
}

type MeteredValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value                 *Representations.RepresentationValue `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
	MeterId               int64                                `protobuf:"varint,2,opt,name=MeterId,proto3" json:"MeterId,omitempty"`
	DeviceConfigurationId int64                                `protobuf:"varint,3,opt,name=DeviceConfigurationId,proto3" json:"DeviceConfigurationId,omitempty"`
}

func (x *MeteredValue) Reset() {
	*x = MeteredValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Documents_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeteredValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeteredValue) ProtoMessage() {}

func (x *MeteredValue) ProtoReflect() protoreflect.Message {
	mi := &file_Documents_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeteredValue.ProtoReflect.Descriptor instead.
func (*MeteredValue) Descriptor() ([]byte, []int) {
	return file_Documents_proto_rawDescGZIP(), []int{9}
}

func (x *MeteredValue) GetValue() *Representations.RepresentationValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *MeteredValue) GetMeterId() int64 {
	if x != nil {
		return x.MeterId
	}
	return 0
}

func (x *MeteredValue) GetDeviceConfigurationId() int64 {
	if x != nil {
		return x.DeviceConfigurationId
	}
	return 0
}

type OMCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               *Common.CompoundIdentifier `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Code             string                     `protobuf:"bytes,2,opt,name=Code,proto3" json:"Code,omitempty"`
	Description      string                     `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	CodeComponentIds []int64                    `protobuf:"varint,4,rep,packed,name=CodeComponentIds,proto3" json:"CodeComponentIds,omitempty"`
	ContextItems     []*Common.ContextItem      `protobuf:"bytes,5,rep,name=ContextItems,proto3" json:"ContextItems,omitempty"`
}

func (x *OMCode) Reset() {
	*x = OMCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Documents_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OMCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OMCode) ProtoMessage() {}

func (x *OMCode) ProtoReflect() protoreflect.Message {
	mi := &file_Documents_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OMCode.ProtoReflect.Descriptor instead.
func (*OMCode) Descriptor() ([]byte, []int) {
	return file_Documents_proto_rawDescGZIP(), []int{10}
}

func (x *OMCode) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *OMCode) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *OMCode) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *OMCode) GetCodeComponentIds() []int64 {
	if x != nil {
		return x.CodeComponentIds
	}
	return nil
}

func (x *OMCode) GetContextItems() []*Common.ContextItem {
	if x != nil {
		return x.ContextItems
	}
	return nil
}

type OMCodeComponentPart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OMCodeComponentPart) Reset() {
	*x = OMCodeComponentPart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Documents_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OMCodeComponentPart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OMCodeComponentPart) ProtoMessage() {}

func (x *OMCodeComponentPart) ProtoReflect() protoreflect.Message {
	mi := &file_Documents_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OMCodeComponentPart.ProtoReflect.Descriptor instead.
func (*OMCodeComponentPart) Descriptor() ([]byte, []int) {
	return file_Documents_proto_rawDescGZIP(), []int{11}
}

type OMCodeComponentValueType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OMCodeComponentValueType) Reset() {
	*x = OMCodeComponentValueType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Documents_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OMCodeComponentValueType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OMCodeComponentValueType) ProtoMessage() {}

func (x *OMCodeComponentValueType) ProtoReflect() protoreflect.Message {
	mi := &file_Documents_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OMCodeComponentValueType.ProtoReflect.Descriptor instead.
func (*OMCodeComponentValueType) Descriptor() ([]byte, []int) {
	return file_Documents_proto_rawDescGZIP(), []int{12}
}

type OMSemanticResourceLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OMSemanticResourceLevel) Reset() {
	*x = OMSemanticResourceLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Documents_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OMSemanticResourceLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OMSemanticResourceLevel) ProtoMessage() {}

func (x *OMSemanticResourceLevel) ProtoReflect() protoreflect.Message {
	mi := &file_Documents_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OMSemanticResourceLevel.ProtoReflect.Descriptor instead.
func (*OMSemanticResourceLevel) Descriptor() ([]byte, []int) {
	return file_Documents_proto_rawDescGZIP(), []int{13}
}

type OMSemanticResourceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OMSemanticResourceStatus) Reset() {
	*x = OMSemanticResourceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Documents_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OMSemanticResourceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OMSemanticResourceStatus) ProtoMessage() {}

func (x *OMSemanticResourceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_Documents_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OMSemanticResourceStatus.ProtoReflect.Descriptor instead.
func (*OMSemanticResourceStatus) Descriptor() ([]byte, []int) {
	return file_Documents_proto_rawDescGZIP(), []int{14}
}

type Obs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *Common.CompoundIdentifier `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	OMSourceId     int64                      `protobuf:"varint,2,opt,name=OMSourceId,proto3" json:"OMSourceId,omitempty"`        // OMSource reduces Obs to (mostly) key,value pair even with sensors, installation
	OMCodeId       int64                      `protobuf:"varint,3,opt,name=OMCodeId,proto3" json:"OMCodeId,omitempty"`            // OMCode reduces Obs to (mostly) key,value pair when installation data is not needed
	OMCode         string                     `protobuf:"bytes,4,opt,name=OMCode,proto3" json:"OMCode,omitempty"`                 // The string value provides the simplest form of meaning, by referring a pre-existing semantic resource by name (code).
	CodeComponents []*ObsCodeComponent        `protobuf:"bytes,5,rep,name=CodeComponents,proto3" json:"CodeComponents,omitempty"` // List of code components (by value) to allow parameters, semantic refinement
	TimeScopes     []*Common.TimeScope        `protobuf:"bytes,6,rep,name=TimeScopes,proto3" json:"TimeScopes,omitempty"`
	GrowerId       int64                      `protobuf:"varint,7,opt,name=GrowerId,proto3" json:"GrowerId,omitempty"`          // Optional, provides ability to put an Obs in the context of a grower
	PlaceId        int64                      `protobuf:"varint,8,opt,name=PlaceId,proto3" json:"PlaceId,omitempty"`            // Optional, provides ability to put an Obs in the context of a Place
	SpatialExtent  *Shapes.Shape              `protobuf:"bytes,9,opt,name=SpatialExtent,proto3" json:"SpatialExtent,omitempty"` // Optional, includes Point, Polyline, and Polygon features of interest
	// Note: PlaceId provides a feature of interest by reference; SpatialExtent does so by value. They are not necessarily
	// mutually exclusive.
	Value   string `protobuf:"bytes,10,opt,name=Value,proto3" json:"Value,omitempty"`     // The actual value of the observation. Its meaning is described by the OMCodeDefinition
	UoMCode string `protobuf:"bytes,11,opt,name=UoMCode,proto3" json:"UoMCode,omitempty"` // ADAPT codes for units of measure (e.g., "m1s-1" for meter/second) are required here.
	// PAIL allows different UoMAuthorities; but translation must happen in the PAIL plug-in level.
	ContextItems []*Common.ContextItem `protobuf:"bytes,12,rep,name=ContextItems,proto3" json:"ContextItems,omitempty"`
}

func (x *Obs) Reset() {
	*x = Obs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Documents_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Obs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Obs) ProtoMessage() {}

func (x *Obs) ProtoReflect() protoreflect.Message {
	mi := &file_Documents_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Obs.ProtoReflect.Descriptor instead.
func (*Obs) Descriptor() ([]byte, []int) {
	return file_Documents_proto_rawDescGZIP(), []int{15}
}

func (x *Obs) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Obs) GetOMSourceId() int64 {
	if x != nil {
		return x.OMSourceId
	}
	return 0
}

func (x *Obs) GetOMCodeId() int64 {
	if x != nil {
		return x.OMCodeId
	}
	return 0
}

func (x *Obs) GetOMCode() string {
	if x != nil {
		return x.OMCode
	}
	return ""
}

func (x *Obs) GetCodeComponents() []*ObsCodeComponent {
	if x != nil {
		return x.CodeComponents
	}
	return nil
}

func (x *Obs) GetTimeScopes() []*Common.TimeScope {
	if x != nil {
		return x.TimeScopes
	}
	return nil
}

func (x *Obs) GetGrowerId() int64 {
	if x != nil {
		return x.GrowerId
	}
	return 0
}

func (x *Obs) GetPlaceId() int64 {
	if x != nil {
		return x.PlaceId
	}
	return 0
}

func (x *Obs) GetSpatialExtent() *Shapes.Shape {
	if x != nil {
		return x.SpatialExtent
	}
	return nil
}

func (x *Obs) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Obs) GetUoMCode() string {
	if x != nil {
		return x.UoMCode
	}
	return ""
}

func (x *Obs) GetContextItems() []*Common.ContextItem {
	if x != nil {
		return x.ContextItems
	}
	return nil
}

type ObsCodeComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            *Common.CompoundIdentifier `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	ComponentCode string                     `protobuf:"bytes,2,opt,name=ComponentCode,proto3" json:"ComponentCode,omitempty"` // Provides a code that represents the meaning of this Code Component (code).
	PId           string                     `protobuf:"bytes,3,opt,name=PId,proto3" json:"PId,omitempty"`                     // Persistent identifier (presumed a URI) for this CodeComponent
	Description   string                     `protobuf:"bytes,4,opt,name=Description,proto3" json:"Description,omitempty"`     // Human-readable description of what the CodeComponent means
	ComponentType string                     `protobuf:"bytes,5,opt,name=ComponentType,proto3" json:"ComponentType,omitempty"` // What kind of CodeComponent is this? A parameter, feature of interest, observed property...?
	Selector      string                     `protobuf:"bytes,6,opt,name=Selector,proto3" json:"Selector,omitempty"`           // A second leavel of meaning for the code component. Usually from a controlled vocabulary.
	Value         string                     `protobuf:"bytes,7,opt,name=Value,proto3" json:"Value,omitempty"`                 // A third level of meaning for the code component. May be enumerated or not.
	ValueUoMCode  string                     `protobuf:"bytes,8,opt,name=ValueUoMCode,proto3" json:"ValueUoMCode,omitempty"`   // An optional unit of measure code that qualifies the value.
	// ADAPT codes for units of measure (e.g., "m1s-1" for meter/second) are required here.
	// PAIL allows different UoMAuthorities; but translation must happen in the PAIL plug-in level.
	ValueType *OMCodeComponentValueType `protobuf:"bytes,9,opt,name=ValueType,proto3" json:"ValueType,omitempty"` // Specifies the data type (e.g., integer, boolean) of the value.
}

func (x *ObsCodeComponent) Reset() {
	*x = ObsCodeComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Documents_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObsCodeComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObsCodeComponent) ProtoMessage() {}

func (x *ObsCodeComponent) ProtoReflect() protoreflect.Message {
	mi := &file_Documents_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObsCodeComponent.ProtoReflect.Descriptor instead.
func (*ObsCodeComponent) Descriptor() ([]byte, []int) {
	return file_Documents_proto_rawDescGZIP(), []int{16}
}

func (x *ObsCodeComponent) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ObsCodeComponent) GetComponentCode() string {
	if x != nil {
		return x.ComponentCode
	}
	return ""
}

func (x *ObsCodeComponent) GetPId() string {
	if x != nil {
		return x.PId
	}
	return ""
}

func (x *ObsCodeComponent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ObsCodeComponent) GetComponentType() string {
	if x != nil {
		return x.ComponentType
	}
	return ""
}

func (x *ObsCodeComponent) GetSelector() string {
	if x != nil {
		return x.Selector
	}
	return ""
}

func (x *ObsCodeComponent) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ObsCodeComponent) GetValueUoMCode() string {
	if x != nil {
		return x.ValueUoMCode
	}
	return ""
}

func (x *ObsCodeComponent) GetValueType() *OMCodeComponentValueType {
	if x != nil {
		return x.ValueType
	}
	return nil
}

type ObsCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *Common.CompoundIdentifier `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	OMSourceId     int64                      `protobuf:"varint,2,opt,name=OMSourceId,proto3" json:"OMSourceId,omitempty"`        // OMSource reduces child Obs to (mostly) key,value pair even with sensors, installation
	OMCodeId       int64                      `protobuf:"varint,3,opt,name=OMCodeId,proto3" json:"OMCodeId,omitempty"`            // OMCode reduces child Obs to (mostly) key,value pair when installation data is not needed
	OMCode         string                     `protobuf:"bytes,4,opt,name=OMCode,proto3" json:"OMCode,omitempty"`                 // The string value provides the simplest form of meaning, by referring a pre-existing semantic resource by name (code).
	CodeComponents []*ObsCodeComponent        `protobuf:"bytes,5,rep,name=CodeComponents,proto3" json:"CodeComponents,omitempty"` // List of code components (by value) to allow parameters, semantic refinement
	TimeScopes     []*Common.TimeScope        `protobuf:"bytes,6,rep,name=TimeScopes,proto3" json:"TimeScopes,omitempty"`
	GrowerId       int64                      `protobuf:"varint,7,opt,name=GrowerId,proto3" json:"GrowerId,omitempty"`          // Optional, provides ability to put an ObsCollection in the context of a grower
	PlaceId        int64                      `protobuf:"varint,8,opt,name=PlaceId,proto3" json:"PlaceId,omitempty"`            // Optional, provides ability to put an ObsCollection in the context of a Place
	SpatialExtent  *Shapes.Shape              `protobuf:"bytes,9,opt,name=SpatialExtent,proto3" json:"SpatialExtent,omitempty"` // Optional, includes Point, Polyline, and Polygon features of interest
	// Note: PlaceId provides a feature of interest by reference; SpatialExtent does so by value. They are not necessarily
	// mutually exclusive.
	ObsCollectionIds []int64               `protobuf:"varint,10,rep,packed,name=ObsCollectionIds,proto3" json:"ObsCollectionIds,omitempty"` // Recursive!
	ObsIds           []int64               `protobuf:"varint,11,rep,packed,name=ObsIds,proto3" json:"ObsIds,omitempty"`
	ContextItems     []*Common.ContextItem `protobuf:"bytes,12,rep,name=ContextItems,proto3" json:"ContextItems,omitempty"`
}

func (x *ObsCollection) Reset() {
	*x = ObsCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Documents_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObsCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObsCollection) ProtoMessage() {}

func (x *ObsCollection) ProtoReflect() protoreflect.Message {
	mi := &file_Documents_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObsCollection.ProtoReflect.Descriptor instead.
func (*ObsCollection) Descriptor() ([]byte, []int) {
	return file_Documents_proto_rawDescGZIP(), []int{17}
}

func (x *ObsCollection) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ObsCollection) GetOMSourceId() int64 {
	if x != nil {
		return x.OMSourceId
	}
	return 0
}

func (x *ObsCollection) GetOMCodeId() int64 {
	if x != nil {
		return x.OMCodeId
	}
	return 0
}

func (x *ObsCollection) GetOMCode() string {
	if x != nil {
		return x.OMCode
	}
	return ""
}

func (x *ObsCollection) GetCodeComponents() []*ObsCodeComponent {
	if x != nil {
		return x.CodeComponents
	}
	return nil
}

func (x *ObsCollection) GetTimeScopes() []*Common.TimeScope {
	if x != nil {
		return x.TimeScopes
	}
	return nil
}

func (x *ObsCollection) GetGrowerId() int64 {
	if x != nil {
		return x.GrowerId
	}
	return 0
}

func (x *ObsCollection) GetPlaceId() int64 {
	if x != nil {
		return x.PlaceId
	}
	return 0
}

func (x *ObsCollection) GetSpatialExtent() *Shapes.Shape {
	if x != nil {
		return x.SpatialExtent
	}
	return nil
}

func (x *ObsCollection) GetObsCollectionIds() []int64 {
	if x != nil {
		return x.ObsCollectionIds
	}
	return nil
}

func (x *ObsCollection) GetObsIds() []int64 {
	if x != nil {
		return x.ObsIds
	}
	return nil
}

func (x *ObsCollection) GetContextItems() []*Common.ContextItem {
	if x != nil {
		return x.ContextItems
	}
	return nil
}

type ObsDataset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               *Common.CompoundIdentifier `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Description      string                     `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`                   // Human-friendly description of the dataset
	SetupURL         string                     `protobuf:"bytes,3,opt,name=SetupURL,proto3" json:"SetupURL,omitempty"`                         // PAIL legacy, a URL pointing to  setup data.
	TimeScopes       []*Common.TimeScope        `protobuf:"bytes,4,rep,name=TimeScopes,proto3" json:"TimeScopes,omitempty"`                     // Dataset-specific timescopes (e.g., create date, start & end, etc.)
	ObsCollectionIds []int64                    `protobuf:"varint,5,rep,packed,name=ObsCollectionIds,proto3" json:"ObsCollectionIds,omitempty"` // List of references to the ObsCollections contained in the dataset
	ContextItems     []*Common.ContextItem      `protobuf:"bytes,6,rep,name=ContextItems,proto3" json:"ContextItems,omitempty"`
}

func (x *ObsDataset) Reset() {
	*x = ObsDataset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Documents_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObsDataset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObsDataset) ProtoMessage() {}

func (x *ObsDataset) ProtoReflect() protoreflect.Message {
	mi := &file_Documents_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObsDataset.ProtoReflect.Descriptor instead.
func (*ObsDataset) Descriptor() ([]byte, []int) {
	return file_Documents_proto_rawDescGZIP(), []int{18}
}

func (x *ObsDataset) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ObsDataset) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ObsDataset) GetSetupURL() string {
	if x != nil {
		return x.SetupURL
	}
	return ""
}

func (x *ObsDataset) GetTimeScopes() []*Common.TimeScope {
	if x != nil {
		return x.TimeScopes
	}
	return nil
}

func (x *ObsDataset) GetObsCollectionIds() []int64 {
	if x != nil {
		return x.ObsCollectionIds
	}
	return nil
}

func (x *ObsDataset) GetContextItems() []*Common.ContextItem {
	if x != nil {
		return x.ContextItems
	}
	return nil
}

type Observations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObsDatasetIds []int64 `protobuf:"varint,1,rep,packed,name=ObsDatasetIds,proto3" json:"ObsDatasetIds,omitempty"`
}

func (x *Observations) Reset() {
	*x = Observations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Documents_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Observations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Observations) ProtoMessage() {}

func (x *Observations) ProtoReflect() protoreflect.Message {
	mi := &file_Documents_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Observations.ProtoReflect.Descriptor instead.
func (*Observations) Descriptor() ([]byte, []int) {
	return file_Documents_proto_rawDescGZIP(), []int{19}
}

func (x *Observations) GetObsDatasetIds() []int64 {
	if x != nil {
		return x.ObsDatasetIds
	}
	return nil
}

type OperationSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        *Common.CompoundIdentifier `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	OperationType             *Common.OperationType      `protobuf:"bytes,2,opt,name=OperationType,proto3" json:"OperationType,omitempty"`
	ProductId                 int64                      `protobuf:"varint,3,opt,name=ProductId,proto3" json:"ProductId,omitempty"`
	WorkItemOperationId       int64                      `protobuf:"varint,4,opt,name=WorkItemOperationId,proto3" json:"WorkItemOperationId,omitempty"`
	Data                      []*StampedMeteredValues    `protobuf:"bytes,5,rep,name=Data,proto3" json:"Data,omitempty"`
	EquipmentConfigurationIds []int64                    `protobuf:"varint,6,rep,packed,name=EquipmentConfigurationIds,proto3" json:"EquipmentConfigurationIds,omitempty"`
	CoverageShape             *Shapes.Shape              `protobuf:"bytes,7,opt,name=CoverageShape,proto3" json:"CoverageShape,omitempty"`
	ContextItems              []*Common.ContextItem      `protobuf:"bytes,8,rep,name=ContextItems,proto3" json:"ContextItems,omitempty"`
	Description               string                     `protobuf:"bytes,9,opt,name=Description,proto3" json:"Description,omitempty"`
}

func (x *OperationSummary) Reset() {
	*x = OperationSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Documents_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationSummary) ProtoMessage() {}

func (x *OperationSummary) ProtoReflect() protoreflect.Message {
	mi := &file_Documents_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationSummary.ProtoReflect.Descriptor instead.
func (*OperationSummary) Descriptor() ([]byte, []int) {
	return file_Documents_proto_rawDescGZIP(), []int{20}
}

func (x *OperationSummary) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *OperationSummary) GetOperationType() *Common.OperationType {
	if x != nil {
		return x.OperationType
	}
	return nil
}

func (x *OperationSummary) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *OperationSummary) GetWorkItemOperationId() int64 {
	if x != nil {
		return x.WorkItemOperationId
	}
	return 0
}

func (x *OperationSummary) GetData() []*StampedMeteredValues {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *OperationSummary) GetEquipmentConfigurationIds() []int64 {
	if x != nil {
		return x.EquipmentConfigurationIds
	}
	return nil
}

func (x *OperationSummary) GetCoverageShape() *Shapes.Shape {
	if x != nil {
		return x.CoverageShape
	}
	return nil
}

func (x *OperationSummary) GetContextItems() []*Common.ContextItem {
	if x != nil {
		return x.ContextItems
	}
	return nil
}

func (x *OperationSummary) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type Plan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkItemIds []int64 `protobuf:"varint,1,rep,packed,name=WorkItemIds,proto3" json:"WorkItemIds,omitempty"`
}

func (x *Plan) Reset() {
	*x = Plan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Documents_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Plan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Plan) ProtoMessage() {}

func (x *Plan) ProtoReflect() protoreflect.Message {
	mi := &file_Documents_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Plan.ProtoReflect.Descriptor instead.
func (*Plan) Descriptor() ([]byte, []int) {
	return file_Documents_proto_rawDescGZIP(), []int{21}
}

func (x *Plan) GetWorkItemIds() []int64 {
	if x != nil {
		return x.WorkItemIds
	}
	return nil
}

type Recommendation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkItemIds []int64 `protobuf:"varint,1,rep,packed,name=WorkItemIds,proto3" json:"WorkItemIds,omitempty"`
}

func (x *Recommendation) Reset() {
	*x = Recommendation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Documents_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Recommendation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Recommendation) ProtoMessage() {}

func (x *Recommendation) ProtoReflect() protoreflect.Message {
	mi := &file_Documents_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Recommendation.ProtoReflect.Descriptor instead.
func (*Recommendation) Descriptor() ([]byte, []int) {
	return file_Documents_proto_rawDescGZIP(), []int{22}
}

func (x *Recommendation) GetWorkItemIds() []int64 {
	if x != nil {
		return x.WorkItemIds
	}
	return nil
}

type StampedMeteredValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*MeteredValue   `protobuf:"bytes,1,rep,name=Values,proto3" json:"Values,omitempty"`
	Stamp  *Common.TimeScope `protobuf:"bytes,2,opt,name=Stamp,proto3" json:"Stamp,omitempty"`
}

func (x *StampedMeteredValues) Reset() {
	*x = StampedMeteredValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Documents_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StampedMeteredValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StampedMeteredValues) ProtoMessage() {}

func (x *StampedMeteredValues) ProtoReflect() protoreflect.Message {
	mi := &file_Documents_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StampedMeteredValues.ProtoReflect.Descriptor instead.
func (*StampedMeteredValues) Descriptor() ([]byte, []int) {
	return file_Documents_proto_rawDescGZIP(), []int{23}
}

func (x *StampedMeteredValues) GetValues() []*MeteredValue {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *StampedMeteredValues) GetStamp() *Common.TimeScope {
	if x != nil {
		return x.Stamp
	}
	return nil
}

type StatusUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    *WorkStatus            `protobuf:"bytes,1,opt,name=Status,proto3" json:"Status,omitempty"`
	Note      *Notes.Note            `protobuf:"bytes,2,opt,name=Note,proto3" json:"Note,omitempty"`
	TimeStamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=TimeStamp,proto3" json:"TimeStamp,omitempty"`
}

func (x *StatusUpdate) Reset() {
	*x = StatusUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Documents_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusUpdate) ProtoMessage() {}

func (x *StatusUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_Documents_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusUpdate.ProtoReflect.Descriptor instead.
func (*StatusUpdate) Descriptor() ([]byte, []int) {
	return file_Documents_proto_rawDescGZIP(), []int{24}
}

func (x *StatusUpdate) GetStatus() *WorkStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *StatusUpdate) GetNote() *Notes.Note {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *StatusUpdate) GetTimeStamp() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeStamp
	}
	return nil
}

type Summary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                          *Common.CompoundIdentifier             `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	TimeScopes                  []*Common.TimeScope                    `protobuf:"bytes,2,rep,name=TimeScopes,proto3" json:"TimeScopes,omitempty"`
	PersonRoleIds               []int64                                `protobuf:"varint,3,rep,packed,name=PersonRoleIds,proto3" json:"PersonRoleIds,omitempty"`
	GuidanceAllocationIds       []int64                                `protobuf:"varint,4,rep,packed,name=GuidanceAllocationIds,proto3" json:"GuidanceAllocationIds,omitempty"`
	WorkItemIds                 []int64                                `protobuf:"varint,5,rep,packed,name=WorkItemIds,proto3" json:"WorkItemIds,omitempty"`
	LoggedDataIds               []int64                                `protobuf:"varint,6,rep,packed,name=LoggedDataIds,proto3" json:"LoggedDataIds,omitempty"`
	Notes                       []*Notes.Note                          `protobuf:"bytes,7,rep,name=Notes,proto3" json:"Notes,omitempty"`
	SummaryData                 []*StampedMeteredValues                `protobuf:"bytes,8,rep,name=SummaryData,proto3" json:"SummaryData,omitempty"`
	OperationSummaries          []*OperationSummary                    `protobuf:"bytes,9,rep,name=OperationSummaries,proto3" json:"OperationSummaries,omitempty"`
	WorkRecordId                int64                                  `protobuf:"varint,15,opt,name=WorkRecordId,proto3" json:"WorkRecordId,omitempty"`
	GrowerId                    int64                                  `protobuf:"varint,16,opt,name=GrowerId,proto3" json:"GrowerId,omitempty"`
	FarmId                      int64                                  `protobuf:"varint,17,opt,name=FarmId,proto3" json:"FarmId,omitempty"`
	FieldId                     int64                                  `protobuf:"varint,18,opt,name=FieldId,proto3" json:"FieldId,omitempty"`
	CropZoneId                  int64                                  `protobuf:"varint,19,opt,name=CropZoneId,proto3" json:"CropZoneId,omitempty"`
	EquipmentConfigurationGroup *Equipment.EquipmentConfigurationGroup `protobuf:"bytes,20,opt,name=EquipmentConfigurationGroup,proto3" json:"EquipmentConfigurationGroup,omitempty"`
}

func (x *Summary) Reset() {
	*x = Summary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Documents_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Summary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Summary) ProtoMessage() {}

func (x *Summary) ProtoReflect() protoreflect.Message {
	mi := &file_Documents_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Summary.ProtoReflect.Descriptor instead.
func (*Summary) Descriptor() ([]byte, []int) {
	return file_Documents_proto_rawDescGZIP(), []int{25}
}

func (x *Summary) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Summary) GetTimeScopes() []*Common.TimeScope {
	if x != nil {
		return x.TimeScopes
	}
	return nil
}

func (x *Summary) GetPersonRoleIds() []int64 {
	if x != nil {
		return x.PersonRoleIds
	}
	return nil
}

func (x *Summary) GetGuidanceAllocationIds() []int64 {
	if x != nil {
		return x.GuidanceAllocationIds
	}
	return nil
}

func (x *Summary) GetWorkItemIds() []int64 {
	if x != nil {
		return x.WorkItemIds
	}
	return nil
}

func (x *Summary) GetLoggedDataIds() []int64 {
	if x != nil {
		return x.LoggedDataIds
	}
	return nil
}

func (x *Summary) GetNotes() []*Notes.Note {
	if x != nil {
		return x.Notes
	}
	return nil
}

func (x *Summary) GetSummaryData() []*StampedMeteredValues {
	if x != nil {
		return x.SummaryData
	}
	return nil
}

func (x *Summary) GetOperationSummaries() []*OperationSummary {
	if x != nil {
		return x.OperationSummaries
	}
	return nil
}

func (x *Summary) GetWorkRecordId() int64 {
	if x != nil {
		return x.WorkRecordId
	}
	return 0
}

func (x *Summary) GetGrowerId() int64 {
	if x != nil {
		return x.GrowerId
	}
	return 0
}

func (x *Summary) GetFarmId() int64 {
	if x != nil {
		return x.FarmId
	}
	return 0
}

func (x *Summary) GetFieldId() int64 {
	if x != nil {
		return x.FieldId
	}
	return 0
}

func (x *Summary) GetCropZoneId() int64 {
	if x != nil {
		return x.CropZoneId
	}
	return 0
}

func (x *Summary) GetEquipmentConfigurationGroup() *Equipment.EquipmentConfigurationGroup {
	if x != nil {
		return x.EquipmentConfigurationGroup
	}
	return nil
}

type WorkItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                          *Common.CompoundIdentifier             `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Notes                       []*Notes.Note                          `protobuf:"bytes,3,rep,name=Notes,proto3" json:"Notes,omitempty"`
	PeopleRoleIds               []int64                                `protobuf:"varint,4,rep,packed,name=PeopleRoleIds,proto3" json:"PeopleRoleIds,omitempty"`
	ReferenceLayerIds           []int64                                `protobuf:"varint,5,rep,packed,name=ReferenceLayerIds,proto3" json:"ReferenceLayerIds,omitempty"`
	WorkItemOperationIds        []int64                                `protobuf:"varint,6,rep,packed,name=WorkItemOperationIds,proto3" json:"WorkItemOperationIds,omitempty"`
	GuidanceAllocationIds       []int64                                `protobuf:"varint,7,rep,packed,name=GuidanceAllocationIds,proto3" json:"GuidanceAllocationIds,omitempty"`
	StatusUpdates               []*StatusUpdate                        `protobuf:"bytes,8,rep,name=StatusUpdates,proto3" json:"StatusUpdates,omitempty"`
	WorkOrderIds                []int64                                `protobuf:"varint,9,rep,packed,name=WorkOrderIds,proto3" json:"WorkOrderIds,omitempty"`
	TimeScopes                  []*Common.TimeScope                    `protobuf:"bytes,10,rep,name=TimeScopes,proto3" json:"TimeScopes,omitempty"`
	WorkItemPriority            *WorkItemPriority                      `protobuf:"bytes,15,opt,name=WorkItemPriority,proto3" json:"WorkItemPriority,omitempty"`
	GrowerId                    int64                                  `protobuf:"varint,16,opt,name=GrowerId,proto3" json:"GrowerId,omitempty"`
	FarmId                      int64                                  `protobuf:"varint,17,opt,name=FarmId,proto3" json:"FarmId,omitempty"`
	FieldId                     int64                                  `protobuf:"varint,18,opt,name=FieldId,proto3" json:"FieldId,omitempty"`
	CropZoneId                  int64                                  `protobuf:"varint,19,opt,name=CropZoneId,proto3" json:"CropZoneId,omitempty"`
	BoundaryId                  int64                                  `protobuf:"varint,20,opt,name=BoundaryId,proto3" json:"BoundaryId,omitempty"`
	ParentDocumentId            int64                                  `protobuf:"varint,21,opt,name=ParentDocumentId,proto3" json:"ParentDocumentId,omitempty"`
	EquipmentConfigurationGroup *Equipment.EquipmentConfigurationGroup `protobuf:"bytes,22,opt,name=EquipmentConfigurationGroup,proto3" json:"EquipmentConfigurationGroup,omitempty"`
}

func (x *WorkItem) Reset() {
	*x = WorkItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Documents_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkItem) ProtoMessage() {}

func (x *WorkItem) ProtoReflect() protoreflect.Message {
	mi := &file_Documents_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkItem.ProtoReflect.Descriptor instead.
func (*WorkItem) Descriptor() ([]byte, []int) {
	return file_Documents_proto_rawDescGZIP(), []int{26}
}

func (x *WorkItem) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *WorkItem) GetNotes() []*Notes.Note {
	if x != nil {
		return x.Notes
	}
	return nil
}

func (x *WorkItem) GetPeopleRoleIds() []int64 {
	if x != nil {
		return x.PeopleRoleIds
	}
	return nil
}

func (x *WorkItem) GetReferenceLayerIds() []int64 {
	if x != nil {
		return x.ReferenceLayerIds
	}
	return nil
}

func (x *WorkItem) GetWorkItemOperationIds() []int64 {
	if x != nil {
		return x.WorkItemOperationIds
	}
	return nil
}

func (x *WorkItem) GetGuidanceAllocationIds() []int64 {
	if x != nil {
		return x.GuidanceAllocationIds
	}
	return nil
}

func (x *WorkItem) GetStatusUpdates() []*StatusUpdate {
	if x != nil {
		return x.StatusUpdates
	}
	return nil
}

func (x *WorkItem) GetWorkOrderIds() []int64 {
	if x != nil {
		return x.WorkOrderIds
	}
	return nil
}

func (x *WorkItem) GetTimeScopes() []*Common.TimeScope {
	if x != nil {
		return x.TimeScopes
	}
	return nil
}

func (x *WorkItem) GetWorkItemPriority() *WorkItemPriority {
	if x != nil {
		return x.WorkItemPriority
	}
	return nil
}

func (x *WorkItem) GetGrowerId() int64 {
	if x != nil {
		return x.GrowerId
	}
	return 0
}

func (x *WorkItem) GetFarmId() int64 {
	if x != nil {
		return x.FarmId
	}
	return 0
}

func (x *WorkItem) GetFieldId() int64 {
	if x != nil {
		return x.FieldId
	}
	return 0
}

func (x *WorkItem) GetCropZoneId() int64 {
	if x != nil {
		return x.CropZoneId
	}
	return 0
}

func (x *WorkItem) GetBoundaryId() int64 {
	if x != nil {
		return x.BoundaryId
	}
	return 0
}

func (x *WorkItem) GetParentDocumentId() int64 {
	if x != nil {
		return x.ParentDocumentId
	}
	return 0
}

func (x *WorkItem) GetEquipmentConfigurationGroup() *Equipment.EquipmentConfigurationGroup {
	if x != nil {
		return x.EquipmentConfigurationGroup
	}
	return nil
}

type WorkItemPriority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WorkItemPriority) Reset() {
	*x = WorkItemPriority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Documents_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkItemPriority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkItemPriority) ProtoMessage() {}

func (x *WorkItemPriority) ProtoReflect() protoreflect.Message {
	mi := &file_Documents_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkItemPriority.ProtoReflect.Descriptor instead.
func (*WorkItemPriority) Descriptor() ([]byte, []int) {
	return file_Documents_proto_rawDescGZIP(), []int{27}
}

type WorkItemOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        *Common.CompoundIdentifier `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Description               string                     `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	OperationType             *Common.OperationType      `protobuf:"bytes,3,opt,name=OperationType,proto3" json:"OperationType,omitempty"`
	PrescriptionId            int64                      `protobuf:"varint,4,opt,name=PrescriptionId,proto3" json:"PrescriptionId,omitempty"`
	EquipmentConfigurationIds []int64                    `protobuf:"varint,5,rep,packed,name=EquipmentConfigurationIds,proto3" json:"EquipmentConfigurationIds,omitempty"`
}

func (x *WorkItemOperation) Reset() {
	*x = WorkItemOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Documents_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkItemOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkItemOperation) ProtoMessage() {}

func (x *WorkItemOperation) ProtoReflect() protoreflect.Message {
	mi := &file_Documents_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkItemOperation.ProtoReflect.Descriptor instead.
func (*WorkItemOperation) Descriptor() ([]byte, []int) {
	return file_Documents_proto_rawDescGZIP(), []int{28}
}

func (x *WorkItemOperation) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *WorkItemOperation) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *WorkItemOperation) GetOperationType() *Common.OperationType {
	if x != nil {
		return x.OperationType
	}
	return nil
}

func (x *WorkItemOperation) GetPrescriptionId() int64 {
	if x != nil {
		return x.PrescriptionId
	}
	return 0
}

func (x *WorkItemOperation) GetEquipmentConfigurationIds() []int64 {
	if x != nil {
		return x.EquipmentConfigurationIds
	}
	return nil
}

type WorkOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusUpdates []*StatusUpdate `protobuf:"bytes,1,rep,name=StatusUpdates,proto3" json:"StatusUpdates,omitempty"`
	WorkItemIds   []int64         `protobuf:"varint,2,rep,packed,name=WorkItemIds,proto3" json:"WorkItemIds,omitempty"`
}

func (x *WorkOrder) Reset() {
	*x = WorkOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Documents_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkOrder) ProtoMessage() {}

func (x *WorkOrder) ProtoReflect() protoreflect.Message {
	mi := &file_Documents_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkOrder.ProtoReflect.Descriptor instead.
func (*WorkOrder) Descriptor() ([]byte, []int) {
	return file_Documents_proto_rawDescGZIP(), []int{29}
}

func (x *WorkOrder) GetStatusUpdates() []*StatusUpdate {
	if x != nil {
		return x.StatusUpdates
	}
	return nil
}

func (x *WorkOrder) GetWorkItemIds() []int64 {
	if x != nil {
		return x.WorkItemIds
	}
	return nil
}

type WorkRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoggedDataIds []int64 `protobuf:"varint,1,rep,packed,name=LoggedDataIds,proto3" json:"LoggedDataIds,omitempty"`
	SummariesIds  []int64 `protobuf:"varint,2,rep,packed,name=SummariesIds,proto3" json:"SummariesIds,omitempty"`
	IrrRecordIds  []int64 `protobuf:"varint,3,rep,packed,name=IrrRecordIds,proto3" json:"IrrRecordIds,omitempty"`
}

func (x *WorkRecord) Reset() {
	*x = WorkRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Documents_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkRecord) ProtoMessage() {}

func (x *WorkRecord) ProtoReflect() protoreflect.Message {
	mi := &file_Documents_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkRecord.ProtoReflect.Descriptor instead.
func (*WorkRecord) Descriptor() ([]byte, []int) {
	return file_Documents_proto_rawDescGZIP(), []int{30}
}

func (x *WorkRecord) GetLoggedDataIds() []int64 {
	if x != nil {
		return x.LoggedDataIds
	}
	return nil
}

func (x *WorkRecord) GetSummariesIds() []int64 {
	if x != nil {
		return x.SummariesIds
	}
	return nil
}

func (x *WorkRecord) GetIrrRecordIds() []int64 {
	if x != nil {
		return x.IrrRecordIds
	}
	return nil
}

type WorkStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WorkStatus) Reset() {
	*x = WorkStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Documents_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkStatus) ProtoMessage() {}

func (x *WorkStatus) ProtoReflect() protoreflect.Message {
	mi := &file_Documents_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkStatus.ProtoReflect.Descriptor instead.
func (*WorkStatus) Descriptor() ([]byte, []int) {
	return file_Documents_proto_rawDescGZIP(), []int{31}
}

var File_Documents_proto protoreflect.FileDescriptor

var file_Documents_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0f, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x1a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x15, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x53, 0x68, 0x61, 0x70, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe9, 0x06, 0x0a, 0x08, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x41, 0x44, 0x41, 0x50,
	0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x72, 0x6f, 0x70, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x07, 0x43, 0x72, 0x6f, 0x70, 0x49, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x43, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x0b, 0x43, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x57, 0x0a, 0x0d, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x41, 0x72, 0x65,
	0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e,
	0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x45, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x64, 0x41, 0x72, 0x65, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x61, 0x72,
	0x6d, 0x49, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x46, 0x61, 0x72, 0x6d,
	0x49, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x47, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x47, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x05, 0x4e,
	0x6f, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x41, 0x44, 0x41,
	0x50, 0x54, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x05, 0x4e,
	0x6f, 0x74, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x6f,
	0x6c, 0x65, 0x49, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a,
	0x04, 0x50, 0x6c, 0x61, 0x6e, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x41, 0x44,
	0x41, 0x50, 0x54, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x6c,
	0x61, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x49, 0x0a, 0x0e, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x66, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x09, 0x57, 0x6f, 0x72, 0x6b, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54,
	0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x09, 0x57, 0x6f, 0x72, 0x6b, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x3d, 0x0a, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18,
	0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x48, 0x00, 0x52, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x43, 0x0a, 0x0c, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x5f, 0x0a, 0x13, 0x44, 0x6f, 0x63, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x22, 0x48, 0x0a, 0x17, 0x44, 0x6f, 0x63, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e,
	0x75, 0x6d, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x61, 0x73, 0x75, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x75, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x11,
	0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x10,
	0x02, 0x22, 0xce, 0x02, 0x0a, 0x13, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x10, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x44, 0x6f, 0x63, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a,
	0x15, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x0d, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x49,
	0x64, 0x73, 0x22, 0x90, 0x04, 0x0a, 0x0d, 0x49, 0x72, 0x72, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x02, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x41, 0x44, 0x41,
	0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12,
	0x44, 0x0a, 0x0c, 0x53, 0x70, 0x61, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x49, 0x72, 0x72, 0x53, 0x70, 0x61, 0x74, 0x69,
	0x61, 0x6c, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x0c, 0x53, 0x70, 0x61, 0x74, 0x69, 0x61, 0x6c,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x67,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x72, 0x72, 0x46, 0x6c, 0x6f,
	0x77, 0x54, 0x61, 0x67, 0x52, 0x08, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x67, 0x73, 0x12, 0x2b,
	0x0a, 0x06, 0x52, 0x6f, 0x74, 0x43, 0x74, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x06, 0x52, 0x6f, 0x74, 0x43, 0x74, 0x72, 0x12, 0x34, 0x0a, 0x08, 0x49,
	0x72, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x49, 0x72, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x49, 0x72, 0x72, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x12, 0x4d, 0x0a, 0x08, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65,
	0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65,
	0x12, 0x63, 0x0a, 0x13, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x45, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x13, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x45, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x65, 0x6e, 0x63, 0x79, 0x22, 0xa4, 0x04, 0x0a, 0x07, 0x49, 0x72, 0x72, 0x49, 0x74, 0x65,
	0x6d, 0x12, 0x37, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x0a,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x0c, 0x53, 0x70,
	0x61, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x49, 0x72, 0x72, 0x53, 0x70, 0x61, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x52, 0x0c, 0x53, 0x70, 0x61, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x12, 0x37, 0x0a, 0x08, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x72, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x67, 0x52,
	0x08, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x61, 0x67, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x52, 0x6f, 0x74,
	0x43, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x41, 0x44, 0x41, 0x50,
	0x54, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06,
	0x52, 0x6f, 0x74, 0x43, 0x74, 0x72, 0x12, 0x43, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x41,
	0x44, 0x41, 0x50, 0x54, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x49,
	0x72, 0x72, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x0c, 0x53,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x4d, 0x0a, 0x08, 0x50,
	0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x49, 0x72, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x63, 0x0a, 0x13, 0x45, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x64, 0x45, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d,
	0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x64, 0x45, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x22, 0xb9, 0x01, 0x0a,
	0x15, 0x49, 0x72, 0x72, 0x52, 0x61, 0x64, 0x69, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x74, 0x69, 0x61,
	0x6c, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x51, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x6e, 0x67, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41,
	0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x4d, 0x0a, 0x08, 0x45, 0x6e, 0x64,
	0x41, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44,
	0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08,
	0x45, 0x6e, 0x64, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x22, 0xa6, 0x07, 0x0a, 0x09, 0x49, 0x72, 0x72,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x57, 0x6f, 0x72, 0x6b,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0a,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52,
	0x6f, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x57,
	0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x47, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x47, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x61, 0x72,
	0x6d, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x46, 0x61, 0x72, 0x6d, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x43,
	0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x43, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0c, 0x53,
	0x70, 0x61, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x49, 0x72, 0x72, 0x53, 0x70, 0x61, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x52, 0x0c, 0x53, 0x70, 0x61, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x12, 0x4f, 0x0a, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x72, 0x65, 0x61, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d,
	0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x72,
	0x65, 0x61, 0x12, 0x5d, 0x0a, 0x10, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x61, 0x74, 0x65, 0x72,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41,
	0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x10, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x61, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x4c, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x73, 0x65, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x73, 0x65, 0x52, 0x13, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x55, 0x73, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x3c, 0x0a, 0x19, 0x49, 0x72, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x19, 0x49, 0x72, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x3e, 0x0a,
	0x1a, 0x49, 0x72, 0x72, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x1a, 0x49, 0x72, 0x72, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x2a, 0x0a,
	0x10, 0x49, 0x72, 0x72, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x03, 0x52, 0x10, 0x49, 0x72, 0x72, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x05, 0x4e, 0x6f, 0x74,
	0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54,
	0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x05, 0x4e, 0x6f, 0x74,
	0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x22, 0xc6, 0x02, 0x0a, 0x0e, 0x49, 0x72, 0x72, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x6c, 0x6f, 0x77, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x49, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72,
	0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x47, 0x0a,
	0x05, 0x44, 0x65, 0x70, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41,
	0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x3c, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x55, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x41, 0x44,
	0x41, 0x50, 0x54, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x55, 0x73, 0x65, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x55, 0x73, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x0f, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x43,
	0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x52, 0x0f, 0x50, 0x6f, 0x6c, 0x79, 0x67,
	0x6f, 0x6e, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x0f, 0x49,
	0x72, 0x72, 0x53, 0x70, 0x61, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x48,
	0x0a, 0x0b, 0x52, 0x61, 0x64, 0x69, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x49, 0x72, 0x72, 0x52, 0x61, 0x64, 0x69, 0x61, 0x6c, 0x53,
	0x70, 0x61, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x0b, 0x52, 0x61, 0x64,
	0x69, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x11, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x53, 0x68, 0x61, 0x70,
	0x65, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x52,
	0x11, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x65, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x34, 0x0a, 0x15, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xdb, 0x01, 0x0a, 0x06, 0x4f, 0x4d, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x41,
	0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x6f, 0x64, 0x65,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x10, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x41, 0x44, 0x41,
	0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0x65, 0x0a, 0x13, 0x4f, 0x4d, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x74, 0x22, 0x4e, 0x0a, 0x17, 0x4f, 0x4d,
	0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x10,
	0x02, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x6f, 0x4d, 0x10, 0x03, 0x22, 0x81, 0x01, 0x0a, 0x18, 0x4f,
	0x4d, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x65, 0x0a, 0x1c, 0x4f, 0x4d, 0x43, 0x6f, 0x64,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x6f, 0x6f, 0x6c, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x10, 0x04,
	0x12, 0x0c, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x10, 0x05, 0x22, 0xba,
	0x01, 0x0a, 0x17, 0x4f, 0x4d, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x9e, 0x01, 0x0a, 0x1b, 0x4f,
	0x4d, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x4d,
	0x43, 0x6f, 0x64, 0x65, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x4d, 0x43, 0x6f, 0x64, 0x65,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x43,
	0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x10, 0x03, 0x12, 0x16, 0x0a,
	0x12, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x6f, 0x4d, 0x10, 0x05, 0x22, 0x76, 0x0a, 0x18, 0x4f,
	0x4d, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x5a, 0x0a, 0x1c, 0x4f, 0x4d, 0x53, 0x65, 0x6d,
	0x61, 0x6e, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x65, 0x74, 0x61, 0x72,
	0x79, 0x10, 0x03, 0x22, 0xef, 0x03, 0x0a, 0x03, 0x4f, 0x62, 0x73, 0x12, 0x30, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x4f, 0x4d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x4f, 0x4d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x4f, 0x4d, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x4f, 0x4d, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x4d, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4f, 0x4d, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x49, 0x0a, 0x0e, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x41, 0x44, 0x41, 0x50,
	0x54, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x43, 0x6f,
	0x64, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x0a,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x47, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0d, 0x53,
	0x70, 0x61, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65,
	0x73, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x52, 0x0d, 0x53, 0x70, 0x61, 0x74, 0x69, 0x61, 0x6c,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x55, 0x6f, 0x4d, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x55,
	0x6f, 0x4d, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x41,
	0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xe3, 0x02, 0x0a, 0x10, 0x4f, 0x62, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x50, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x6f, 0x4d, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x6f, 0x4d, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4f, 0x4d, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x8d, 0x04, 0x0a, 0x0d,
	0x4f, 0x62, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a,
	0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x41, 0x44, 0x41, 0x50,
	0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e,
	0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x4f, 0x4d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x4f, 0x4d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x4f, 0x4d, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x4f, 0x4d, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4f,
	0x4d, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4f, 0x4d, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x0e, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x41, 0x44,
	0x41, 0x50, 0x54, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4f, 0x62,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x0e,
	0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x37,
	0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x0a, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x72, 0x6f, 0x77, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x47, 0x72, 0x6f, 0x77, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a,
	0x0d, 0x53, 0x70, 0x61, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x53, 0x68, 0x61,
	0x70, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x52, 0x0d, 0x53, 0x70, 0x61, 0x74, 0x69,
	0x61, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x4f, 0x62, 0x73, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x10, 0x4f, 0x62, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x62, 0x73, 0x49, 0x64, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x4f, 0x62, 0x73, 0x49, 0x64, 0x73, 0x12, 0x3d, 0x0a, 0x0c,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xa0, 0x02, 0x0a, 0x0a,
	0x4f, 0x62, 0x73, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x53, 0x65, 0x74, 0x75, 0x70, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x53, 0x65, 0x74, 0x75, 0x70, 0x55, 0x52, 0x4c, 0x12, 0x37, 0x0a, 0x0a, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x4f, 0x62, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x10, 0x4f,
	0x62, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12,
	0x3d, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x34,
	0x0a, 0x0c, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x4f, 0x62, 0x73, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x4f, 0x62, 0x73, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x73, 0x22, 0xec, 0x03, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0d, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13,
	0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x57, 0x6f, 0x72, 0x6b, 0x49,
	0x74, 0x65, 0x6d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x39,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x41,
	0x44, 0x41, 0x50, 0x54, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x65, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3c, 0x0a, 0x19, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x19, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x0d, 0x43, 0x6f, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x53, 0x68, 0x61, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x68,
	0x61, 0x70, 0x65, 0x52, 0x0d, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x53, 0x68, 0x61,
	0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x28, 0x0a, 0x04, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x57,
	0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x73, 0x22, 0x32, 0x0a,
	0x0e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x73, 0x22, 0x7c, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x06, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x41, 0x44, 0x41, 0x50,
	0x54, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x12, 0x2d, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x22,
	0xa4, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x33, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x04, 0x4e, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x4e, 0x6f, 0x74, 0x65,
	0x73, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x04, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x09,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xdf, 0x05, 0x0a, 0x07, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x02, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x24, 0x0a,
	0x0d, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65,
	0x49, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x15, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x57, 0x6f, 0x72,
	0x6b, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b,
	0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x4c,
	0x6f, 0x67, 0x67, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x0d, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64,
	0x73, 0x12, 0x27, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x4e,
	0x6f, 0x74, 0x65, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x0b, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x0b, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x51, 0x0a, 0x12, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x52, 0x12, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x57, 0x6f,
	0x72, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x72,
	0x6f, 0x77, 0x65, 0x72, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x47, 0x72,
	0x6f, 0x77, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x61, 0x72, 0x6d, 0x49, 0x64,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x46, 0x61, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x6f, 0x70,
	0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x72,
	0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x6e, 0x0a, 0x1b, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x1b, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xbe, 0x06, 0x0a, 0x08, 0x57, 0x6f, 0x72,
	0x6b, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x02, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x4e,
	0x6f, 0x74, 0x65, 0x73, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x52,
	0x6f, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x11, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x79, 0x65,
	0x72, 0x49, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x14, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x47, 0x75, 0x69, 0x64,
	0x61, 0x6e, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x52, 0x15, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x43,
	0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x57, 0x6f, 0x72, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x57, 0x6f, 0x72, 0x6b, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x41, 0x44,
	0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73,
	0x12, 0x4d, 0x0a, 0x10, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x41, 0x44, 0x41,
	0x50, 0x54, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x10, 0x57,
	0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x47, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x47, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x46,
	0x61, 0x72, 0x6d, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x46, 0x61, 0x72,
	0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x43, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x43, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x49, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x10, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x6e, 0x0a, 0x1b, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x1b, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x6e, 0x0a, 0x10, 0x57, 0x6f, 0x72,
	0x6b, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x5a, 0x0a,
	0x14, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x74, 0x65, 0x6c, 0x79, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x6f, 0x6f, 0x6e, 0x41, 0x73,
	0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x69,
	0x67, 0x68, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x10, 0x03,
	0x12, 0x07, 0x0a, 0x03, 0x4c, 0x6f, 0x77, 0x10, 0x04, 0x22, 0x90, 0x02, 0x0a, 0x11, 0x57, 0x6f,
	0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x41, 0x44,
	0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x41, 0x44, 0x41,
	0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3c,
	0x0a, 0x19, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x19, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x22, 0x72, 0x0a, 0x09,
	0x57, 0x6f, 0x72, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x0d, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x73,
	0x22, 0x7a, 0x0a, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x49, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65,
	0x73, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x69, 0x65, 0x73, 0x49, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x72, 0x72, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c,
	0x49, 0x72, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x73, 0x22, 0x7f, 0x0a, 0x0a,
	0x57, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x71, 0x0a, 0x0e, 0x57, 0x6f,
	0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0d, 0x0a, 0x09,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x49,
	0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x50,
	0x61, 0x75, 0x73, 0x65, 0x64, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x6c, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x03, 0x12,
	0x0d, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x04, 0x12, 0x0d,
	0x0a, 0x09, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x10, 0x05, 0x42, 0x2b, 0x5a,
	0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x61, 0x6c, 0x74,
	0x65, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x65, 0x2f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x2d, 0x67, 0x6f,
	0x2f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_Documents_proto_rawDescOnce sync.Once
	file_Documents_proto_rawDescData = file_Documents_proto_rawDesc
)

func file_Documents_proto_rawDescGZIP() []byte {
	file_Documents_proto_rawDescOnce.Do(func() {
		file_Documents_proto_rawDescData = protoimpl.X.CompressGZIP(file_Documents_proto_rawDescData)
	})
	return file_Documents_proto_rawDescData
}

var file_Documents_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_Documents_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_Documents_proto_goTypes = []interface{}{
	(DocRelationshipType_DocRelationshipTypeEnum)(0),           // 0: ADAPT.Documents.DocRelationshipType.DocRelationshipTypeEnum
	(OMCodeComponentPart_OMCodeComponentPartEnum)(0),           // 1: ADAPT.Documents.OMCodeComponentPart.OMCodeComponentPartEnum
	(OMCodeComponentValueType_OMCodeComponentValueTypeEnum)(0), // 2: ADAPT.Documents.OMCodeComponentValueType.OMCodeComponentValueTypeEnum
	(OMSemanticResourceLevel_OMSemanticResourceLevelEnum)(0),   // 3: ADAPT.Documents.OMSemanticResourceLevel.OMSemanticResourceLevelEnum
	(OMSemanticResourceStatus_OMSemanticResourceStatusEnum)(0), // 4: ADAPT.Documents.OMSemanticResourceStatus.OMSemanticResourceStatusEnum
	(WorkItemPriority_WorkItemPriorityEnum)(0),                 // 5: ADAPT.Documents.WorkItemPriority.WorkItemPriorityEnum
	(WorkStatus_WorkStatusEnum)(0),                             // 6: ADAPT.Documents.WorkStatus.WorkStatusEnum
	(*Document)(nil),                                           // 7: ADAPT.Documents.Document
	(*DocRelationshipType)(nil),                                // 8: ADAPT.Documents.DocRelationshipType
	(*DocumentCorrelation)(nil),                                // 9: ADAPT.Documents.DocumentCorrelation
	(*IrrCollection)(nil),                                      // 10: ADAPT.Documents.IrrCollection
	(*IrrItem)(nil),                                            // 11: ADAPT.Documents.IrrItem
	(*IrrRadialSpatialScope)(nil),                              // 12: ADAPT.Documents.IrrRadialSpatialScope
	(*IrrRecord)(nil),                                          // 13: ADAPT.Documents.IrrRecord
	(*IrrSectionFlow)(nil),                                     // 14: ADAPT.Documents.IrrSectionFlow
	(*IrrSpatialScope)(nil),                                    // 15: ADAPT.Documents.IrrSpatialScope
	(*MeteredValue)(nil),                                       // 16: ADAPT.Documents.MeteredValue
	(*OMCode)(nil),                                             // 17: ADAPT.Documents.OMCode
	(*OMCodeComponentPart)(nil),                                // 18: ADAPT.Documents.OMCodeComponentPart
	(*OMCodeComponentValueType)(nil),                           // 19: ADAPT.Documents.OMCodeComponentValueType
	(*OMSemanticResourceLevel)(nil),                            // 20: ADAPT.Documents.OMSemanticResourceLevel
	(*OMSemanticResourceStatus)(nil),                           // 21: ADAPT.Documents.OMSemanticResourceStatus
	(*Obs)(nil),                                                // 22: ADAPT.Documents.Obs
	(*ObsCodeComponent)(nil),                                   // 23: ADAPT.Documents.ObsCodeComponent
	(*ObsCollection)(nil),                                      // 24: ADAPT.Documents.ObsCollection
	(*ObsDataset)(nil),                                         // 25: ADAPT.Documents.ObsDataset
	(*Observations)(nil),                                       // 26: ADAPT.Documents.Observations
	(*OperationSummary)(nil),                                   // 27: ADAPT.Documents.OperationSummary
	(*Plan)(nil),                                               // 28: ADAPT.Documents.Plan
	(*Recommendation)(nil),                                     // 29: ADAPT.Documents.Recommendation
	(*StampedMeteredValues)(nil),                               // 30: ADAPT.Documents.StampedMeteredValues
	(*StatusUpdate)(nil),                                       // 31: ADAPT.Documents.StatusUpdate
	(*Summary)(nil),                                            // 32: ADAPT.Documents.Summary
	(*WorkItem)(nil),                                           // 33: ADAPT.Documents.WorkItem
	(*WorkItemPriority)(nil),                                   // 34: ADAPT.Documents.WorkItemPriority
	(*WorkItemOperation)(nil),                                  // 35: ADAPT.Documents.WorkItemOperation
	(*WorkOrder)(nil),                                          // 36: ADAPT.Documents.WorkOrder
	(*WorkRecord)(nil),                                         // 37: ADAPT.Documents.WorkRecord
	(*WorkStatus)(nil),                                         // 38: ADAPT.Documents.WorkStatus
	(*Common.CompoundIdentifier)(nil),                          // 39: ADAPT.Common.CompoundIdentifier
	(*Common.ContextItem)(nil),                                 // 40: ADAPT.Common.ContextItem
	(*Representations.NumericRepresentationValue)(nil),         // 41: ADAPT.Representations.NumericRepresentationValue
	(*Notes.Note)(nil),                                         // 42: ADAPT.Notes.Note
	(*Common.TimeScope)(nil),                                   // 43: ADAPT.Common.TimeScope
	(*Equipment.IrrFlowTag)(nil),                               // 44: ADAPT.Equipment.IrrFlowTag
	(*Shapes.Point)(nil),                                       // 45: ADAPT.Shapes.Point
	(*Equipment.IrrErrorCode)(nil),                             // 46: ADAPT.Equipment.IrrErrorCode
	(*Products.ProductUse)(nil),                                // 47: ADAPT.Products.ProductUse
	(*Shapes.MultiPolygon)(nil),                                // 48: ADAPT.Shapes.MultiPolygon
	(*Representations.RepresentationValue)(nil),                // 49: ADAPT.Representations.RepresentationValue
	(*Shapes.Shape)(nil),                                       // 50: ADAPT.Shapes.Shape
	(*Common.OperationType)(nil),                               // 51: ADAPT.Common.OperationType
	(*timestamppb.Timestamp)(nil),                              // 52: google.protobuf.Timestamp
	(*Equipment.EquipmentConfigurationGroup)(nil),              // 53: ADAPT.Equipment.EquipmentConfigurationGroup
}
var file_Documents_proto_depIdxs = []int32{
	39, // 0: ADAPT.Documents.Document.Id:type_name -> ADAPT.Common.CompoundIdentifier
	40, // 1: ADAPT.Documents.Document.ContextItems:type_name -> ADAPT.Common.ContextItem
	41, // 2: ADAPT.Documents.Document.EstimatedArea:type_name -> ADAPT.Representations.NumericRepresentationValue
	42, // 3: ADAPT.Documents.Document.Notes:type_name -> ADAPT.Notes.Note
	43, // 4: ADAPT.Documents.Document.TimeScopes:type_name -> ADAPT.Common.TimeScope
	28, // 5: ADAPT.Documents.Document.Plan:type_name -> ADAPT.Documents.Plan
	29, // 6: ADAPT.Documents.Document.Recommendation:type_name -> ADAPT.Documents.Recommendation
	36, // 7: ADAPT.Documents.Document.WorkOrder:type_name -> ADAPT.Documents.WorkOrder
	37, // 8: ADAPT.Documents.Document.WorkRecord:type_name -> ADAPT.Documents.WorkRecord
	26, // 9: ADAPT.Documents.Document.Observations:type_name -> ADAPT.Documents.Observations
	39, // 10: ADAPT.Documents.DocumentCorrelation.Id:type_name -> ADAPT.Common.CompoundIdentifier
	8,  // 11: ADAPT.Documents.DocumentCorrelation.RelationshipType:type_name -> ADAPT.Documents.DocRelationshipType
	43, // 12: ADAPT.Documents.DocumentCorrelation.TimeScopes:type_name -> ADAPT.Common.TimeScope
	39, // 13: ADAPT.Documents.IrrCollection.Id:type_name -> ADAPT.Common.CompoundIdentifier
	43, // 14: ADAPT.Documents.IrrCollection.TimeScopes:type_name -> ADAPT.Common.TimeScope
	15, // 15: ADAPT.Documents.IrrCollection.SpatialScope:type_name -> ADAPT.Documents.IrrSpatialScope
	44, // 16: ADAPT.Documents.IrrCollection.FlowTags:type_name -> ADAPT.Equipment.IrrFlowTag
	45, // 17: ADAPT.Documents.IrrCollection.RotCtr:type_name -> ADAPT.Shapes.Point
	11, // 18: ADAPT.Documents.IrrCollection.IrrItems:type_name -> ADAPT.Documents.IrrItem
	41, // 19: ADAPT.Documents.IrrCollection.Pressure:type_name -> ADAPT.Representations.NumericRepresentationValue
	41, // 20: ADAPT.Documents.IrrCollection.EstimatedEfficiency:type_name -> ADAPT.Representations.NumericRepresentationValue
	43, // 21: ADAPT.Documents.IrrItem.TimeScopes:type_name -> ADAPT.Common.TimeScope
	15, // 22: ADAPT.Documents.IrrItem.SpatialScope:type_name -> ADAPT.Documents.IrrSpatialScope
	44, // 23: ADAPT.Documents.IrrItem.FlowTags:type_name -> ADAPT.Equipment.IrrFlowTag
	45, // 24: ADAPT.Documents.IrrItem.RotCtr:type_name -> ADAPT.Shapes.Point
	14, // 25: ADAPT.Documents.IrrItem.SectionFlows:type_name -> ADAPT.Documents.IrrSectionFlow
	41, // 26: ADAPT.Documents.IrrItem.Pressure:type_name -> ADAPT.Representations.NumericRepresentationValue
	46, // 27: ADAPT.Documents.IrrItem.ErrorCode:type_name -> ADAPT.Equipment.IrrErrorCode
	41, // 28: ADAPT.Documents.IrrItem.EstimatedEfficiency:type_name -> ADAPT.Representations.NumericRepresentationValue
	41, // 29: ADAPT.Documents.IrrRadialSpatialScope.StartAngle:type_name -> ADAPT.Representations.NumericRepresentationValue
	41, // 30: ADAPT.Documents.IrrRadialSpatialScope.EndAngle:type_name -> ADAPT.Representations.NumericRepresentationValue
	39, // 31: ADAPT.Documents.IrrRecord.Id:type_name -> ADAPT.Common.CompoundIdentifier
	43, // 32: ADAPT.Documents.IrrRecord.TimeScopes:type_name -> ADAPT.Common.TimeScope
	15, // 33: ADAPT.Documents.IrrRecord.SpatialScope:type_name -> ADAPT.Documents.IrrSpatialScope
	41, // 34: ADAPT.Documents.IrrRecord.TotalArea:type_name -> ADAPT.Representations.NumericRepresentationValue
	41, // 35: ADAPT.Documents.IrrRecord.TotalWaterVolume:type_name -> ADAPT.Representations.NumericRepresentationValue
	47, // 36: ADAPT.Documents.IrrRecord.ProductUseSummaries:type_name -> ADAPT.Products.ProductUse
	42, // 37: ADAPT.Documents.IrrRecord.Notes:type_name -> ADAPT.Notes.Note
	40, // 38: ADAPT.Documents.IrrRecord.ContextItems:type_name -> ADAPT.Common.ContextItem
	41, // 39: ADAPT.Documents.IrrSectionFlow.Volume:type_name -> ADAPT.Representations.NumericRepresentationValue
	41, // 40: ADAPT.Documents.IrrSectionFlow.Depth:type_name -> ADAPT.Representations.NumericRepresentationValue
	47, // 41: ADAPT.Documents.IrrSectionFlow.ProductUses:type_name -> ADAPT.Products.ProductUse
	48, // 42: ADAPT.Documents.IrrSectionFlow.PolygonCoverage:type_name -> ADAPT.Shapes.MultiPolygon
	12, // 43: ADAPT.Documents.IrrSpatialScope.RadialScope:type_name -> ADAPT.Documents.IrrRadialSpatialScope
	48, // 44: ADAPT.Documents.IrrSpatialScope.MultiPolygonScope:type_name -> ADAPT.Shapes.MultiPolygon
	49, // 45: ADAPT.Documents.MeteredValue.Value:type_name -> ADAPT.Representations.RepresentationValue
	39, // 46: ADAPT.Documents.OMCode.Id:type_name -> ADAPT.Common.CompoundIdentifier
	40, // 47: ADAPT.Documents.OMCode.ContextItems:type_name -> ADAPT.Common.ContextItem
	39, // 48: ADAPT.Documents.Obs.Id:type_name -> ADAPT.Common.CompoundIdentifier
	23, // 49: ADAPT.Documents.Obs.CodeComponents:type_name -> ADAPT.Documents.ObsCodeComponent
	43, // 50: ADAPT.Documents.Obs.TimeScopes:type_name -> ADAPT.Common.TimeScope
	50, // 51: ADAPT.Documents.Obs.SpatialExtent:type_name -> ADAPT.Shapes.Shape
	40, // 52: ADAPT.Documents.Obs.ContextItems:type_name -> ADAPT.Common.ContextItem
	39, // 53: ADAPT.Documents.ObsCodeComponent.Id:type_name -> ADAPT.Common.CompoundIdentifier
	19, // 54: ADAPT.Documents.ObsCodeComponent.ValueType:type_name -> ADAPT.Documents.OMCodeComponentValueType
	39, // 55: ADAPT.Documents.ObsCollection.Id:type_name -> ADAPT.Common.CompoundIdentifier
	23, // 56: ADAPT.Documents.ObsCollection.CodeComponents:type_name -> ADAPT.Documents.ObsCodeComponent
	43, // 57: ADAPT.Documents.ObsCollection.TimeScopes:type_name -> ADAPT.Common.TimeScope
	50, // 58: ADAPT.Documents.ObsCollection.SpatialExtent:type_name -> ADAPT.Shapes.Shape
	40, // 59: ADAPT.Documents.ObsCollection.ContextItems:type_name -> ADAPT.Common.ContextItem
	39, // 60: ADAPT.Documents.ObsDataset.Id:type_name -> ADAPT.Common.CompoundIdentifier
	43, // 61: ADAPT.Documents.ObsDataset.TimeScopes:type_name -> ADAPT.Common.TimeScope
	40, // 62: ADAPT.Documents.ObsDataset.ContextItems:type_name -> ADAPT.Common.ContextItem
	39, // 63: ADAPT.Documents.OperationSummary.Id:type_name -> ADAPT.Common.CompoundIdentifier
	51, // 64: ADAPT.Documents.OperationSummary.OperationType:type_name -> ADAPT.Common.OperationType
	30, // 65: ADAPT.Documents.OperationSummary.Data:type_name -> ADAPT.Documents.StampedMeteredValues
	50, // 66: ADAPT.Documents.OperationSummary.CoverageShape:type_name -> ADAPT.Shapes.Shape
	40, // 67: ADAPT.Documents.OperationSummary.ContextItems:type_name -> ADAPT.Common.ContextItem
	16, // 68: ADAPT.Documents.StampedMeteredValues.Values:type_name -> ADAPT.Documents.MeteredValue
	43, // 69: ADAPT.Documents.StampedMeteredValues.Stamp:type_name -> ADAPT.Common.TimeScope
	38, // 70: ADAPT.Documents.StatusUpdate.Status:type_name -> ADAPT.Documents.WorkStatus
	42, // 71: ADAPT.Documents.StatusUpdate.Note:type_name -> ADAPT.Notes.Note
	52, // 72: ADAPT.Documents.StatusUpdate.TimeStamp:type_name -> google.protobuf.Timestamp
	39, // 73: ADAPT.Documents.Summary.Id:type_name -> ADAPT.Common.CompoundIdentifier
	43, // 74: ADAPT.Documents.Summary.TimeScopes:type_name -> ADAPT.Common.TimeScope
	42, // 75: ADAPT.Documents.Summary.Notes:type_name -> ADAPT.Notes.Note
	30, // 76: ADAPT.Documents.Summary.SummaryData:type_name -> ADAPT.Documents.StampedMeteredValues
	27, // 77: ADAPT.Documents.Summary.OperationSummaries:type_name -> ADAPT.Documents.OperationSummary
	53, // 78: ADAPT.Documents.Summary.EquipmentConfigurationGroup:type_name -> ADAPT.Equipment.EquipmentConfigurationGroup
	39, // 79: ADAPT.Documents.WorkItem.Id:type_name -> ADAPT.Common.CompoundIdentifier
	42, // 80: ADAPT.Documents.WorkItem.Notes:type_name -> ADAPT.Notes.Note
	31, // 81: ADAPT.Documents.WorkItem.StatusUpdates:type_name -> ADAPT.Documents.StatusUpdate
	43, // 82: ADAPT.Documents.WorkItem.TimeScopes:type_name -> ADAPT.Common.TimeScope
	34, // 83: ADAPT.Documents.WorkItem.WorkItemPriority:type_name -> ADAPT.Documents.WorkItemPriority
	53, // 84: ADAPT.Documents.WorkItem.EquipmentConfigurationGroup:type_name -> ADAPT.Equipment.EquipmentConfigurationGroup
	39, // 85: ADAPT.Documents.WorkItemOperation.Id:type_name -> ADAPT.Common.CompoundIdentifier
	51, // 86: ADAPT.Documents.WorkItemOperation.OperationType:type_name -> ADAPT.Common.OperationType
	31, // 87: ADAPT.Documents.WorkOrder.StatusUpdates:type_name -> ADAPT.Documents.StatusUpdate
	88, // [88:88] is the sub-list for method output_type
	88, // [88:88] is the sub-list for method input_type
	88, // [88:88] is the sub-list for extension type_name
	88, // [88:88] is the sub-list for extension extendee
	0,  // [0:88] is the sub-list for field type_name
}

func init() { file_Documents_proto_init() }
func file_Documents_proto_init() {
	if File_Documents_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_Documents_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Document); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Documents_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocRelationshipType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Documents_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentCorrelation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Documents_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrrCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Documents_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrrItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Documents_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrrRadialSpatialScope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Documents_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrrRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Documents_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrrSectionFlow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Documents_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrrSpatialScope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Documents_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeteredValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Documents_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OMCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Documents_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OMCodeComponentPart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Documents_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OMCodeComponentValueType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Documents_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OMSemanticResourceLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Documents_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OMSemanticResourceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Documents_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Obs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Documents_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObsCodeComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Documents_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObsCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Documents_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObsDataset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Documents_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Observations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Documents_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Documents_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Plan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Documents_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Recommendation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Documents_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StampedMeteredValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Documents_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Documents_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Summary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Documents_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Documents_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkItemPriority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Documents_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkItemOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Documents_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Documents_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Documents_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_Documents_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Document_Plan)(nil),
		(*Document_Recommendation)(nil),
		(*Document_WorkOrder)(nil),
		(*Document_WorkRecord)(nil),
		(*Document_Observations)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Documents_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Documents_proto_goTypes,
		DependencyIndexes: file_Documents_proto_depIdxs,
		EnumInfos:         file_Documents_proto_enumTypes,
		MessageInfos:      file_Documents_proto_msgTypes,
	}.Build()
	File_Documents_proto = out.File
	file_Documents_proto_rawDesc = nil
	file_Documents_proto_goTypes = nil
	file_Documents_proto_depIdxs = nil
}
