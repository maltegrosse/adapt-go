// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.19.6
// source: LoggedData.proto

package LoggedData

import (
	Common "github.com/maltegrosse/adapt-go/Common"
	Equipment "github.com/maltegrosse/adapt-go/Equipment"
	Notes "github.com/maltegrosse/adapt-go/Notes"
	Representations "github.com/maltegrosse/adapt-go/Representations"
	Shapes "github.com/maltegrosse/adapt-go/Shapes"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LoggingLevelEnum int32

const (
	LoggingLevelEnum_MachineType       LoggingLevelEnum = 0
	LoggingLevelEnum_SpecificMachine   LoggingLevelEnum = 1
	LoggingLevelEnum_ImplementType     LoggingLevelEnum = 2
	LoggingLevelEnum_SpecificImplement LoggingLevelEnum = 3
	LoggingLevelEnum_SpecificSection   LoggingLevelEnum = 4
	LoggingLevelEnum_SpecificMeter     LoggingLevelEnum = 5
	LoggingLevelEnum_Unspecified       LoggingLevelEnum = 6
)

// Enum value maps for LoggingLevelEnum.
var (
	LoggingLevelEnum_name = map[int32]string{
		0: "MachineType",
		1: "SpecificMachine",
		2: "ImplementType",
		3: "SpecificImplement",
		4: "SpecificSection",
		5: "SpecificMeter",
		6: "Unspecified",
	}
	LoggingLevelEnum_value = map[string]int32{
		"MachineType":       0,
		"SpecificMachine":   1,
		"ImplementType":     2,
		"SpecificImplement": 3,
		"SpecificSection":   4,
		"SpecificMeter":     5,
		"Unspecified":       6,
	}
)

func (x LoggingLevelEnum) Enum() *LoggingLevelEnum {
	p := new(LoggingLevelEnum)
	*p = x
	return p
}

func (x LoggingLevelEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoggingLevelEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_LoggedData_proto_enumTypes[0].Descriptor()
}

func (LoggingLevelEnum) Type() protoreflect.EnumType {
	return &file_LoggedData_proto_enumTypes[0]
}

func (x LoggingLevelEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoggingLevelEnum.Descriptor instead.
func (LoggingLevelEnum) EnumDescriptor() ([]byte, []int) {
	return file_LoggedData_proto_rawDescGZIP(), []int{0}
}

type LoadTypeEnum int32

const (
	LoadTypeEnum_Unknown LoadTypeEnum = 0
	LoadTypeEnum_Tank    LoadTypeEnum = 1
	LoadTypeEnum_Field   LoadTypeEnum = 2
	LoadTypeEnum_Truck   LoadTypeEnum = 3
	LoadTypeEnum_Bale    LoadTypeEnum = 4
	LoadTypeEnum_Module  LoadTypeEnum = 5
)

// Enum value maps for LoadTypeEnum.
var (
	LoadTypeEnum_name = map[int32]string{
		0: "Unknown",
		1: "Tank",
		2: "Field",
		3: "Truck",
		4: "Bale",
		5: "Module",
	}
	LoadTypeEnum_value = map[string]int32{
		"Unknown": 0,
		"Tank":    1,
		"Field":   2,
		"Truck":   3,
		"Bale":    4,
		"Module":  5,
	}
)

func (x LoadTypeEnum) Enum() *LoadTypeEnum {
	p := new(LoadTypeEnum)
	*p = x
	return p
}

func (x LoadTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoadTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_LoggedData_proto_enumTypes[1].Descriptor()
}

func (LoadTypeEnum) Type() protoreflect.EnumType {
	return &file_LoggedData_proto_enumTypes[1]
}

func (x LoadTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoadTypeEnum.Descriptor instead.
func (LoadTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_LoggedData_proto_rawDescGZIP(), []int{1}
}

type LoggingMethodEnum int32

const (
	LoggingMethodEnum_TimeInterval     LoggingMethodEnum = 0
	LoggingMethodEnum_DistanceInterval LoggingMethodEnum = 1
	LoggingMethodEnum_ThresholdLimits  LoggingMethodEnum = 2
	LoggingMethodEnum_OnChange         LoggingMethodEnum = 3
	LoggingMethodEnum_Total            LoggingMethodEnum = 4
)

// Enum value maps for LoggingMethodEnum.
var (
	LoggingMethodEnum_name = map[int32]string{
		0: "TimeInterval",
		1: "DistanceInterval",
		2: "ThresholdLimits",
		3: "OnChange",
		4: "Total",
	}
	LoggingMethodEnum_value = map[string]int32{
		"TimeInterval":     0,
		"DistanceInterval": 1,
		"ThresholdLimits":  2,
		"OnChange":         3,
		"Total":            4,
	}
)

func (x LoggingMethodEnum) Enum() *LoggingMethodEnum {
	p := new(LoggingMethodEnum)
	*p = x
	return p
}

func (x LoggingMethodEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoggingMethodEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_LoggedData_proto_enumTypes[2].Descriptor()
}

func (LoggingMethodEnum) Type() protoreflect.EnumType {
	return &file_LoggedData_proto_enumTypes[2]
}

func (x LoggingMethodEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoggingMethodEnum.Descriptor instead.
func (LoggingMethodEnum) EnumDescriptor() ([]byte, []int) {
	return file_LoggedData_proto_rawDescGZIP(), []int{2}
}

type LoggedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                          *Common.CompoundIdentifier             `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	TimeScopes                  []*Common.TimeScope                    `protobuf:"bytes,2,rep,name=TimeScopes,proto3" json:"TimeScopes,omitempty"`
	PersonRoleIds               []int64                                `protobuf:"varint,3,rep,packed,name=PersonRoleIds,proto3" json:"PersonRoleIds,omitempty"`
	GuidanceAllocationIds       []int64                                `protobuf:"varint,4,rep,packed,name=GuidanceAllocationIds,proto3" json:"GuidanceAllocationIds,omitempty"`
	WorkItemIds                 []int64                                `protobuf:"varint,5,rep,packed,name=WorkItemIds,proto3" json:"WorkItemIds,omitempty"`
	SummaryId                   int64                                  `protobuf:"varint,6,opt,name=SummaryId,proto3" json:"SummaryId,omitempty"`
	Notes                       []*Notes.Note                          `protobuf:"bytes,7,rep,name=Notes,proto3" json:"Notes,omitempty"`
	OperationData               []*OperationData                       `protobuf:"bytes,8,rep,name=OperationData,proto3" json:"OperationData,omitempty"`
	WorkRecordId                int64                                  `protobuf:"varint,15,opt,name=WorkRecordId,proto3" json:"WorkRecordId,omitempty"`
	GrowerId                    int64                                  `protobuf:"varint,16,opt,name=GrowerId,proto3" json:"GrowerId,omitempty"`
	FarmId                      int64                                  `protobuf:"varint,17,opt,name=FarmId,proto3" json:"FarmId,omitempty"`
	FieldId                     int64                                  `protobuf:"varint,18,opt,name=FieldId,proto3" json:"FieldId,omitempty"`
	CropZoneId                  int64                                  `protobuf:"varint,19,opt,name=CropZoneId,proto3" json:"CropZoneId,omitempty"`
	EquipmentConfigurationGroup *Equipment.EquipmentConfigurationGroup `protobuf:"bytes,20,opt,name=EquipmentConfigurationGroup,proto3" json:"EquipmentConfigurationGroup,omitempty"`
	Description                 string                                 `protobuf:"bytes,21,opt,name=Description,proto3" json:"Description,omitempty"`
	CalibrationFactors          []*CalibrationFactor                   `protobuf:"bytes,22,rep,name=CalibrationFactors,proto3" json:"CalibrationFactors,omitempty"`
}

func (x *LoggedData) Reset() {
	*x = LoggedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LoggedData_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoggedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggedData) ProtoMessage() {}

func (x *LoggedData) ProtoReflect() protoreflect.Message {
	mi := &file_LoggedData_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggedData.ProtoReflect.Descriptor instead.
func (*LoggedData) Descriptor() ([]byte, []int) {
	return file_LoggedData_proto_rawDescGZIP(), []int{0}
}

func (x *LoggedData) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *LoggedData) GetTimeScopes() []*Common.TimeScope {
	if x != nil {
		return x.TimeScopes
	}
	return nil
}

func (x *LoggedData) GetPersonRoleIds() []int64 {
	if x != nil {
		return x.PersonRoleIds
	}
	return nil
}

func (x *LoggedData) GetGuidanceAllocationIds() []int64 {
	if x != nil {
		return x.GuidanceAllocationIds
	}
	return nil
}

func (x *LoggedData) GetWorkItemIds() []int64 {
	if x != nil {
		return x.WorkItemIds
	}
	return nil
}

func (x *LoggedData) GetSummaryId() int64 {
	if x != nil {
		return x.SummaryId
	}
	return 0
}

func (x *LoggedData) GetNotes() []*Notes.Note {
	if x != nil {
		return x.Notes
	}
	return nil
}

func (x *LoggedData) GetOperationData() []*OperationData {
	if x != nil {
		return x.OperationData
	}
	return nil
}

func (x *LoggedData) GetWorkRecordId() int64 {
	if x != nil {
		return x.WorkRecordId
	}
	return 0
}

func (x *LoggedData) GetGrowerId() int64 {
	if x != nil {
		return x.GrowerId
	}
	return 0
}

func (x *LoggedData) GetFarmId() int64 {
	if x != nil {
		return x.FarmId
	}
	return 0
}

func (x *LoggedData) GetFieldId() int64 {
	if x != nil {
		return x.FieldId
	}
	return 0
}

func (x *LoggedData) GetCropZoneId() int64 {
	if x != nil {
		return x.CropZoneId
	}
	return 0
}

func (x *LoggedData) GetEquipmentConfigurationGroup() *Equipment.EquipmentConfigurationGroup {
	if x != nil {
		return x.EquipmentConfigurationGroup
	}
	return nil
}

func (x *LoggedData) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *LoggedData) GetCalibrationFactors() []*CalibrationFactor {
	if x != nil {
		return x.CalibrationFactors
	}
	return nil
}

type CalibrationFactor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              *Common.CompoundIdentifier                  `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	MeterId         int64                                       `protobuf:"varint,2,opt,name=MeterId,proto3" json:"MeterId,omitempty"`
	TimeScopeIds    []int64                                     `protobuf:"varint,3,rep,packed,name=TimeScopeIds,proto3" json:"TimeScopeIds,omitempty"`
	Value           *Representations.NumericRepresentationValue `protobuf:"bytes,4,opt,name=Value,proto3" json:"Value,omitempty"`
	OperationDataId int64                                       `protobuf:"varint,5,opt,name=OperationDataId,proto3" json:"OperationDataId,omitempty"`
}

func (x *CalibrationFactor) Reset() {
	*x = CalibrationFactor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LoggedData_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalibrationFactor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalibrationFactor) ProtoMessage() {}

func (x *CalibrationFactor) ProtoReflect() protoreflect.Message {
	mi := &file_LoggedData_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalibrationFactor.ProtoReflect.Descriptor instead.
func (*CalibrationFactor) Descriptor() ([]byte, []int) {
	return file_LoggedData_proto_rawDescGZIP(), []int{1}
}

func (x *CalibrationFactor) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CalibrationFactor) GetMeterId() int64 {
	if x != nil {
		return x.MeterId
	}
	return 0
}

func (x *CalibrationFactor) GetTimeScopeIds() []int64 {
	if x != nil {
		return x.TimeScopeIds
	}
	return nil
}

func (x *CalibrationFactor) GetValue() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *CalibrationFactor) GetOperationDataId() int64 {
	if x != nil {
		return x.OperationDataId
	}
	return 0
}

type DataLogTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        *Common.CompoundIdentifier                  `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	DataLogMethods            []LoggingMethodEnum                         `protobuf:"varint,2,rep,packed,name=DataLogMethods,proto3,enum=ADAPT.LoggedData.LoggingMethodEnum" json:"DataLogMethods,omitempty"`
	DataLogDistanceInterval   *Representations.NumericRepresentationValue `protobuf:"bytes,3,opt,name=DataLogDistanceInterval,proto3" json:"DataLogDistanceInterval,omitempty"`
	DataLogTimeInterval       *Representations.NumericRepresentationValue `protobuf:"bytes,4,opt,name=DataLogTimeInterval,proto3" json:"DataLogTimeInterval,omitempty"`
	DataLogThresholdMinimum   *Representations.NumericRepresentationValue `protobuf:"bytes,5,opt,name=DataLogThresholdMinimum,proto3" json:"DataLogThresholdMinimum,omitempty"`
	DataLogThresholdMaximum   *Representations.NumericRepresentationValue `protobuf:"bytes,6,opt,name=DataLogThresholdMaximum,proto3" json:"DataLogThresholdMaximum,omitempty"`
	DataLogThresholdChange    *Representations.NumericRepresentationValue `protobuf:"bytes,7,opt,name=DataLogThresholdChange,proto3" json:"DataLogThresholdChange,omitempty"`
	ContextItems              []*Common.ContextItem                       `protobuf:"bytes,8,rep,name=ContextItems,proto3" json:"ContextItems,omitempty"`
	LoggingLevel              LoggingLevelEnum                            `protobuf:"varint,9,opt,name=LoggingLevel,proto3,enum=ADAPT.LoggedData.LoggingLevelEnum" json:"LoggingLevel,omitempty"`
	Representation            *Representations.Representation             `protobuf:"bytes,10,opt,name=Representation,proto3" json:"Representation,omitempty"`
	RequestDefaultProcessData bool                                        `protobuf:"varint,11,opt,name=RequestDefaultProcessData,proto3" json:"RequestDefaultProcessData,omitempty"`
	DeviceElementId           int64                                       `protobuf:"varint,12,opt,name=DeviceElementId,proto3" json:"DeviceElementId,omitempty"`
}

func (x *DataLogTrigger) Reset() {
	*x = DataLogTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LoggedData_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataLogTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataLogTrigger) ProtoMessage() {}

func (x *DataLogTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_LoggedData_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataLogTrigger.ProtoReflect.Descriptor instead.
func (*DataLogTrigger) Descriptor() ([]byte, []int) {
	return file_LoggedData_proto_rawDescGZIP(), []int{2}
}

func (x *DataLogTrigger) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DataLogTrigger) GetDataLogMethods() []LoggingMethodEnum {
	if x != nil {
		return x.DataLogMethods
	}
	return nil
}

func (x *DataLogTrigger) GetDataLogDistanceInterval() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.DataLogDistanceInterval
	}
	return nil
}

func (x *DataLogTrigger) GetDataLogTimeInterval() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.DataLogTimeInterval
	}
	return nil
}

func (x *DataLogTrigger) GetDataLogThresholdMinimum() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.DataLogThresholdMinimum
	}
	return nil
}

func (x *DataLogTrigger) GetDataLogThresholdMaximum() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.DataLogThresholdMaximum
	}
	return nil
}

func (x *DataLogTrigger) GetDataLogThresholdChange() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.DataLogThresholdChange
	}
	return nil
}

func (x *DataLogTrigger) GetContextItems() []*Common.ContextItem {
	if x != nil {
		return x.ContextItems
	}
	return nil
}

func (x *DataLogTrigger) GetLoggingLevel() LoggingLevelEnum {
	if x != nil {
		return x.LoggingLevel
	}
	return LoggingLevelEnum_MachineType
}

func (x *DataLogTrigger) GetRepresentation() *Representations.Representation {
	if x != nil {
		return x.Representation
	}
	return nil
}

func (x *DataLogTrigger) GetRequestDefaultProcessData() bool {
	if x != nil {
		return x.RequestDefaultProcessData
	}
	return false
}

func (x *DataLogTrigger) GetDeviceElementId() int64 {
	if x != nil {
		return x.DeviceElementId
	}
	return 0
}

type EnumeratedWorkingData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValueCodes []int64 `protobuf:"varint,1,rep,packed,name=ValueCodes,proto3" json:"ValueCodes,omitempty"`
}

func (x *EnumeratedWorkingData) Reset() {
	*x = EnumeratedWorkingData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LoggedData_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnumeratedWorkingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumeratedWorkingData) ProtoMessage() {}

func (x *EnumeratedWorkingData) ProtoReflect() protoreflect.Message {
	mi := &file_LoggedData_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumeratedWorkingData.ProtoReflect.Descriptor instead.
func (*EnumeratedWorkingData) Descriptor() ([]byte, []int) {
	return file_LoggedData_proto_rawDescGZIP(), []int{3}
}

func (x *EnumeratedWorkingData) GetValueCodes() []int64 {
	if x != nil {
		return x.ValueCodes
	}
	return nil
}

type Load struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              *Common.CompoundIdentifier                  `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Description     string                                      `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	TimeScopes      []*Common.TimeScope                         `protobuf:"bytes,3,rep,name=TimeScopes,proto3" json:"TimeScopes,omitempty"`
	LoadNumber      string                                      `protobuf:"bytes,4,opt,name=LoadNumber,proto3" json:"LoadNumber,omitempty"`
	LoadType        LoadTypeEnum                                `protobuf:"varint,5,opt,name=LoadType,proto3,enum=ADAPT.LoggedData.LoadTypeEnum" json:"LoadType,omitempty"`
	LoadQuantity    *Representations.NumericRepresentationValue `protobuf:"bytes,6,opt,name=LoadQuantity,proto3" json:"LoadQuantity,omitempty"`
	DestinationIds  []int64                                     `protobuf:"varint,7,rep,packed,name=DestinationIds,proto3" json:"DestinationIds,omitempty"`
	ContextItems    []*Common.ContextItem                       `protobuf:"bytes,8,rep,name=ContextItems,proto3" json:"ContextItems,omitempty"`
	ObservationsId  int64                                       `protobuf:"varint,9,opt,name=ObservationsId,proto3" json:"ObservationsId,omitempty"`    // 20190430 Added O&M support
	ObsCollectionId int64                                       `protobuf:"varint,10,opt,name=ObsCollectionId,proto3" json:"ObsCollectionId,omitempty"` // 20190819 Added reference to a specific ObsCollection to hold this load's observations
}

func (x *Load) Reset() {
	*x = Load{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LoggedData_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Load) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Load) ProtoMessage() {}

func (x *Load) ProtoReflect() protoreflect.Message {
	mi := &file_LoggedData_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Load.ProtoReflect.Descriptor instead.
func (*Load) Descriptor() ([]byte, []int) {
	return file_LoggedData_proto_rawDescGZIP(), []int{4}
}

func (x *Load) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Load) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Load) GetTimeScopes() []*Common.TimeScope {
	if x != nil {
		return x.TimeScopes
	}
	return nil
}

func (x *Load) GetLoadNumber() string {
	if x != nil {
		return x.LoadNumber
	}
	return ""
}

func (x *Load) GetLoadType() LoadTypeEnum {
	if x != nil {
		return x.LoadType
	}
	return LoadTypeEnum_Unknown
}

func (x *Load) GetLoadQuantity() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.LoadQuantity
	}
	return nil
}

func (x *Load) GetDestinationIds() []int64 {
	if x != nil {
		return x.DestinationIds
	}
	return nil
}

func (x *Load) GetContextItems() []*Common.ContextItem {
	if x != nil {
		return x.ContextItems
	}
	return nil
}

func (x *Load) GetObservationsId() int64 {
	if x != nil {
		return x.ObservationsId
	}
	return 0
}

func (x *Load) GetObsCollectionId() int64 {
	if x != nil {
		return x.ObsCollectionId
	}
	return 0
}

type NumericWorkingData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnitOfMeasure *Common.UnitOfMeasure `protobuf:"bytes,1,opt,name=UnitOfMeasure,proto3" json:"UnitOfMeasure,omitempty"`
	Values        []float64             `protobuf:"fixed64,2,rep,packed,name=Values,proto3" json:"Values,omitempty"`
}

func (x *NumericWorkingData) Reset() {
	*x = NumericWorkingData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LoggedData_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumericWorkingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumericWorkingData) ProtoMessage() {}

func (x *NumericWorkingData) ProtoReflect() protoreflect.Message {
	mi := &file_LoggedData_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumericWorkingData.ProtoReflect.Descriptor instead.
func (*NumericWorkingData) Descriptor() ([]byte, []int) {
	return file_LoggedData_proto_rawDescGZIP(), []int{5}
}

func (x *NumericWorkingData) GetUnitOfMeasure() *Common.UnitOfMeasure {
	if x != nil {
		return x.UnitOfMeasure
	}
	return nil
}

func (x *NumericWorkingData) GetValues() []float64 {
	if x != nil {
		return x.Values
	}
	return nil
}

type OperationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                         *Common.CompoundIdentifier    `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	LoadId                     int64                         `protobuf:"varint,2,opt,name=LoadId,proto3" json:"LoadId,omitempty"`
	OperationType              *Common.OperationType         `protobuf:"bytes,3,opt,name=OperationType,proto3" json:"OperationType,omitempty"`
	PrescriptionId             int64                         `protobuf:"varint,4,opt,name=PrescriptionId,proto3" json:"PrescriptionId,omitempty"`
	ProductIds                 []int64                       `protobuf:"varint,5,rep,packed,name=ProductIds,proto3" json:"ProductIds,omitempty"`
	VarietyLocatorId           int64                         `protobuf:"varint,6,opt,name=VarietyLocatorId,proto3" json:"VarietyLocatorId,omitempty"`
	WorkItemOperationId        int64                         `protobuf:"varint,7,opt,name=WorkItemOperationId,proto3" json:"WorkItemOperationId,omitempty"`
	MaxDepth                   int64                         `protobuf:"varint,8,opt,name=MaxDepth,proto3" json:"MaxDepth,omitempty"`
	SpatialRecordCount         int64                         `protobuf:"varint,9,opt,name=SpatialRecordCount,proto3" json:"SpatialRecordCount,omitempty"`
	EquipmentConfigurationIds  []int64                       `protobuf:"varint,10,rep,packed,name=EquipmentConfigurationIds,proto3" json:"EquipmentConfigurationIds,omitempty"`
	Description                string                        `protobuf:"bytes,11,opt,name=Description,proto3" json:"Description,omitempty"`
	CoincidentOperationDataIds []int64                       `protobuf:"varint,12,rep,packed,name=CoincidentOperationDataIds,proto3" json:"CoincidentOperationDataIds,omitempty"`
	ContextItems               []*Common.ContextItem         `protobuf:"bytes,13,rep,name=ContextItems,proto3" json:"ContextItems,omitempty"`
	SpatialRecords             []*SpatialRecord              `protobuf:"bytes,14,rep,name=SpatialRecords,proto3" json:"SpatialRecords,omitempty"`
	DeviceElementUses          []*Equipment.DeviceElementUse `protobuf:"bytes,15,rep,name=DeviceElementUses,proto3" json:"DeviceElementUses,omitempty"`
}

func (x *OperationData) Reset() {
	*x = OperationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LoggedData_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationData) ProtoMessage() {}

func (x *OperationData) ProtoReflect() protoreflect.Message {
	mi := &file_LoggedData_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationData.ProtoReflect.Descriptor instead.
func (*OperationData) Descriptor() ([]byte, []int) {
	return file_LoggedData_proto_rawDescGZIP(), []int{6}
}

func (x *OperationData) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *OperationData) GetLoadId() int64 {
	if x != nil {
		return x.LoadId
	}
	return 0
}

func (x *OperationData) GetOperationType() *Common.OperationType {
	if x != nil {
		return x.OperationType
	}
	return nil
}

func (x *OperationData) GetPrescriptionId() int64 {
	if x != nil {
		return x.PrescriptionId
	}
	return 0
}

func (x *OperationData) GetProductIds() []int64 {
	if x != nil {
		return x.ProductIds
	}
	return nil
}

func (x *OperationData) GetVarietyLocatorId() int64 {
	if x != nil {
		return x.VarietyLocatorId
	}
	return 0
}

func (x *OperationData) GetWorkItemOperationId() int64 {
	if x != nil {
		return x.WorkItemOperationId
	}
	return 0
}

func (x *OperationData) GetMaxDepth() int64 {
	if x != nil {
		return x.MaxDepth
	}
	return 0
}

func (x *OperationData) GetSpatialRecordCount() int64 {
	if x != nil {
		return x.SpatialRecordCount
	}
	return 0
}

func (x *OperationData) GetEquipmentConfigurationIds() []int64 {
	if x != nil {
		return x.EquipmentConfigurationIds
	}
	return nil
}

func (x *OperationData) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *OperationData) GetCoincidentOperationDataIds() []int64 {
	if x != nil {
		return x.CoincidentOperationDataIds
	}
	return nil
}

func (x *OperationData) GetContextItems() []*Common.ContextItem {
	if x != nil {
		return x.ContextItems
	}
	return nil
}

func (x *OperationData) GetSpatialRecords() []*SpatialRecord {
	if x != nil {
		return x.SpatialRecords
	}
	return nil
}

func (x *OperationData) GetDeviceElementUses() []*Equipment.DeviceElementUse {
	if x != nil {
		return x.DeviceElementUses
	}
	return nil
}

type SectionSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     *Common.CompoundIdentifier                  `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	SectionId              int64                                       `protobuf:"varint,2,opt,name=SectionId,proto3" json:"SectionId,omitempty"`
	TotalDistanceTravelled *Representations.NumericRepresentationValue `protobuf:"bytes,3,opt,name=TotalDistanceTravelled,proto3" json:"TotalDistanceTravelled,omitempty"`
	TotalElapsedTime       *Representations.NumericRepresentationValue `protobuf:"bytes,4,opt,name=TotalElapsedTime,proto3" json:"TotalElapsedTime,omitempty"`
}

func (x *SectionSummary) Reset() {
	*x = SectionSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LoggedData_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SectionSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SectionSummary) ProtoMessage() {}

func (x *SectionSummary) ProtoReflect() protoreflect.Message {
	mi := &file_LoggedData_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SectionSummary.ProtoReflect.Descriptor instead.
func (*SectionSummary) Descriptor() ([]byte, []int) {
	return file_LoggedData_proto_rawDescGZIP(), []int{7}
}

func (x *SectionSummary) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SectionSummary) GetSectionId() int64 {
	if x != nil {
		return x.SectionId
	}
	return 0
}

func (x *SectionSummary) GetTotalDistanceTravelled() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.TotalDistanceTravelled
	}
	return nil
}

func (x *SectionSummary) GetTotalElapsedTime() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.TotalElapsedTime
	}
	return nil
}

type SpatialRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Geometry             *Shapes.Shape                                  `protobuf:"bytes,1,opt,name=Geometry,proto3" json:"Geometry,omitempty"`
	Timestamp            *timestamppb.Timestamp                         `protobuf:"bytes,2,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	MeterValues          map[int32]*Representations.RepresentationValue `protobuf:"bytes,3,rep,name=MeterValues,proto3" json:"MeterValues,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AppliedLatencyValues map[int32]int32                                `protobuf:"bytes,4,rep,name=AppliedLatencyValues,proto3" json:"AppliedLatencyValues,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	SignalType           *Representations.RepresentationValue           `protobuf:"bytes,5,opt,name=SignalType,proto3" json:"SignalType,omitempty"`
}

func (x *SpatialRecord) Reset() {
	*x = SpatialRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LoggedData_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpatialRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpatialRecord) ProtoMessage() {}

func (x *SpatialRecord) ProtoReflect() protoreflect.Message {
	mi := &file_LoggedData_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpatialRecord.ProtoReflect.Descriptor instead.
func (*SpatialRecord) Descriptor() ([]byte, []int) {
	return file_LoggedData_proto_rawDescGZIP(), []int{8}
}

func (x *SpatialRecord) GetGeometry() *Shapes.Shape {
	if x != nil {
		return x.Geometry
	}
	return nil
}

func (x *SpatialRecord) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *SpatialRecord) GetMeterValues() map[int32]*Representations.RepresentationValue {
	if x != nil {
		return x.MeterValues
	}
	return nil
}

func (x *SpatialRecord) GetAppliedLatencyValues() map[int32]int32 {
	if x != nil {
		return x.AppliedLatencyValues
	}
	return nil
}

func (x *SpatialRecord) GetSignalType() *Representations.RepresentationValue {
	if x != nil {
		return x.SignalType
	}
	return nil
}

type WorkingData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 *Common.CompoundIdentifier           `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	DeviceElementUseId int64                                `protobuf:"varint,2,opt,name=DeviceElementUseId,proto3" json:"DeviceElementUseId,omitempty"`
	Representation     *Representations.Representation      `protobuf:"bytes,3,opt,name=Representation,proto3" json:"Representation,omitempty"`
	AppliedLatency     *Representations.RepresentationValue `protobuf:"bytes,4,opt,name=AppliedLatency,proto3" json:"AppliedLatency,omitempty"`
	ReportedLatency    *Representations.RepresentationValue `protobuf:"bytes,5,opt,name=ReportedLatency,proto3" json:"ReportedLatency,omitempty"`
	// Types that are assignable to Subtype:
	//
	//	*WorkingData_EnumeratedWorkingData
	//	*WorkingData_NumericWorkingData
	Subtype isWorkingData_Subtype `protobuf_oneof:"subtype"`
}

func (x *WorkingData) Reset() {
	*x = WorkingData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_LoggedData_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkingData) ProtoMessage() {}

func (x *WorkingData) ProtoReflect() protoreflect.Message {
	mi := &file_LoggedData_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkingData.ProtoReflect.Descriptor instead.
func (*WorkingData) Descriptor() ([]byte, []int) {
	return file_LoggedData_proto_rawDescGZIP(), []int{9}
}

func (x *WorkingData) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *WorkingData) GetDeviceElementUseId() int64 {
	if x != nil {
		return x.DeviceElementUseId
	}
	return 0
}

func (x *WorkingData) GetRepresentation() *Representations.Representation {
	if x != nil {
		return x.Representation
	}
	return nil
}

func (x *WorkingData) GetAppliedLatency() *Representations.RepresentationValue {
	if x != nil {
		return x.AppliedLatency
	}
	return nil
}

func (x *WorkingData) GetReportedLatency() *Representations.RepresentationValue {
	if x != nil {
		return x.ReportedLatency
	}
	return nil
}

func (m *WorkingData) GetSubtype() isWorkingData_Subtype {
	if m != nil {
		return m.Subtype
	}
	return nil
}

func (x *WorkingData) GetEnumeratedWorkingData() *EnumeratedWorkingData {
	if x, ok := x.GetSubtype().(*WorkingData_EnumeratedWorkingData); ok {
		return x.EnumeratedWorkingData
	}
	return nil
}

func (x *WorkingData) GetNumericWorkingData() *NumericWorkingData {
	if x, ok := x.GetSubtype().(*WorkingData_NumericWorkingData); ok {
		return x.NumericWorkingData
	}
	return nil
}

type isWorkingData_Subtype interface {
	isWorkingData_Subtype()
}

type WorkingData_EnumeratedWorkingData struct {
	EnumeratedWorkingData *EnumeratedWorkingData `protobuf:"bytes,101,opt,name=EnumeratedWorkingData,proto3,oneof"`
}

type WorkingData_NumericWorkingData struct {
	NumericWorkingData *NumericWorkingData `protobuf:"bytes,102,opt,name=NumericWorkingData,proto3,oneof"`
}

func (*WorkingData_EnumeratedWorkingData) isWorkingData_Subtype() {}

func (*WorkingData_NumericWorkingData) isWorkingData_Subtype() {}

var File_LoggedData_proto protoreflect.FileDescriptor

var file_LoggedData_proto_rawDesc = []byte{
	0x0a, 0x10, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x10, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x1a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0b, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0f, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x15, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x53, 0x68, 0x61, 0x70, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfc, 0x05, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x67, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x02, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x41, 0x44,
	0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52,
	0x6f, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e,
	0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x15, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x05,
	0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x41, 0x44,
	0x41, 0x50, 0x54, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x05,
	0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x41,
	0x44, 0x41, 0x50, 0x54, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c,
	0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x47, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x64, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x47, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x46, 0x61, 0x72, 0x6d, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x46, 0x61,
	0x72, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x43, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x43, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x6e,
	0x0a, 0x1b, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x1b, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x20,
	0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x53, 0x0a, 0x12, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x41,
	0x44, 0x41, 0x50, 0x54, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x12, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0xf6, 0x01, 0x0a, 0x11, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x4d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x73, 0x12, 0x47, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41,
	0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x22, 0xe4,
	0x07, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x67, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x67, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x41, 0x44,
	0x41, 0x50, 0x54, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x45, 0x6e, 0x75, 0x6d,
	0x52, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73,
	0x12, 0x6b, 0x0a, 0x17, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x67, 0x44, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69,
	0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x67, 0x44, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x63, 0x0a,
	0x13, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41,
	0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x44,
	0x61, 0x74, 0x61, 0x4c, 0x6f, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x6b, 0x0a, 0x17, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x67, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65,
	0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x67, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12,
	0x6b, 0x0a, 0x17, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63,
	0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x17, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x67, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x69, 0x0a, 0x16,
	0x44, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41,
	0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x16, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x67, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x46, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x41,
	0x44, 0x41, 0x50, 0x54, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x6e, 0x75, 0x6d,
	0x52, 0x0c, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x4d,
	0x0a, 0x0e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52,
	0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52,
	0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x52,
	0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a,
	0x19, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x19, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x0f, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x15, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e,
	0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xff,
	0x03, 0x0a, 0x04, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0a, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x6f, 0x61, 0x64, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4c, 0x6f, 0x61, 0x64, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x08, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x4c,
	0x6f, 0x67, 0x67, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x55, 0x0a, 0x0c, 0x4c, 0x6f, 0x61, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52,
	0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e,
	0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x4c, 0x6f, 0x61, 0x64, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x0e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12,
	0x3d, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x26,
	0x0a, 0x0e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x4f, 0x62, 0x73, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x4f, 0x62, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0x6f, 0x0a, 0x12, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x57, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x0d, 0x55, 0x6e, 0x69, 0x74, 0x4f, 0x66,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x6e, 0x69,
	0x74, 0x4f, 0x66, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x0d, 0x55, 0x6e, 0x69, 0x74,
	0x4f, 0x66, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x01, 0x52, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x22, 0x87, 0x06, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x02, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x12, 0x41, 0x0a,
	0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x56, 0x61, 0x72, 0x69,
	0x65, 0x74, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x13, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x78, 0x44, 0x65, 0x70,
	0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4d, 0x61, 0x78, 0x44, 0x65, 0x70,
	0x74, 0x68, 0x12, 0x2e, 0x0a, 0x12, 0x53, 0x70, 0x61, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x53, 0x70, 0x61, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x03, 0x52, 0x19, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x1a, 0x43, 0x6f, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x03, 0x52, 0x1a, 0x43, 0x6f, 0x69, 0x6e, 0x63, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x49,
	0x64, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x12, 0x47, 0x0a, 0x0e, 0x53, 0x70, 0x61, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x41, 0x44, 0x41, 0x50,
	0x54, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x70, 0x61,
	0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0e, 0x53, 0x70, 0x61, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x4f, 0x0a, 0x11, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x73, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x52, 0x11, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x73, 0x22, 0xaa, 0x02, 0x0a, 0x0e,
	0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x30,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x41, 0x44, 0x41,
	0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75,
	0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x69,
	0x0a, 0x16, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54,
	0x72, 0x61, 0x76, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x16, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x5d, 0x0a, 0x10, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x45, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65,
	0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6c, 0x61,
	0x70, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xbe, 0x04, 0x0a, 0x0d, 0x53, 0x70, 0x61,
	0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x2f, 0x0a, 0x08, 0x47, 0x65,
	0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x41,
	0x44, 0x41, 0x50, 0x54, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x70,
	0x65, 0x52, 0x08, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x52, 0x0a, 0x0b, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x41, 0x44, 0x41,
	0x50, 0x54, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x70,
	0x61, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4d, 0x65, 0x74, 0x65,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x4d, 0x65,
	0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x6d, 0x0a, 0x14, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e,
	0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x70, 0x61, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x14, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x4c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0a, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x41,
	0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x1a, 0x6a, 0x0a, 0x10, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x41, 0x44, 0x41, 0x50,
	0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x47, 0x0a, 0x19, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x4c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xac, 0x04, 0x0a, 0x0b, 0x57, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x0e, 0x52,
	0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x52, 0x65, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x0e, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x54,
	0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e,
	0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x5f, 0x0a, 0x15, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x18, 0x65, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x4c, 0x6f, 0x67, 0x67,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x15,
	0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e,
	0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x56, 0x0a, 0x12, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63,
	0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x18, 0x66, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x57, 0x6f, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x12, 0x4e, 0x75, 0x6d, 0x65, 0x72,
	0x69, 0x63, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x42, 0x09, 0x0a,
	0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x2a, 0x9b, 0x01, 0x0a, 0x10, 0x4c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a,
	0x0b, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x13,
	0x0a, 0x0f, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x03, 0x12, 0x13, 0x0a,
	0x0f, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x4d, 0x65,
	0x74, 0x65, 0x72, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x10, 0x06, 0x2a, 0x51, 0x0a, 0x0c, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x61, 0x6e, 0x6b, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x72, 0x75, 0x63,
	0x6b, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x61, 0x6c, 0x65, 0x10, 0x04, 0x12, 0x0a, 0x0a,
	0x06, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x10, 0x05, 0x2a, 0x69, 0x0a, 0x11, 0x4c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x10,
	0x0a, 0x0c, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x10, 0x00,
	0x12, 0x14, 0x0a, 0x10, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4f,
	0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x10, 0x04, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6d, 0x61, 0x6c, 0x74, 0x65, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x65, 0x2f, 0x61,
	0x64, 0x61, 0x70, 0x74, 0x2d, 0x67, 0x6f, 0x2f, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_LoggedData_proto_rawDescOnce sync.Once
	file_LoggedData_proto_rawDescData = file_LoggedData_proto_rawDesc
)

func file_LoggedData_proto_rawDescGZIP() []byte {
	file_LoggedData_proto_rawDescOnce.Do(func() {
		file_LoggedData_proto_rawDescData = protoimpl.X.CompressGZIP(file_LoggedData_proto_rawDescData)
	})
	return file_LoggedData_proto_rawDescData
}

var file_LoggedData_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_LoggedData_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_LoggedData_proto_goTypes = []interface{}{
	(LoggingLevelEnum)(0),             // 0: ADAPT.LoggedData.LoggingLevelEnum
	(LoadTypeEnum)(0),                 // 1: ADAPT.LoggedData.LoadTypeEnum
	(LoggingMethodEnum)(0),            // 2: ADAPT.LoggedData.LoggingMethodEnum
	(*LoggedData)(nil),                // 3: ADAPT.LoggedData.LoggedData
	(*CalibrationFactor)(nil),         // 4: ADAPT.LoggedData.CalibrationFactor
	(*DataLogTrigger)(nil),            // 5: ADAPT.LoggedData.DataLogTrigger
	(*EnumeratedWorkingData)(nil),     // 6: ADAPT.LoggedData.EnumeratedWorkingData
	(*Load)(nil),                      // 7: ADAPT.LoggedData.Load
	(*NumericWorkingData)(nil),        // 8: ADAPT.LoggedData.NumericWorkingData
	(*OperationData)(nil),             // 9: ADAPT.LoggedData.OperationData
	(*SectionSummary)(nil),            // 10: ADAPT.LoggedData.SectionSummary
	(*SpatialRecord)(nil),             // 11: ADAPT.LoggedData.SpatialRecord
	(*WorkingData)(nil),               // 12: ADAPT.LoggedData.WorkingData
	nil,                               // 13: ADAPT.LoggedData.SpatialRecord.MeterValuesEntry
	nil,                               // 14: ADAPT.LoggedData.SpatialRecord.AppliedLatencyValuesEntry
	(*Common.CompoundIdentifier)(nil), // 15: ADAPT.Common.CompoundIdentifier
	(*Common.TimeScope)(nil),          // 16: ADAPT.Common.TimeScope
	(*Notes.Note)(nil),                // 17: ADAPT.Notes.Note
	(*Equipment.EquipmentConfigurationGroup)(nil),      // 18: ADAPT.Equipment.EquipmentConfigurationGroup
	(*Representations.NumericRepresentationValue)(nil), // 19: ADAPT.Representations.NumericRepresentationValue
	(*Common.ContextItem)(nil),                         // 20: ADAPT.Common.ContextItem
	(*Representations.Representation)(nil),             // 21: ADAPT.Representations.Representation
	(*Common.UnitOfMeasure)(nil),                       // 22: ADAPT.Common.UnitOfMeasure
	(*Common.OperationType)(nil),                       // 23: ADAPT.Common.OperationType
	(*Equipment.DeviceElementUse)(nil),                 // 24: ADAPT.Equipment.DeviceElementUse
	(*Shapes.Shape)(nil),                               // 25: ADAPT.Shapes.Shape
	(*timestamppb.Timestamp)(nil),                      // 26: google.protobuf.Timestamp
	(*Representations.RepresentationValue)(nil),        // 27: ADAPT.Representations.RepresentationValue
}
var file_LoggedData_proto_depIdxs = []int32{
	15, // 0: ADAPT.LoggedData.LoggedData.Id:type_name -> ADAPT.Common.CompoundIdentifier
	16, // 1: ADAPT.LoggedData.LoggedData.TimeScopes:type_name -> ADAPT.Common.TimeScope
	17, // 2: ADAPT.LoggedData.LoggedData.Notes:type_name -> ADAPT.Notes.Note
	9,  // 3: ADAPT.LoggedData.LoggedData.OperationData:type_name -> ADAPT.LoggedData.OperationData
	18, // 4: ADAPT.LoggedData.LoggedData.EquipmentConfigurationGroup:type_name -> ADAPT.Equipment.EquipmentConfigurationGroup
	4,  // 5: ADAPT.LoggedData.LoggedData.CalibrationFactors:type_name -> ADAPT.LoggedData.CalibrationFactor
	15, // 6: ADAPT.LoggedData.CalibrationFactor.Id:type_name -> ADAPT.Common.CompoundIdentifier
	19, // 7: ADAPT.LoggedData.CalibrationFactor.Value:type_name -> ADAPT.Representations.NumericRepresentationValue
	15, // 8: ADAPT.LoggedData.DataLogTrigger.Id:type_name -> ADAPT.Common.CompoundIdentifier
	2,  // 9: ADAPT.LoggedData.DataLogTrigger.DataLogMethods:type_name -> ADAPT.LoggedData.LoggingMethodEnum
	19, // 10: ADAPT.LoggedData.DataLogTrigger.DataLogDistanceInterval:type_name -> ADAPT.Representations.NumericRepresentationValue
	19, // 11: ADAPT.LoggedData.DataLogTrigger.DataLogTimeInterval:type_name -> ADAPT.Representations.NumericRepresentationValue
	19, // 12: ADAPT.LoggedData.DataLogTrigger.DataLogThresholdMinimum:type_name -> ADAPT.Representations.NumericRepresentationValue
	19, // 13: ADAPT.LoggedData.DataLogTrigger.DataLogThresholdMaximum:type_name -> ADAPT.Representations.NumericRepresentationValue
	19, // 14: ADAPT.LoggedData.DataLogTrigger.DataLogThresholdChange:type_name -> ADAPT.Representations.NumericRepresentationValue
	20, // 15: ADAPT.LoggedData.DataLogTrigger.ContextItems:type_name -> ADAPT.Common.ContextItem
	0,  // 16: ADAPT.LoggedData.DataLogTrigger.LoggingLevel:type_name -> ADAPT.LoggedData.LoggingLevelEnum
	21, // 17: ADAPT.LoggedData.DataLogTrigger.Representation:type_name -> ADAPT.Representations.Representation
	15, // 18: ADAPT.LoggedData.Load.Id:type_name -> ADAPT.Common.CompoundIdentifier
	16, // 19: ADAPT.LoggedData.Load.TimeScopes:type_name -> ADAPT.Common.TimeScope
	1,  // 20: ADAPT.LoggedData.Load.LoadType:type_name -> ADAPT.LoggedData.LoadTypeEnum
	19, // 21: ADAPT.LoggedData.Load.LoadQuantity:type_name -> ADAPT.Representations.NumericRepresentationValue
	20, // 22: ADAPT.LoggedData.Load.ContextItems:type_name -> ADAPT.Common.ContextItem
	22, // 23: ADAPT.LoggedData.NumericWorkingData.UnitOfMeasure:type_name -> ADAPT.Common.UnitOfMeasure
	15, // 24: ADAPT.LoggedData.OperationData.Id:type_name -> ADAPT.Common.CompoundIdentifier
	23, // 25: ADAPT.LoggedData.OperationData.OperationType:type_name -> ADAPT.Common.OperationType
	20, // 26: ADAPT.LoggedData.OperationData.ContextItems:type_name -> ADAPT.Common.ContextItem
	11, // 27: ADAPT.LoggedData.OperationData.SpatialRecords:type_name -> ADAPT.LoggedData.SpatialRecord
	24, // 28: ADAPT.LoggedData.OperationData.DeviceElementUses:type_name -> ADAPT.Equipment.DeviceElementUse
	15, // 29: ADAPT.LoggedData.SectionSummary.Id:type_name -> ADAPT.Common.CompoundIdentifier
	19, // 30: ADAPT.LoggedData.SectionSummary.TotalDistanceTravelled:type_name -> ADAPT.Representations.NumericRepresentationValue
	19, // 31: ADAPT.LoggedData.SectionSummary.TotalElapsedTime:type_name -> ADAPT.Representations.NumericRepresentationValue
	25, // 32: ADAPT.LoggedData.SpatialRecord.Geometry:type_name -> ADAPT.Shapes.Shape
	26, // 33: ADAPT.LoggedData.SpatialRecord.Timestamp:type_name -> google.protobuf.Timestamp
	13, // 34: ADAPT.LoggedData.SpatialRecord.MeterValues:type_name -> ADAPT.LoggedData.SpatialRecord.MeterValuesEntry
	14, // 35: ADAPT.LoggedData.SpatialRecord.AppliedLatencyValues:type_name -> ADAPT.LoggedData.SpatialRecord.AppliedLatencyValuesEntry
	27, // 36: ADAPT.LoggedData.SpatialRecord.SignalType:type_name -> ADAPT.Representations.RepresentationValue
	15, // 37: ADAPT.LoggedData.WorkingData.Id:type_name -> ADAPT.Common.CompoundIdentifier
	21, // 38: ADAPT.LoggedData.WorkingData.Representation:type_name -> ADAPT.Representations.Representation
	27, // 39: ADAPT.LoggedData.WorkingData.AppliedLatency:type_name -> ADAPT.Representations.RepresentationValue
	27, // 40: ADAPT.LoggedData.WorkingData.ReportedLatency:type_name -> ADAPT.Representations.RepresentationValue
	6,  // 41: ADAPT.LoggedData.WorkingData.EnumeratedWorkingData:type_name -> ADAPT.LoggedData.EnumeratedWorkingData
	8,  // 42: ADAPT.LoggedData.WorkingData.NumericWorkingData:type_name -> ADAPT.LoggedData.NumericWorkingData
	27, // 43: ADAPT.LoggedData.SpatialRecord.MeterValuesEntry.value:type_name -> ADAPT.Representations.RepresentationValue
	44, // [44:44] is the sub-list for method output_type
	44, // [44:44] is the sub-list for method input_type
	44, // [44:44] is the sub-list for extension type_name
	44, // [44:44] is the sub-list for extension extendee
	0,  // [0:44] is the sub-list for field type_name
}

func init() { file_LoggedData_proto_init() }
func file_LoggedData_proto_init() {
	if File_LoggedData_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_LoggedData_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoggedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LoggedData_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalibrationFactor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LoggedData_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataLogTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LoggedData_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnumeratedWorkingData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LoggedData_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Load); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LoggedData_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumericWorkingData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LoggedData_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LoggedData_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SectionSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LoggedData_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpatialRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_LoggedData_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkingData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_LoggedData_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*WorkingData_EnumeratedWorkingData)(nil),
		(*WorkingData_NumericWorkingData)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_LoggedData_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_LoggedData_proto_goTypes,
		DependencyIndexes: file_LoggedData_proto_depIdxs,
		EnumInfos:         file_LoggedData_proto_enumTypes,
		MessageInfos:      file_LoggedData_proto_msgTypes,
	}.Build()
	File_LoggedData_proto = out.File
	file_LoggedData_proto_rawDesc = nil
	file_LoggedData_proto_goTypes = nil
	file_LoggedData_proto_depIdxs = nil
}
