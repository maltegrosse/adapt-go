// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.19.6
// source: Prescriptions.proto

package Prescriptions

import (
	Common "github.com/maltegrosse/adapt-go/Common"
	Logistics "github.com/maltegrosse/adapt-go/Logistics"
	Products "github.com/maltegrosse/adapt-go/Products"
	Representations "github.com/maltegrosse/adapt-go/Representations"
	Shapes "github.com/maltegrosse/adapt-go/Shapes"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ApplicationStrategy_ApplicationStrategyEnum int32

const (
	ApplicationStrategy_RatePerArea  ApplicationStrategy_ApplicationStrategyEnum = 0
	ApplicationStrategy_RatePerTank  ApplicationStrategy_ApplicationStrategyEnum = 1
	ApplicationStrategy_TotalProduct ApplicationStrategy_ApplicationStrategyEnum = 2
)

// Enum value maps for ApplicationStrategy_ApplicationStrategyEnum.
var (
	ApplicationStrategy_ApplicationStrategyEnum_name = map[int32]string{
		0: "RatePerArea",
		1: "RatePerTank",
		2: "TotalProduct",
	}
	ApplicationStrategy_ApplicationStrategyEnum_value = map[string]int32{
		"RatePerArea":  0,
		"RatePerTank":  1,
		"TotalProduct": 2,
	}
)

func (x ApplicationStrategy_ApplicationStrategyEnum) Enum() *ApplicationStrategy_ApplicationStrategyEnum {
	p := new(ApplicationStrategy_ApplicationStrategyEnum)
	*p = x
	return p
}

func (x ApplicationStrategy_ApplicationStrategyEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApplicationStrategy_ApplicationStrategyEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_Prescriptions_proto_enumTypes[0].Descriptor()
}

func (ApplicationStrategy_ApplicationStrategyEnum) Type() protoreflect.EnumType {
	return &file_Prescriptions_proto_enumTypes[0]
}

func (x ApplicationStrategy_ApplicationStrategyEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ApplicationStrategy_ApplicationStrategyEnum.Descriptor instead.
func (ApplicationStrategy_ApplicationStrategyEnum) EnumDescriptor() ([]byte, []int) {
	return file_Prescriptions_proto_rawDescGZIP(), []int{0, 0}
}

type ApplicationStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ApplicationStrategy) Reset() {
	*x = ApplicationStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Prescriptions_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationStrategy) ProtoMessage() {}

func (x *ApplicationStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_Prescriptions_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationStrategy.ProtoReflect.Descriptor instead.
func (*ApplicationStrategy) Descriptor() ([]byte, []int) {
	return file_Prescriptions_proto_rawDescGZIP(), []int{0}
}

type ManualPrescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductUses         []*Products.ProductUse                      `protobuf:"bytes,1,rep,name=ProductUses,proto3" json:"ProductUses,omitempty"`
	TotalArea           *Representations.NumericRepresentationValue `protobuf:"bytes,2,opt,name=TotalArea,proto3" json:"TotalArea,omitempty"`
	TankAmount          *Representations.NumericRepresentationValue `protobuf:"bytes,3,opt,name=TankAmount,proto3" json:"TankAmount,omitempty"`
	TotalTanks          float64                                     `protobuf:"fixed64,4,opt,name=TotalTanks,proto3" json:"TotalTanks,omitempty"`
	ApplicationStrategy *ApplicationStrategy                        `protobuf:"bytes,5,opt,name=ApplicationStrategy,proto3" json:"ApplicationStrategy,omitempty"`
}

func (x *ManualPrescription) Reset() {
	*x = ManualPrescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Prescriptions_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManualPrescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualPrescription) ProtoMessage() {}

func (x *ManualPrescription) ProtoReflect() protoreflect.Message {
	mi := &file_Prescriptions_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualPrescription.ProtoReflect.Descriptor instead.
func (*ManualPrescription) Descriptor() ([]byte, []int) {
	return file_Prescriptions_proto_rawDescGZIP(), []int{1}
}

func (x *ManualPrescription) GetProductUses() []*Products.ProductUse {
	if x != nil {
		return x.ProductUses
	}
	return nil
}

func (x *ManualPrescription) GetTotalArea() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.TotalArea
	}
	return nil
}

func (x *ManualPrescription) GetTankAmount() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.TankAmount
	}
	return nil
}

func (x *ManualPrescription) GetTotalTanks() float64 {
	if x != nil {
		return x.TotalTanks
	}
	return 0
}

func (x *ManualPrescription) GetApplicationStrategy() *ApplicationStrategy {
	if x != nil {
		return x.ApplicationStrategy
	}
	return nil
}

type RadialExtent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartAngle  *Representations.NumericRepresentationValue `protobuf:"bytes,1,opt,name=StartAngle,proto3" json:"StartAngle,omitempty"`
	EndAngle    *Representations.NumericRepresentationValue `protobuf:"bytes,2,opt,name=EndAngle,proto3" json:"EndAngle,omitempty"`
	SectionId   int64                                       `protobuf:"varint,3,opt,name=SectionId,proto3" json:"SectionId,omitempty"`
	InnerRadius *Representations.NumericRepresentationValue `protobuf:"bytes,4,opt,name=InnerRadius,proto3" json:"InnerRadius,omitempty"`
	OuterRadius *Representations.NumericRepresentationValue `protobuf:"bytes,5,opt,name=OuterRadius,proto3" json:"OuterRadius,omitempty"`
	RotCtr      *Shapes.Point                               `protobuf:"bytes,6,opt,name=RotCtr,proto3" json:"RotCtr,omitempty"`
}

func (x *RadialExtent) Reset() {
	*x = RadialExtent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Prescriptions_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RadialExtent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadialExtent) ProtoMessage() {}

func (x *RadialExtent) ProtoReflect() protoreflect.Message {
	mi := &file_Prescriptions_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadialExtent.ProtoReflect.Descriptor instead.
func (*RadialExtent) Descriptor() ([]byte, []int) {
	return file_Prescriptions_proto_rawDescGZIP(), []int{2}
}

func (x *RadialExtent) GetStartAngle() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.StartAngle
	}
	return nil
}

func (x *RadialExtent) GetEndAngle() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.EndAngle
	}
	return nil
}

func (x *RadialExtent) GetSectionId() int64 {
	if x != nil {
		return x.SectionId
	}
	return 0
}

func (x *RadialExtent) GetInnerRadius() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.InnerRadius
	}
	return nil
}

func (x *RadialExtent) GetOuterRadius() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.OuterRadius
	}
	return nil
}

func (x *RadialExtent) GetRotCtr() *Shapes.Point {
	if x != nil {
		return x.RotCtr
	}
	return nil
}

type RadialLookupCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RadialLookups []*RxRadialLookup                           `protobuf:"bytes,1,rep,name=RadialLookups,proto3" json:"RadialLookups,omitempty"`
	StartAngle    *Representations.NumericRepresentationValue `protobuf:"bytes,2,opt,name=StartAngle,proto3" json:"StartAngle,omitempty"`
	EndAngle      *Representations.NumericRepresentationValue `protobuf:"bytes,3,opt,name=EndAngle,proto3" json:"EndAngle,omitempty"`
	RotCtr        *Shapes.Point                               `protobuf:"bytes,4,opt,name=RotCtr,proto3" json:"RotCtr,omitempty"`
	ShapeLookups  []*RxShapeLookup                            `protobuf:"bytes,5,rep,name=ShapeLookups,proto3" json:"ShapeLookups,omitempty"`
}

func (x *RadialLookupCollection) Reset() {
	*x = RadialLookupCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Prescriptions_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RadialLookupCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadialLookupCollection) ProtoMessage() {}

func (x *RadialLookupCollection) ProtoReflect() protoreflect.Message {
	mi := &file_Prescriptions_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadialLookupCollection.ProtoReflect.Descriptor instead.
func (*RadialLookupCollection) Descriptor() ([]byte, []int) {
	return file_Prescriptions_proto_rawDescGZIP(), []int{3}
}

func (x *RadialLookupCollection) GetRadialLookups() []*RxRadialLookup {
	if x != nil {
		return x.RadialLookups
	}
	return nil
}

func (x *RadialLookupCollection) GetStartAngle() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.StartAngle
	}
	return nil
}

func (x *RadialLookupCollection) GetEndAngle() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.EndAngle
	}
	return nil
}

func (x *RadialLookupCollection) GetRotCtr() *Shapes.Point {
	if x != nil {
		return x.RotCtr
	}
	return nil
}

func (x *RadialLookupCollection) GetShapeLookups() []*RxShapeLookup {
	if x != nil {
		return x.ShapeLookups
	}
	return nil
}

type RadialPrescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RadialLookupCollections []*RadialLookupCollection `protobuf:"bytes,1,rep,name=RadialLookupCollections,proto3" json:"RadialLookupCollections,omitempty"`
}

func (x *RadialPrescription) Reset() {
	*x = RadialPrescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Prescriptions_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RadialPrescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadialPrescription) ProtoMessage() {}

func (x *RadialPrescription) ProtoReflect() protoreflect.Message {
	mi := &file_Prescriptions_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadialPrescription.ProtoReflect.Descriptor instead.
func (*RadialPrescription) Descriptor() ([]byte, []int) {
	return file_Prescriptions_proto_rawDescGZIP(), []int{4}
}

func (x *RadialPrescription) GetRadialLookupCollections() []*RadialLookupCollection {
	if x != nil {
		return x.RadialLookupCollections
	}
	return nil
}

type RasterGridPrescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Origin      *Shapes.Shape                               `protobuf:"bytes,1,opt,name=Origin,proto3" json:"Origin,omitempty"`
	RowCount    int64                                       `protobuf:"varint,2,opt,name=RowCount,proto3" json:"RowCount,omitempty"`
	ColumnCount int64                                       `protobuf:"varint,3,opt,name=ColumnCount,proto3" json:"ColumnCount,omitempty"`
	CellWidth   *Representations.NumericRepresentationValue `protobuf:"bytes,4,opt,name=CellWidth,proto3" json:"CellWidth,omitempty"`
	CellHeight  *Representations.NumericRepresentationValue `protobuf:"bytes,5,opt,name=CellHeight,proto3" json:"CellHeight,omitempty"`
	Rates       []*RxCellLookup                             `protobuf:"bytes,6,rep,name=Rates,proto3" json:"Rates,omitempty"`
}

func (x *RasterGridPrescription) Reset() {
	*x = RasterGridPrescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Prescriptions_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RasterGridPrescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RasterGridPrescription) ProtoMessage() {}

func (x *RasterGridPrescription) ProtoReflect() protoreflect.Message {
	mi := &file_Prescriptions_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RasterGridPrescription.ProtoReflect.Descriptor instead.
func (*RasterGridPrescription) Descriptor() ([]byte, []int) {
	return file_Prescriptions_proto_rawDescGZIP(), []int{5}
}

func (x *RasterGridPrescription) GetOrigin() *Shapes.Shape {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *RasterGridPrescription) GetRowCount() int64 {
	if x != nil {
		return x.RowCount
	}
	return 0
}

func (x *RasterGridPrescription) GetColumnCount() int64 {
	if x != nil {
		return x.ColumnCount
	}
	return 0
}

func (x *RasterGridPrescription) GetCellWidth() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.CellWidth
	}
	return nil
}

func (x *RasterGridPrescription) GetCellHeight() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.CellHeight
	}
	return nil
}

func (x *RasterGridPrescription) GetRates() []*RxCellLookup {
	if x != nil {
		return x.Rates
	}
	return nil
}

type RxCellLookup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RxRates []*RxRate `protobuf:"bytes,1,rep,name=RxRates,proto3" json:"RxRates,omitempty"`
}

func (x *RxCellLookup) Reset() {
	*x = RxCellLookup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Prescriptions_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RxCellLookup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RxCellLookup) ProtoMessage() {}

func (x *RxCellLookup) ProtoReflect() protoreflect.Message {
	mi := &file_Prescriptions_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RxCellLookup.ProtoReflect.Descriptor instead.
func (*RxCellLookup) Descriptor() ([]byte, []int) {
	return file_Prescriptions_proto_rawDescGZIP(), []int{6}
}

func (x *RxCellLookup) GetRxRates() []*RxRate {
	if x != nil {
		return x.RxRates
	}
	return nil
}

type RxRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rate              float64 `protobuf:"fixed64,1,opt,name=Rate,proto3" json:"Rate,omitempty"`
	RxProductLookupId int64   `protobuf:"varint,2,opt,name=RxProductLookupId,proto3" json:"RxProductLookupId,omitempty"`
}

func (x *RxRate) Reset() {
	*x = RxRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Prescriptions_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RxRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RxRate) ProtoMessage() {}

func (x *RxRate) ProtoReflect() protoreflect.Message {
	mi := &file_Prescriptions_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RxRate.ProtoReflect.Descriptor instead.
func (*RxRate) Descriptor() ([]byte, []int) {
	return file_Prescriptions_proto_rawDescGZIP(), []int{7}
}

func (x *RxRate) GetRate() float64 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *RxRate) GetRxProductLookupId() int64 {
	if x != nil {
		return x.RxProductLookupId
	}
	return 0
}

type RxProductLookup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *Common.CompoundIdentifier                  `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	ProductId      int64                                       `protobuf:"varint,2,opt,name=ProductId,proto3" json:"ProductId,omitempty"`
	Representation *Representations.NumericRepresentation      `protobuf:"bytes,3,opt,name=Representation,proto3" json:"Representation,omitempty"`
	UnitOfMeasure  *Common.UnitOfMeasure                       `protobuf:"bytes,4,opt,name=UnitOfMeasure,proto3" json:"UnitOfMeasure,omitempty"`
	OutOfFieldRate *Representations.NumericRepresentationValue `protobuf:"bytes,5,opt,name=OutOfFieldRate,proto3" json:"OutOfFieldRate,omitempty"`
	LossOfGpsRate  *Representations.NumericRepresentationValue `protobuf:"bytes,6,opt,name=LossOfGpsRate,proto3" json:"LossOfGpsRate,omitempty"`
}

func (x *RxProductLookup) Reset() {
	*x = RxProductLookup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Prescriptions_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RxProductLookup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RxProductLookup) ProtoMessage() {}

func (x *RxProductLookup) ProtoReflect() protoreflect.Message {
	mi := &file_Prescriptions_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RxProductLookup.ProtoReflect.Descriptor instead.
func (*RxProductLookup) Descriptor() ([]byte, []int) {
	return file_Prescriptions_proto_rawDescGZIP(), []int{8}
}

func (x *RxProductLookup) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RxProductLookup) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *RxProductLookup) GetRepresentation() *Representations.NumericRepresentation {
	if x != nil {
		return x.Representation
	}
	return nil
}

func (x *RxProductLookup) GetUnitOfMeasure() *Common.UnitOfMeasure {
	if x != nil {
		return x.UnitOfMeasure
	}
	return nil
}

func (x *RxProductLookup) GetOutOfFieldRate() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.OutOfFieldRate
	}
	return nil
}

func (x *RxProductLookup) GetLossOfGpsRate() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.LossOfGpsRate
	}
	return nil
}

type RxRadialLookup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Extent  *RadialExtent `protobuf:"bytes,1,opt,name=Extent,proto3" json:"Extent,omitempty"`
	RxRates []*RxRate     `protobuf:"bytes,2,rep,name=RxRates,proto3" json:"RxRates,omitempty"`
}

func (x *RxRadialLookup) Reset() {
	*x = RxRadialLookup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Prescriptions_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RxRadialLookup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RxRadialLookup) ProtoMessage() {}

func (x *RxRadialLookup) ProtoReflect() protoreflect.Message {
	mi := &file_Prescriptions_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RxRadialLookup.ProtoReflect.Descriptor instead.
func (*RxRadialLookup) Descriptor() ([]byte, []int) {
	return file_Prescriptions_proto_rawDescGZIP(), []int{9}
}

func (x *RxRadialLookup) GetExtent() *RadialExtent {
	if x != nil {
		return x.Extent
	}
	return nil
}

func (x *RxRadialLookup) GetRxRates() []*RxRate {
	if x != nil {
		return x.RxRates
	}
	return nil
}

type RxShapeLookup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shape *Shapes.Shape `protobuf:"bytes,1,opt,name=Shape,proto3" json:"Shape,omitempty"`
	Rates []*RxRate     `protobuf:"bytes,2,rep,name=Rates,proto3" json:"Rates,omitempty"`
}

func (x *RxShapeLookup) Reset() {
	*x = RxShapeLookup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Prescriptions_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RxShapeLookup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RxShapeLookup) ProtoMessage() {}

func (x *RxShapeLookup) ProtoReflect() protoreflect.Message {
	mi := &file_Prescriptions_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RxShapeLookup.ProtoReflect.Descriptor instead.
func (*RxShapeLookup) Descriptor() ([]byte, []int) {
	return file_Prescriptions_proto_rawDescGZIP(), []int{10}
}

func (x *RxShapeLookup) GetShape() *Shapes.Shape {
	if x != nil {
		return x.Shape
	}
	return nil
}

func (x *RxShapeLookup) GetRates() []*RxRate {
	if x != nil {
		return x.Rates
	}
	return nil
}

type SpatialPrescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoundingBox    *Shapes.BoundingBox                         `protobuf:"bytes,1,opt,name=BoundingBox,proto3" json:"BoundingBox,omitempty"`
	OutOfFieldRate *Representations.NumericRepresentationValue `protobuf:"bytes,2,opt,name=OutOfFieldRate,proto3" json:"OutOfFieldRate,omitempty"`
	LossOfGpsRate  *Representations.NumericRepresentationValue `protobuf:"bytes,3,opt,name=LossOfGpsRate,proto3" json:"LossOfGpsRate,omitempty"`
	// Types that are assignable to Subtype:
	//
	//	*SpatialPrescription_RasterGridPrescription
	//	*SpatialPrescription_VectorPrescription
	//	*SpatialPrescription_RadialPrescription
	Subtype isSpatialPrescription_Subtype `protobuf_oneof:"subtype"`
}

func (x *SpatialPrescription) Reset() {
	*x = SpatialPrescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Prescriptions_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpatialPrescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpatialPrescription) ProtoMessage() {}

func (x *SpatialPrescription) ProtoReflect() protoreflect.Message {
	mi := &file_Prescriptions_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpatialPrescription.ProtoReflect.Descriptor instead.
func (*SpatialPrescription) Descriptor() ([]byte, []int) {
	return file_Prescriptions_proto_rawDescGZIP(), []int{11}
}

func (x *SpatialPrescription) GetBoundingBox() *Shapes.BoundingBox {
	if x != nil {
		return x.BoundingBox
	}
	return nil
}

func (x *SpatialPrescription) GetOutOfFieldRate() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.OutOfFieldRate
	}
	return nil
}

func (x *SpatialPrescription) GetLossOfGpsRate() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.LossOfGpsRate
	}
	return nil
}

func (m *SpatialPrescription) GetSubtype() isSpatialPrescription_Subtype {
	if m != nil {
		return m.Subtype
	}
	return nil
}

func (x *SpatialPrescription) GetRasterGridPrescription() *RasterGridPrescription {
	if x, ok := x.GetSubtype().(*SpatialPrescription_RasterGridPrescription); ok {
		return x.RasterGridPrescription
	}
	return nil
}

func (x *SpatialPrescription) GetVectorPrescription() *VectorPrescription {
	if x, ok := x.GetSubtype().(*SpatialPrescription_VectorPrescription); ok {
		return x.VectorPrescription
	}
	return nil
}

func (x *SpatialPrescription) GetRadialPrescription() *RadialPrescription {
	if x, ok := x.GetSubtype().(*SpatialPrescription_RadialPrescription); ok {
		return x.RadialPrescription
	}
	return nil
}

type isSpatialPrescription_Subtype interface {
	isSpatialPrescription_Subtype()
}

type SpatialPrescription_RasterGridPrescription struct {
	RasterGridPrescription *RasterGridPrescription `protobuf:"bytes,101,opt,name=RasterGridPrescription,proto3,oneof"`
}

type SpatialPrescription_VectorPrescription struct {
	VectorPrescription *VectorPrescription `protobuf:"bytes,102,opt,name=VectorPrescription,proto3,oneof"`
}

type SpatialPrescription_RadialPrescription struct {
	RadialPrescription *RadialPrescription `protobuf:"bytes,103,opt,name=RadialPrescription,proto3,oneof"`
}

func (*SpatialPrescription_RasterGridPrescription) isSpatialPrescription_Subtype() {}

func (*SpatialPrescription_VectorPrescription) isSpatialPrescription_Subtype() {}

func (*SpatialPrescription_RadialPrescription) isSpatialPrescription_Subtype() {}

type VectorPrescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RxShapeLookups []*RxShapeLookup `protobuf:"bytes,1,rep,name=RxShapeLookups,proto3" json:"RxShapeLookups,omitempty"`
}

func (x *VectorPrescription) Reset() {
	*x = VectorPrescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Prescriptions_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorPrescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorPrescription) ProtoMessage() {}

func (x *VectorPrescription) ProtoReflect() protoreflect.Message {
	mi := &file_Prescriptions_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorPrescription.ProtoReflect.Descriptor instead.
func (*VectorPrescription) Descriptor() ([]byte, []int) {
	return file_Prescriptions_proto_rawDescGZIP(), []int{12}
}

func (x *VectorPrescription) GetRxShapeLookups() []*RxShapeLookup {
	if x != nil {
		return x.RxShapeLookups
	}
	return nil
}

type Prescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               *Common.CompoundIdentifier `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Description      string                     `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	OperationType    *Common.OperationType      `protobuf:"bytes,3,opt,name=OperationType,proto3" json:"OperationType,omitempty"`
	FieldId          int64                      `protobuf:"varint,4,opt,name=FieldId,proto3" json:"FieldId,omitempty"`
	CropZoneId       int64                      `protobuf:"varint,5,opt,name=CropZoneId,proto3" json:"CropZoneId,omitempty"`
	RxProductLookups []*RxProductLookup         `protobuf:"bytes,6,rep,name=RxProductLookups,proto3" json:"RxProductLookups,omitempty"`
	ProductIds       []int64                    `protobuf:"varint,7,rep,packed,name=ProductIds,proto3" json:"ProductIds,omitempty"`
	ContextItems     []*Common.ContextItem      `protobuf:"bytes,8,rep,name=ContextItems,proto3" json:"ContextItems,omitempty"`
	TimeScopes       []*Common.TimeScope        `protobuf:"bytes,9,rep,name=TimeScopes,proto3" json:"TimeScopes,omitempty"`
	PersonRoles      []*Logistics.PersonRole    `protobuf:"bytes,10,rep,name=PersonRoles,proto3" json:"PersonRoles,omitempty"`
	// Types that are assignable to Subtype:
	//
	//	*Prescription_ManualPrescription
	//	*Prescription_SpatialPrescription
	Subtype isPrescription_Subtype `protobuf_oneof:"subtype"`
}

func (x *Prescription) Reset() {
	*x = Prescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Prescriptions_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Prescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Prescription) ProtoMessage() {}

func (x *Prescription) ProtoReflect() protoreflect.Message {
	mi := &file_Prescriptions_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Prescription.ProtoReflect.Descriptor instead.
func (*Prescription) Descriptor() ([]byte, []int) {
	return file_Prescriptions_proto_rawDescGZIP(), []int{13}
}

func (x *Prescription) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Prescription) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Prescription) GetOperationType() *Common.OperationType {
	if x != nil {
		return x.OperationType
	}
	return nil
}

func (x *Prescription) GetFieldId() int64 {
	if x != nil {
		return x.FieldId
	}
	return 0
}

func (x *Prescription) GetCropZoneId() int64 {
	if x != nil {
		return x.CropZoneId
	}
	return 0
}

func (x *Prescription) GetRxProductLookups() []*RxProductLookup {
	if x != nil {
		return x.RxProductLookups
	}
	return nil
}

func (x *Prescription) GetProductIds() []int64 {
	if x != nil {
		return x.ProductIds
	}
	return nil
}

func (x *Prescription) GetContextItems() []*Common.ContextItem {
	if x != nil {
		return x.ContextItems
	}
	return nil
}

func (x *Prescription) GetTimeScopes() []*Common.TimeScope {
	if x != nil {
		return x.TimeScopes
	}
	return nil
}

func (x *Prescription) GetPersonRoles() []*Logistics.PersonRole {
	if x != nil {
		return x.PersonRoles
	}
	return nil
}

func (m *Prescription) GetSubtype() isPrescription_Subtype {
	if m != nil {
		return m.Subtype
	}
	return nil
}

func (x *Prescription) GetManualPrescription() *ManualPrescription {
	if x, ok := x.GetSubtype().(*Prescription_ManualPrescription); ok {
		return x.ManualPrescription
	}
	return nil
}

func (x *Prescription) GetSpatialPrescription() *SpatialPrescription {
	if x, ok := x.GetSubtype().(*Prescription_SpatialPrescription); ok {
		return x.SpatialPrescription
	}
	return nil
}

type isPrescription_Subtype interface {
	isPrescription_Subtype()
}

type Prescription_ManualPrescription struct {
	ManualPrescription *ManualPrescription `protobuf:"bytes,101,opt,name=ManualPrescription,proto3,oneof"`
}

type Prescription_SpatialPrescription struct {
	SpatialPrescription *SpatialPrescription `protobuf:"bytes,102,opt,name=SpatialPrescription,proto3,oneof"`
}

func (*Prescription_ManualPrescription) isPrescription_Subtype() {}

func (*Prescription_SpatialPrescription) isPrescription_Subtype() {}

var File_Prescriptions_proto protoreflect.FileDescriptor

var file_Prescriptions_proto_rawDesc = []byte{
	0x0a, 0x13, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x50, 0x72, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0c, 0x53, 0x68, 0x61, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x4c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x64,
	0x0a, 0x13, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0x4d, 0x0a, 0x17, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x54, 0x61, 0x6e, 0x6b,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x10, 0x02, 0x22, 0xf2, 0x02, 0x0a, 0x12, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x50,
	0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0b, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x73, 0x65, 0x52, 0x0b, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x73, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x09, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x41, 0x72, 0x65, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41,
	0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x72, 0x65, 0x61, 0x12, 0x51, 0x0a, 0x0a, 0x54, 0x61,
	0x6e, 0x6b, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0a, 0x54, 0x61, 0x6e, 0x6b, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x61, 0x6e, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x61, 0x6e, 0x6b, 0x73, 0x12, 0x5a, 0x0a,
	0x13, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x41, 0x44, 0x41,
	0x50, 0x54, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x52, 0x13, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0xa5, 0x03, 0x0a, 0x0c, 0x52, 0x61,
	0x64, 0x69, 0x61, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x51, 0x0a, 0x0a, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x4d, 0x0a,
	0x08, 0x45, 0x6e, 0x64, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52,
	0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x08, 0x45, 0x6e, 0x64, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x0b, 0x49, 0x6e,
	0x6e, 0x65, 0x72, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52,
	0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12,
	0x53, 0x0a, 0x0b, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d,
	0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x61,
	0x64, 0x69, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x52, 0x6f, 0x74, 0x43, 0x74, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x53, 0x68, 0x61,
	0x70, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x52, 0x6f, 0x74, 0x43, 0x74,
	0x72, 0x22, 0xfa, 0x02, 0x0a, 0x16, 0x52, 0x61, 0x64, 0x69, 0x61, 0x6c, 0x4c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0d,
	0x52, 0x61, 0x64, 0x69, 0x61, 0x6c, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x50, 0x72, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x78, 0x52, 0x61, 0x64, 0x69,
	0x61, 0x6c, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x0d, 0x52, 0x61, 0x64, 0x69, 0x61, 0x6c,
	0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x73, 0x12, 0x51, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x41, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44,
	0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x4d, 0x0a, 0x08, 0x45, 0x6e,
	0x64, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41,
	0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x45, 0x6e, 0x64, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x52, 0x6f, 0x74,
	0x43, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x41, 0x44, 0x41, 0x50,
	0x54, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06,
	0x52, 0x6f, 0x74, 0x43, 0x74, 0x72, 0x12, 0x46, 0x0a, 0x0c, 0x53, 0x68, 0x61, 0x70, 0x65, 0x4c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x41,
	0x44, 0x41, 0x50, 0x54, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x52, 0x78, 0x53, 0x68, 0x61, 0x70, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
	0x52, 0x0c, 0x53, 0x68, 0x61, 0x70, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x73, 0x22, 0x7b,
	0x0a, 0x12, 0x52, 0x61, 0x64, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x65, 0x0a, 0x17, 0x52, 0x61, 0x64, 0x69, 0x61, 0x6c, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x50, 0x72,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x61, 0x64, 0x69,
	0x61, 0x6c, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x17, 0x52, 0x61, 0x64, 0x69, 0x61, 0x6c, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xe0, 0x02, 0x0a, 0x16,
	0x52, 0x61, 0x73, 0x74, 0x65, 0x72, 0x47, 0x72, 0x69, 0x64, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x53,
	0x68, 0x61, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x52, 0x06, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x52, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x4f, 0x0a, 0x09, 0x43, 0x65, 0x6c, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d,
	0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x43, 0x65, 0x6c, 0x6c, 0x57, 0x69, 0x64,
	0x74, 0x68, 0x12, 0x51, 0x0a, 0x0a, 0x43, 0x65, 0x6c, 0x6c, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52,
	0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e,
	0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x43, 0x65, 0x6c, 0x6c, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x37, 0x0a, 0x05, 0x52, 0x61, 0x74, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x50, 0x72, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x78, 0x43, 0x65, 0x6c,
	0x6c, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x05, 0x52, 0x61, 0x74, 0x65, 0x73, 0x22, 0x45,
	0x0a, 0x0c, 0x52, 0x78, 0x43, 0x65, 0x6c, 0x6c, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x35,
	0x0a, 0x07, 0x52, 0x78, 0x52, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x78, 0x52, 0x61, 0x74, 0x65, 0x52, 0x07, 0x52, 0x78,
	0x52, 0x61, 0x74, 0x65, 0x73, 0x22, 0x4a, 0x0a, 0x06, 0x52, 0x78, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x52, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x52, 0x78, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x52, 0x78, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x49,
	0x64, 0x22, 0xae, 0x03, 0x0a, 0x0f, 0x52, 0x78, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x52, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0d, 0x55,
	0x6e, 0x69, 0x74, 0x4f, 0x66, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x4f, 0x66, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52,
	0x0d, 0x55, 0x6e, 0x69, 0x74, 0x4f, 0x66, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x59,
	0x0a, 0x0e, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52,
	0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e,
	0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x4f, 0x75, 0x74, 0x4f, 0x66,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x57, 0x0a, 0x0d, 0x4c, 0x6f, 0x73,
	0x73, 0x4f, 0x66, 0x47, 0x70, 0x73, 0x52, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63,
	0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0d, 0x4c, 0x6f, 0x73, 0x73, 0x4f, 0x66, 0x47, 0x70, 0x73, 0x52, 0x61,
	0x74, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x0e, 0x52, 0x78, 0x52, 0x61, 0x64, 0x69, 0x61, 0x6c, 0x4c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x39, 0x0a, 0x06, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x50, 0x72,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x61, 0x64, 0x69,
	0x61, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x35, 0x0a, 0x07, 0x52, 0x78, 0x52, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x78, 0x52, 0x61, 0x74, 0x65, 0x52, 0x07,
	0x52, 0x78, 0x52, 0x61, 0x74, 0x65, 0x73, 0x22, 0x6d, 0x0a, 0x0d, 0x52, 0x78, 0x53, 0x68, 0x61,
	0x70, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x29, 0x0a, 0x05, 0x53, 0x68, 0x61, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e,
	0x53, 0x68, 0x61, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x52, 0x05, 0x53, 0x68,
	0x61, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x52, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x78, 0x52, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x52, 0x61, 0x74, 0x65, 0x73, 0x22, 0xae, 0x04, 0x0a, 0x13, 0x53, 0x70, 0x61, 0x74, 0x69,
	0x61, 0x6c, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b,
	0x0a, 0x0b, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x53, 0x68, 0x61, 0x70,
	0x65, 0x73, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x52, 0x0b,
	0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x12, 0x59, 0x0a, 0x0e, 0x4f,
	0x75, 0x74, 0x4f, 0x66, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65,
	0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x57, 0x0a, 0x0d, 0x4c, 0x6f, 0x73, 0x73, 0x4f, 0x66,
	0x47, 0x70, 0x73, 0x52, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0d, 0x4c, 0x6f, 0x73, 0x73, 0x4f, 0x66, 0x47, 0x70, 0x73, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x65, 0x0a, 0x16, 0x52, 0x61, 0x73, 0x74, 0x65, 0x72, 0x47, 0x72, 0x69, 0x64, 0x50, 0x72, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x61, 0x73, 0x74, 0x65, 0x72, 0x47, 0x72, 0x69, 0x64,
	0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x16,
	0x52, 0x61, 0x73, 0x74, 0x65, 0x72, 0x47, 0x72, 0x69, 0x64, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x12, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x66, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x50,
	0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x59, 0x0a, 0x12, 0x52, 0x61, 0x64, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x61, 0x64, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x52, 0x61, 0x64, 0x69, 0x61, 0x6c,
	0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07,
	0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x22, 0x60, 0x0a, 0x12, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a,
	0x0e, 0x52, 0x78, 0x53, 0x68, 0x61, 0x70, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x50, 0x72,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x78, 0x53, 0x68,
	0x61, 0x70, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x0e, 0x52, 0x78, 0x53, 0x68, 0x61,
	0x70, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x73, 0x22, 0xcc, 0x05, 0x0a, 0x0c, 0x50, 0x72,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41,
	0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x43,
	0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x43, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x10, 0x52,
	0x78, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x50, 0x72,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x78, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x10, 0x52, 0x78, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x0a, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x73, 0x12, 0x3d, 0x0a,
	0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x37, 0x0a, 0x0a,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52,
	0x6f, 0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x41, 0x44, 0x41,
	0x50, 0x54, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x0b, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52,
	0x6f, 0x6c, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x12, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x50, 0x72,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x50, 0x72, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x4d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x5c, 0x0a, 0x13, 0x53, 0x70, 0x61, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x41,
	0x44, 0x41, 0x50, 0x54, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x53, 0x70, 0x61, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x13, 0x53, 0x70, 0x61, 0x74, 0x69, 0x61,
	0x6c, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a,
	0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x61, 0x6c, 0x74, 0x65, 0x67, 0x72, 0x6f, 0x73,
	0x73, 0x65, 0x2f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x2d, 0x67, 0x6f, 0x2f, 0x50, 0x72, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_Prescriptions_proto_rawDescOnce sync.Once
	file_Prescriptions_proto_rawDescData = file_Prescriptions_proto_rawDesc
)

func file_Prescriptions_proto_rawDescGZIP() []byte {
	file_Prescriptions_proto_rawDescOnce.Do(func() {
		file_Prescriptions_proto_rawDescData = protoimpl.X.CompressGZIP(file_Prescriptions_proto_rawDescData)
	})
	return file_Prescriptions_proto_rawDescData
}

var file_Prescriptions_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_Prescriptions_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_Prescriptions_proto_goTypes = []interface{}{
	(ApplicationStrategy_ApplicationStrategyEnum)(0),   // 0: ADAPT.Prescriptions.ApplicationStrategy.ApplicationStrategyEnum
	(*ApplicationStrategy)(nil),                        // 1: ADAPT.Prescriptions.ApplicationStrategy
	(*ManualPrescription)(nil),                         // 2: ADAPT.Prescriptions.ManualPrescription
	(*RadialExtent)(nil),                               // 3: ADAPT.Prescriptions.RadialExtent
	(*RadialLookupCollection)(nil),                     // 4: ADAPT.Prescriptions.RadialLookupCollection
	(*RadialPrescription)(nil),                         // 5: ADAPT.Prescriptions.RadialPrescription
	(*RasterGridPrescription)(nil),                     // 6: ADAPT.Prescriptions.RasterGridPrescription
	(*RxCellLookup)(nil),                               // 7: ADAPT.Prescriptions.RxCellLookup
	(*RxRate)(nil),                                     // 8: ADAPT.Prescriptions.RxRate
	(*RxProductLookup)(nil),                            // 9: ADAPT.Prescriptions.RxProductLookup
	(*RxRadialLookup)(nil),                             // 10: ADAPT.Prescriptions.RxRadialLookup
	(*RxShapeLookup)(nil),                              // 11: ADAPT.Prescriptions.RxShapeLookup
	(*SpatialPrescription)(nil),                        // 12: ADAPT.Prescriptions.SpatialPrescription
	(*VectorPrescription)(nil),                         // 13: ADAPT.Prescriptions.VectorPrescription
	(*Prescription)(nil),                               // 14: ADAPT.Prescriptions.Prescription
	(*Products.ProductUse)(nil),                        // 15: ADAPT.Products.ProductUse
	(*Representations.NumericRepresentationValue)(nil), // 16: ADAPT.Representations.NumericRepresentationValue
	(*Shapes.Point)(nil),                               // 17: ADAPT.Shapes.Point
	(*Shapes.Shape)(nil),                               // 18: ADAPT.Shapes.Shape
	(*Common.CompoundIdentifier)(nil),                  // 19: ADAPT.Common.CompoundIdentifier
	(*Representations.NumericRepresentation)(nil),      // 20: ADAPT.Representations.NumericRepresentation
	(*Common.UnitOfMeasure)(nil),                       // 21: ADAPT.Common.UnitOfMeasure
	(*Shapes.BoundingBox)(nil),                         // 22: ADAPT.Shapes.BoundingBox
	(*Common.OperationType)(nil),                       // 23: ADAPT.Common.OperationType
	(*Common.ContextItem)(nil),                         // 24: ADAPT.Common.ContextItem
	(*Common.TimeScope)(nil),                           // 25: ADAPT.Common.TimeScope
	(*Logistics.PersonRole)(nil),                       // 26: ADAPT.Logistics.PersonRole
}
var file_Prescriptions_proto_depIdxs = []int32{
	15, // 0: ADAPT.Prescriptions.ManualPrescription.ProductUses:type_name -> ADAPT.Products.ProductUse
	16, // 1: ADAPT.Prescriptions.ManualPrescription.TotalArea:type_name -> ADAPT.Representations.NumericRepresentationValue
	16, // 2: ADAPT.Prescriptions.ManualPrescription.TankAmount:type_name -> ADAPT.Representations.NumericRepresentationValue
	1,  // 3: ADAPT.Prescriptions.ManualPrescription.ApplicationStrategy:type_name -> ADAPT.Prescriptions.ApplicationStrategy
	16, // 4: ADAPT.Prescriptions.RadialExtent.StartAngle:type_name -> ADAPT.Representations.NumericRepresentationValue
	16, // 5: ADAPT.Prescriptions.RadialExtent.EndAngle:type_name -> ADAPT.Representations.NumericRepresentationValue
	16, // 6: ADAPT.Prescriptions.RadialExtent.InnerRadius:type_name -> ADAPT.Representations.NumericRepresentationValue
	16, // 7: ADAPT.Prescriptions.RadialExtent.OuterRadius:type_name -> ADAPT.Representations.NumericRepresentationValue
	17, // 8: ADAPT.Prescriptions.RadialExtent.RotCtr:type_name -> ADAPT.Shapes.Point
	10, // 9: ADAPT.Prescriptions.RadialLookupCollection.RadialLookups:type_name -> ADAPT.Prescriptions.RxRadialLookup
	16, // 10: ADAPT.Prescriptions.RadialLookupCollection.StartAngle:type_name -> ADAPT.Representations.NumericRepresentationValue
	16, // 11: ADAPT.Prescriptions.RadialLookupCollection.EndAngle:type_name -> ADAPT.Representations.NumericRepresentationValue
	17, // 12: ADAPT.Prescriptions.RadialLookupCollection.RotCtr:type_name -> ADAPT.Shapes.Point
	11, // 13: ADAPT.Prescriptions.RadialLookupCollection.ShapeLookups:type_name -> ADAPT.Prescriptions.RxShapeLookup
	4,  // 14: ADAPT.Prescriptions.RadialPrescription.RadialLookupCollections:type_name -> ADAPT.Prescriptions.RadialLookupCollection
	18, // 15: ADAPT.Prescriptions.RasterGridPrescription.Origin:type_name -> ADAPT.Shapes.Shape
	16, // 16: ADAPT.Prescriptions.RasterGridPrescription.CellWidth:type_name -> ADAPT.Representations.NumericRepresentationValue
	16, // 17: ADAPT.Prescriptions.RasterGridPrescription.CellHeight:type_name -> ADAPT.Representations.NumericRepresentationValue
	7,  // 18: ADAPT.Prescriptions.RasterGridPrescription.Rates:type_name -> ADAPT.Prescriptions.RxCellLookup
	8,  // 19: ADAPT.Prescriptions.RxCellLookup.RxRates:type_name -> ADAPT.Prescriptions.RxRate
	19, // 20: ADAPT.Prescriptions.RxProductLookup.Id:type_name -> ADAPT.Common.CompoundIdentifier
	20, // 21: ADAPT.Prescriptions.RxProductLookup.Representation:type_name -> ADAPT.Representations.NumericRepresentation
	21, // 22: ADAPT.Prescriptions.RxProductLookup.UnitOfMeasure:type_name -> ADAPT.Common.UnitOfMeasure
	16, // 23: ADAPT.Prescriptions.RxProductLookup.OutOfFieldRate:type_name -> ADAPT.Representations.NumericRepresentationValue
	16, // 24: ADAPT.Prescriptions.RxProductLookup.LossOfGpsRate:type_name -> ADAPT.Representations.NumericRepresentationValue
	3,  // 25: ADAPT.Prescriptions.RxRadialLookup.Extent:type_name -> ADAPT.Prescriptions.RadialExtent
	8,  // 26: ADAPT.Prescriptions.RxRadialLookup.RxRates:type_name -> ADAPT.Prescriptions.RxRate
	18, // 27: ADAPT.Prescriptions.RxShapeLookup.Shape:type_name -> ADAPT.Shapes.Shape
	8,  // 28: ADAPT.Prescriptions.RxShapeLookup.Rates:type_name -> ADAPT.Prescriptions.RxRate
	22, // 29: ADAPT.Prescriptions.SpatialPrescription.BoundingBox:type_name -> ADAPT.Shapes.BoundingBox
	16, // 30: ADAPT.Prescriptions.SpatialPrescription.OutOfFieldRate:type_name -> ADAPT.Representations.NumericRepresentationValue
	16, // 31: ADAPT.Prescriptions.SpatialPrescription.LossOfGpsRate:type_name -> ADAPT.Representations.NumericRepresentationValue
	6,  // 32: ADAPT.Prescriptions.SpatialPrescription.RasterGridPrescription:type_name -> ADAPT.Prescriptions.RasterGridPrescription
	13, // 33: ADAPT.Prescriptions.SpatialPrescription.VectorPrescription:type_name -> ADAPT.Prescriptions.VectorPrescription
	5,  // 34: ADAPT.Prescriptions.SpatialPrescription.RadialPrescription:type_name -> ADAPT.Prescriptions.RadialPrescription
	11, // 35: ADAPT.Prescriptions.VectorPrescription.RxShapeLookups:type_name -> ADAPT.Prescriptions.RxShapeLookup
	19, // 36: ADAPT.Prescriptions.Prescription.Id:type_name -> ADAPT.Common.CompoundIdentifier
	23, // 37: ADAPT.Prescriptions.Prescription.OperationType:type_name -> ADAPT.Common.OperationType
	9,  // 38: ADAPT.Prescriptions.Prescription.RxProductLookups:type_name -> ADAPT.Prescriptions.RxProductLookup
	24, // 39: ADAPT.Prescriptions.Prescription.ContextItems:type_name -> ADAPT.Common.ContextItem
	25, // 40: ADAPT.Prescriptions.Prescription.TimeScopes:type_name -> ADAPT.Common.TimeScope
	26, // 41: ADAPT.Prescriptions.Prescription.PersonRoles:type_name -> ADAPT.Logistics.PersonRole
	2,  // 42: ADAPT.Prescriptions.Prescription.ManualPrescription:type_name -> ADAPT.Prescriptions.ManualPrescription
	12, // 43: ADAPT.Prescriptions.Prescription.SpatialPrescription:type_name -> ADAPT.Prescriptions.SpatialPrescription
	44, // [44:44] is the sub-list for method output_type
	44, // [44:44] is the sub-list for method input_type
	44, // [44:44] is the sub-list for extension type_name
	44, // [44:44] is the sub-list for extension extendee
	0,  // [0:44] is the sub-list for field type_name
}

func init() { file_Prescriptions_proto_init() }
func file_Prescriptions_proto_init() {
	if File_Prescriptions_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_Prescriptions_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Prescriptions_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManualPrescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Prescriptions_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RadialExtent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Prescriptions_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RadialLookupCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Prescriptions_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RadialPrescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Prescriptions_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RasterGridPrescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Prescriptions_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RxCellLookup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Prescriptions_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RxRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Prescriptions_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RxProductLookup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Prescriptions_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RxRadialLookup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Prescriptions_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RxShapeLookup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Prescriptions_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpatialPrescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Prescriptions_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorPrescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Prescriptions_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Prescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_Prescriptions_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*SpatialPrescription_RasterGridPrescription)(nil),
		(*SpatialPrescription_VectorPrescription)(nil),
		(*SpatialPrescription_RadialPrescription)(nil),
	}
	file_Prescriptions_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*Prescription_ManualPrescription)(nil),
		(*Prescription_SpatialPrescription)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Prescriptions_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Prescriptions_proto_goTypes,
		DependencyIndexes: file_Prescriptions_proto_depIdxs,
		EnumInfos:         file_Prescriptions_proto_enumTypes,
		MessageInfos:      file_Prescriptions_proto_msgTypes,
	}.Build()
	File_Prescriptions_proto = out.File
	file_Prescriptions_proto_rawDesc = nil
	file_Prescriptions_proto_goTypes = nil
	file_Prescriptions_proto_depIdxs = nil
}
