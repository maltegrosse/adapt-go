// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.19.6
// source: Products.proto

package Products

import (
	Common "github.com/maltegrosse/adapt-go/Common"
	Representations "github.com/maltegrosse/adapt-go/Representations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProductFormEnum int32

const (
	ProductFormEnum_Gas     ProductFormEnum = 0
	ProductFormEnum_Liquid  ProductFormEnum = 1
	ProductFormEnum_Solid   ProductFormEnum = 2
	ProductFormEnum_Unknown ProductFormEnum = 3
)

// Enum value maps for ProductFormEnum.
var (
	ProductFormEnum_name = map[int32]string{
		0: "Gas",
		1: "Liquid",
		2: "Solid",
		3: "Unknown",
	}
	ProductFormEnum_value = map[string]int32{
		"Gas":     0,
		"Liquid":  1,
		"Solid":   2,
		"Unknown": 3,
	}
)

func (x ProductFormEnum) Enum() *ProductFormEnum {
	p := new(ProductFormEnum)
	*p = x
	return p
}

func (x ProductFormEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProductFormEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_Products_proto_enumTypes[0].Descriptor()
}

func (ProductFormEnum) Type() protoreflect.EnumType {
	return &file_Products_proto_enumTypes[0]
}

func (x ProductFormEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProductFormEnum.Descriptor instead.
func (ProductFormEnum) EnumDescriptor() ([]byte, []int) {
	return file_Products_proto_rawDescGZIP(), []int{0}
}

type Category_CategoryEnum int32

const (
	Category_Additive           Category_CategoryEnum = 0
	Category_Carrier            Category_CategoryEnum = 1
	Category_Fungicide          Category_CategoryEnum = 2
	Category_GrowthRegulator    Category_CategoryEnum = 3
	Category_Insecticide        Category_CategoryEnum = 4
	Category_Herbicide          Category_CategoryEnum = 5
	Category_Manure             Category_CategoryEnum = 6
	Category_NitrogenStabilizer Category_CategoryEnum = 7
	Category_Unknown            Category_CategoryEnum = 8
	Category_Variety            Category_CategoryEnum = 9
	Category_Fertilizer         Category_CategoryEnum = 10 //non-manure
	Category_Pesticide          Category_CategoryEnum = 11 //non-Insecticide
	Category_Adjuvant           Category_CategoryEnum = 12
	Category_Defoliant          Category_CategoryEnum = 13
)

// Enum value maps for Category_CategoryEnum.
var (
	Category_CategoryEnum_name = map[int32]string{
		0:  "Additive",
		1:  "Carrier",
		2:  "Fungicide",
		3:  "GrowthRegulator",
		4:  "Insecticide",
		5:  "Herbicide",
		6:  "Manure",
		7:  "NitrogenStabilizer",
		8:  "Unknown",
		9:  "Variety",
		10: "Fertilizer",
		11: "Pesticide",
		12: "Adjuvant",
		13: "Defoliant",
	}
	Category_CategoryEnum_value = map[string]int32{
		"Additive":           0,
		"Carrier":            1,
		"Fungicide":          2,
		"GrowthRegulator":    3,
		"Insecticide":        4,
		"Herbicide":          5,
		"Manure":             6,
		"NitrogenStabilizer": 7,
		"Unknown":            8,
		"Variety":            9,
		"Fertilizer":         10,
		"Pesticide":          11,
		"Adjuvant":           12,
		"Defoliant":          13,
	}
)

func (x Category_CategoryEnum) Enum() *Category_CategoryEnum {
	p := new(Category_CategoryEnum)
	*p = x
	return p
}

func (x Category_CategoryEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Category_CategoryEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_Products_proto_enumTypes[1].Descriptor()
}

func (Category_CategoryEnum) Type() protoreflect.EnumType {
	return &file_Products_proto_enumTypes[1]
}

func (x Category_CategoryEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Category_CategoryEnum.Descriptor instead.
func (Category_CategoryEnum) EnumDescriptor() ([]byte, []int) {
	return file_Products_proto_rawDescGZIP(), []int{2, 0}
}

type ContainerModelStatus_ContainerModelStatusEnum int32

const (
	ContainerModelStatus_Active       ContainerModelStatus_ContainerModelStatusEnum = 0
	ContainerModelStatus_Inactive     ContainerModelStatus_ContainerModelStatusEnum = 1
	ContainerModelStatus_Retired      ContainerModelStatus_ContainerModelStatusEnum = 2
	ContainerModelStatus_NoLongerSold ContainerModelStatus_ContainerModelStatusEnum = 3
)

// Enum value maps for ContainerModelStatus_ContainerModelStatusEnum.
var (
	ContainerModelStatus_ContainerModelStatusEnum_name = map[int32]string{
		0: "Active",
		1: "Inactive",
		2: "Retired",
		3: "NoLongerSold",
	}
	ContainerModelStatus_ContainerModelStatusEnum_value = map[string]int32{
		"Active":       0,
		"Inactive":     1,
		"Retired":      2,
		"NoLongerSold": 3,
	}
)

func (x ContainerModelStatus_ContainerModelStatusEnum) Enum() *ContainerModelStatus_ContainerModelStatusEnum {
	p := new(ContainerModelStatus_ContainerModelStatusEnum)
	*p = x
	return p
}

func (x ContainerModelStatus_ContainerModelStatusEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContainerModelStatus_ContainerModelStatusEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_Products_proto_enumTypes[2].Descriptor()
}

func (ContainerModelStatus_ContainerModelStatusEnum) Type() protoreflect.EnumType {
	return &file_Products_proto_enumTypes[2]
}

func (x ContainerModelStatus_ContainerModelStatusEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContainerModelStatus_ContainerModelStatusEnum.Descriptor instead.
func (ContainerModelStatus_ContainerModelStatusEnum) EnumDescriptor() ([]byte, []int) {
	return file_Products_proto_rawDescGZIP(), []int{6, 0}
}

type ContainerUseType_ContainerUseTypeEnum int32

const (
	ContainerUseType_Disposable ContainerUseType_ContainerUseTypeEnum = 0
	ContainerUseType_Reusable   ContainerUseType_ContainerUseTypeEnum = 1
	ContainerUseType_Fixed      ContainerUseType_ContainerUseTypeEnum = 2
	ContainerUseType_Mobile     ContainerUseType_ContainerUseTypeEnum = 3
)

// Enum value maps for ContainerUseType_ContainerUseTypeEnum.
var (
	ContainerUseType_ContainerUseTypeEnum_name = map[int32]string{
		0: "Disposable",
		1: "Reusable",
		2: "Fixed",
		3: "Mobile",
	}
	ContainerUseType_ContainerUseTypeEnum_value = map[string]int32{
		"Disposable": 0,
		"Reusable":   1,
		"Fixed":      2,
		"Mobile":     3,
	}
)

func (x ContainerUseType_ContainerUseTypeEnum) Enum() *ContainerUseType_ContainerUseTypeEnum {
	p := new(ContainerUseType_ContainerUseTypeEnum)
	*p = x
	return p
}

func (x ContainerUseType_ContainerUseTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContainerUseType_ContainerUseTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_Products_proto_enumTypes[3].Descriptor()
}

func (ContainerUseType_ContainerUseTypeEnum) Type() protoreflect.EnumType {
	return &file_Products_proto_enumTypes[3]
}

func (x ContainerUseType_ContainerUseTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContainerUseType_ContainerUseTypeEnum.Descriptor instead.
func (ContainerUseType_ContainerUseTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_Products_proto_rawDescGZIP(), []int{7, 0}
}

type ProductStatus_ProductStatusEnum int32

const (
	ProductStatus_Active       ProductStatus_ProductStatusEnum = 0
	ProductStatus_Inactive     ProductStatus_ProductStatusEnum = 1
	ProductStatus_Retired      ProductStatus_ProductStatusEnum = 2
	ProductStatus_NoLongerSold ProductStatus_ProductStatusEnum = 3
)

// Enum value maps for ProductStatus_ProductStatusEnum.
var (
	ProductStatus_ProductStatusEnum_name = map[int32]string{
		0: "Active",
		1: "Inactive",
		2: "Retired",
		3: "NoLongerSold",
	}
	ProductStatus_ProductStatusEnum_value = map[string]int32{
		"Active":       0,
		"Inactive":     1,
		"Retired":      2,
		"NoLongerSold": 3,
	}
)

func (x ProductStatus_ProductStatusEnum) Enum() *ProductStatus_ProductStatusEnum {
	p := new(ProductStatus_ProductStatusEnum)
	*p = x
	return p
}

func (x ProductStatus_ProductStatusEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProductStatus_ProductStatusEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_Products_proto_enumTypes[4].Descriptor()
}

func (ProductStatus_ProductStatusEnum) Type() protoreflect.EnumType {
	return &file_Products_proto_enumTypes[4]
}

func (x ProductStatus_ProductStatusEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProductStatus_ProductStatusEnum.Descriptor instead.
func (ProductStatus_ProductStatusEnum) EnumDescriptor() ([]byte, []int) {
	return file_Products_proto_rawDescGZIP(), []int{20, 0}
}

type PackagedProductStatus_PackagedProductStatusEnum int32

const (
	PackagedProductStatus_Active       PackagedProductStatus_PackagedProductStatusEnum = 0
	PackagedProductStatus_Inactive     PackagedProductStatus_PackagedProductStatusEnum = 1
	PackagedProductStatus_Retired      PackagedProductStatus_PackagedProductStatusEnum = 2
	PackagedProductStatus_NoLongerSold PackagedProductStatus_PackagedProductStatusEnum = 3
)

// Enum value maps for PackagedProductStatus_PackagedProductStatusEnum.
var (
	PackagedProductStatus_PackagedProductStatusEnum_name = map[int32]string{
		0: "Active",
		1: "Inactive",
		2: "Retired",
		3: "NoLongerSold",
	}
	PackagedProductStatus_PackagedProductStatusEnum_value = map[string]int32{
		"Active":       0,
		"Inactive":     1,
		"Retired":      2,
		"NoLongerSold": 3,
	}
)

func (x PackagedProductStatus_PackagedProductStatusEnum) Enum() *PackagedProductStatus_PackagedProductStatusEnum {
	p := new(PackagedProductStatus_PackagedProductStatusEnum)
	*p = x
	return p
}

func (x PackagedProductStatus_PackagedProductStatusEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PackagedProductStatus_PackagedProductStatusEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_Products_proto_enumTypes[5].Descriptor()
}

func (PackagedProductStatus_PackagedProductStatusEnum) Type() protoreflect.EnumType {
	return &file_Products_proto_enumTypes[5]
}

func (x PackagedProductStatus_PackagedProductStatusEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PackagedProductStatus_PackagedProductStatusEnum.Descriptor instead.
func (PackagedProductStatus_PackagedProductStatusEnum) EnumDescriptor() ([]byte, []int) {
	return file_Products_proto_rawDescGZIP(), []int{21, 0}
}

type ProductType_ProductTypeEnum int32

const (
	ProductType_Chemical   ProductType_ProductTypeEnum = 0
	ProductType_Fertilizer ProductType_ProductTypeEnum = 1
	ProductType_Generic    ProductType_ProductTypeEnum = 2
	ProductType_Mix        ProductType_ProductTypeEnum = 3
	ProductType_Variety    ProductType_ProductTypeEnum = 4
)

// Enum value maps for ProductType_ProductTypeEnum.
var (
	ProductType_ProductTypeEnum_name = map[int32]string{
		0: "Chemical",
		1: "Fertilizer",
		2: "Generic",
		3: "Mix",
		4: "Variety",
	}
	ProductType_ProductTypeEnum_value = map[string]int32{
		"Chemical":   0,
		"Fertilizer": 1,
		"Generic":    2,
		"Mix":        3,
		"Variety":    4,
	}
)

func (x ProductType_ProductTypeEnum) Enum() *ProductType_ProductTypeEnum {
	p := new(ProductType_ProductTypeEnum)
	*p = x
	return p
}

func (x ProductType_ProductTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProductType_ProductTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_Products_proto_enumTypes[6].Descriptor()
}

func (ProductType_ProductTypeEnum) Type() protoreflect.EnumType {
	return &file_Products_proto_enumTypes[6]
}

func (x ProductType_ProductTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProductType_ProductTypeEnum.Descriptor instead.
func (ProductType_ProductTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_Products_proto_rawDescGZIP(), []int{26, 0}
}

type ActiveIngredient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActiveIngredient) Reset() {
	*x = ActiveIngredient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Products_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActiveIngredient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveIngredient) ProtoMessage() {}

func (x *ActiveIngredient) ProtoReflect() protoreflect.Message {
	mi := &file_Products_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveIngredient.ProtoReflect.Descriptor instead.
func (*ActiveIngredient) Descriptor() ([]byte, []int) {
	return file_Products_proto_rawDescGZIP(), []int{0}
}

type AvailableProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           *Common.CompoundIdentifier `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	ProductId    int64                      `protobuf:"varint,2,opt,name=ProductId,proto3" json:"ProductId,omitempty"`
	GrowerId     int64                      `protobuf:"varint,3,opt,name=GrowerId,proto3" json:"GrowerId,omitempty"`
	ContextItems []*Common.ContextItem      `protobuf:"bytes,4,rep,name=ContextItems,proto3" json:"ContextItems,omitempty"`
	TimeScopes   []*Common.TimeScope        `protobuf:"bytes,5,rep,name=TimeScopes,proto3" json:"TimeScopes,omitempty"`
}

func (x *AvailableProduct) Reset() {
	*x = AvailableProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Products_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableProduct) ProtoMessage() {}

func (x *AvailableProduct) ProtoReflect() protoreflect.Message {
	mi := &file_Products_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableProduct.ProtoReflect.Descriptor instead.
func (*AvailableProduct) Descriptor() ([]byte, []int) {
	return file_Products_proto_rawDescGZIP(), []int{1}
}

func (x *AvailableProduct) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AvailableProduct) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *AvailableProduct) GetGrowerId() int64 {
	if x != nil {
		return x.GrowerId
	}
	return 0
}

func (x *AvailableProduct) GetContextItems() []*Common.ContextItem {
	if x != nil {
		return x.ContextItems
	}
	return nil
}

func (x *AvailableProduct) GetTimeScopes() []*Common.TimeScope {
	if x != nil {
		return x.TimeScopes
	}
	return nil
}

type Category struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Category) Reset() {
	*x = Category{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Products_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Category) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Category) ProtoMessage() {}

func (x *Category) ProtoReflect() protoreflect.Message {
	mi := &file_Products_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Category.ProtoReflect.Descriptor instead.
func (*Category) Descriptor() ([]byte, []int) {
	return file_Products_proto_rawDescGZIP(), []int{2}
}

type ContainedPackagedProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PackagedProductId int64 `protobuf:"varint,1,opt,name=PackagedProductId,proto3" json:"PackagedProductId,omitempty"`
	Count             int64 `protobuf:"varint,2,opt,name=Count,proto3" json:"Count,omitempty"`
}

func (x *ContainedPackagedProduct) Reset() {
	*x = ContainedPackagedProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Products_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainedPackagedProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainedPackagedProduct) ProtoMessage() {}

func (x *ContainedPackagedProduct) ProtoReflect() protoreflect.Message {
	mi := &file_Products_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainedPackagedProduct.ProtoReflect.Descriptor instead.
func (*ContainedPackagedProduct) Descriptor() ([]byte, []int) {
	return file_Products_proto_rawDescGZIP(), []int{3}
}

func (x *ContainedPackagedProduct) GetPackagedProductId() int64 {
	if x != nil {
		return x.PackagedProductId
	}
	return 0
}

func (x *ContainedPackagedProduct) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type Container struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                           *Common.CompoundIdentifier `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Description                  string                     `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	ContainerModelId             int64                      `protobuf:"varint,3,opt,name=ContainerModelId,proto3" json:"ContainerModelId,omitempty"`
	ContainerUseType             *ContainerUseType          `protobuf:"bytes,4,opt,name=ContainerUseType,proto3" json:"ContainerUseType,omitempty"`
	CorrespondingDeviceElementId int64                      `protobuf:"varint,5,opt,name=CorrespondingDeviceElementId,proto3" json:"CorrespondingDeviceElementId,omitempty"`
	ContextItems                 []*Common.ContextItem      `protobuf:"bytes,6,rep,name=ContextItems,proto3" json:"ContextItems,omitempty"`
}

func (x *Container) Reset() {
	*x = Container{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Products_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Container) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Container) ProtoMessage() {}

func (x *Container) ProtoReflect() protoreflect.Message {
	mi := &file_Products_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Container.ProtoReflect.Descriptor instead.
func (*Container) Descriptor() ([]byte, []int) {
	return file_Products_proto_rawDescGZIP(), []int{4}
}

func (x *Container) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Container) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Container) GetContainerModelId() int64 {
	if x != nil {
		return x.ContainerModelId
	}
	return 0
}

func (x *Container) GetContainerUseType() *ContainerUseType {
	if x != nil {
		return x.ContainerUseType
	}
	return nil
}

func (x *Container) GetCorrespondingDeviceElementId() int64 {
	if x != nil {
		return x.CorrespondingDeviceElementId
	}
	return 0
}

func (x *Container) GetContextItems() []*Common.ContextItem {
	if x != nil {
		return x.ContextItems
	}
	return nil
}

type ContainerModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *Common.CompoundIdentifier                  `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Description    string                                      `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	Status         *ContainerModelStatus                       `protobuf:"bytes,3,opt,name=Status,proto3" json:"Status,omitempty"`
	Capacity       *Representations.NumericRepresentationValue `protobuf:"bytes,4,opt,name=Capacity,proto3" json:"Capacity,omitempty"`
	DefaultUseType *ContainerUseType                           `protobuf:"bytes,5,opt,name=DefaultUseType,proto3" json:"DefaultUseType,omitempty"`
	Length         *Representations.NumericRepresentationValue `protobuf:"bytes,6,opt,name=Length,proto3" json:"Length,omitempty"`
	Width          *Representations.NumericRepresentationValue `protobuf:"bytes,7,opt,name=Width,proto3" json:"Width,omitempty"`
	Height         *Representations.NumericRepresentationValue `protobuf:"bytes,8,opt,name=Height,proto3" json:"Height,omitempty"`
	ContextItems   []*Common.ContextItem                       `protobuf:"bytes,9,rep,name=ContextItems,proto3" json:"ContextItems,omitempty"`
}

func (x *ContainerModel) Reset() {
	*x = ContainerModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Products_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerModel) ProtoMessage() {}

func (x *ContainerModel) ProtoReflect() protoreflect.Message {
	mi := &file_Products_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerModel.ProtoReflect.Descriptor instead.
func (*ContainerModel) Descriptor() ([]byte, []int) {
	return file_Products_proto_rawDescGZIP(), []int{5}
}

func (x *ContainerModel) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ContainerModel) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ContainerModel) GetStatus() *ContainerModelStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ContainerModel) GetCapacity() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.Capacity
	}
	return nil
}

func (x *ContainerModel) GetDefaultUseType() *ContainerUseType {
	if x != nil {
		return x.DefaultUseType
	}
	return nil
}

func (x *ContainerModel) GetLength() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.Length
	}
	return nil
}

func (x *ContainerModel) GetWidth() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.Width
	}
	return nil
}

func (x *ContainerModel) GetHeight() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.Height
	}
	return nil
}

func (x *ContainerModel) GetContextItems() []*Common.ContextItem {
	if x != nil {
		return x.ContextItems
	}
	return nil
}

type ContainerModelStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ContainerModelStatus) Reset() {
	*x = ContainerModelStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Products_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerModelStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerModelStatus) ProtoMessage() {}

func (x *ContainerModelStatus) ProtoReflect() protoreflect.Message {
	mi := &file_Products_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerModelStatus.ProtoReflect.Descriptor instead.
func (*ContainerModelStatus) Descriptor() ([]byte, []int) {
	return file_Products_proto_rawDescGZIP(), []int{6}
}

type ContainerUseType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ContainerUseType) Reset() {
	*x = ContainerUseType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Products_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerUseType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerUseType) ProtoMessage() {}

func (x *ContainerUseType) ProtoReflect() protoreflect.Message {
	mi := &file_Products_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerUseType.ProtoReflect.Descriptor instead.
func (*ContainerUseType) Descriptor() ([]byte, []int) {
	return file_Products_proto_rawDescGZIP(), []int{7}
}

type Crop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      *Common.CompoundIdentifier                  `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name                    string                                      `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	ParentId                int64                                       `protobuf:"varint,3,opt,name=ParentId,proto3" json:"ParentId,omitempty"`
	ReferenceWeight         *Representations.NumericRepresentationValue `protobuf:"bytes,4,opt,name=ReferenceWeight,proto3" json:"ReferenceWeight,omitempty"`
	StandardPayableMoisture *Representations.NumericRepresentationValue `protobuf:"bytes,5,opt,name=StandardPayableMoisture,proto3" json:"StandardPayableMoisture,omitempty"`
	ContextItems            []*Common.ContextItem                       `protobuf:"bytes,6,rep,name=ContextItems,proto3" json:"ContextItems,omitempty"`
}

func (x *Crop) Reset() {
	*x = Crop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Products_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Crop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Crop) ProtoMessage() {}

func (x *Crop) ProtoReflect() protoreflect.Message {
	mi := &file_Products_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Crop.ProtoReflect.Descriptor instead.
func (*Crop) Descriptor() ([]byte, []int) {
	return file_Products_proto_rawDescGZIP(), []int{8}
}

func (x *Crop) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Crop) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Crop) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *Crop) GetReferenceWeight() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.ReferenceWeight
	}
	return nil
}

func (x *Crop) GetStandardPayableMoisture() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.StandardPayableMoisture
	}
	return nil
}

func (x *Crop) GetContextItems() []*Common.ContextItem {
	if x != nil {
		return x.ContextItems
	}
	return nil
}

type CropNutritionIngredient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IngredientCode *Representations.EnumeratedValue `protobuf:"bytes,1,opt,name=IngredientCode,proto3" json:"IngredientCode,omitempty"`
}

func (x *CropNutritionIngredient) Reset() {
	*x = CropNutritionIngredient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Products_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CropNutritionIngredient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CropNutritionIngredient) ProtoMessage() {}

func (x *CropNutritionIngredient) ProtoReflect() protoreflect.Message {
	mi := &file_Products_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CropNutritionIngredient.ProtoReflect.Descriptor instead.
func (*CropNutritionIngredient) Descriptor() ([]byte, []int) {
	return file_Products_proto_rawDescGZIP(), []int{9}
}

func (x *CropNutritionIngredient) GetIngredientCode() *Representations.EnumeratedValue {
	if x != nil {
		return x.IngredientCode
	}
	return nil
}

type CropNutritionProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsManure bool `protobuf:"varint,1,opt,name=IsManure,proto3" json:"IsManure,omitempty"`
}

func (x *CropNutritionProduct) Reset() {
	*x = CropNutritionProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Products_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CropNutritionProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CropNutritionProduct) ProtoMessage() {}

func (x *CropNutritionProduct) ProtoReflect() protoreflect.Message {
	mi := &file_Products_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CropNutritionProduct.ProtoReflect.Descriptor instead.
func (*CropNutritionProduct) Descriptor() ([]byte, []int) {
	return file_Products_proto_rawDescGZIP(), []int{10}
}

func (x *CropNutritionProduct) GetIsManure() bool {
	if x != nil {
		return x.IsManure
	}
	return false
}

type CropProtectionProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Biological      bool `protobuf:"varint,1,opt,name=Biological,proto3" json:"Biological,omitempty"`
	Organophosphate bool `protobuf:"varint,2,opt,name=Organophosphate,proto3" json:"Organophosphate,omitempty"`
	Carbamate       bool `protobuf:"varint,3,opt,name=Carbamate,proto3" json:"Carbamate,omitempty"`
}

func (x *CropProtectionProduct) Reset() {
	*x = CropProtectionProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Products_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CropProtectionProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CropProtectionProduct) ProtoMessage() {}

func (x *CropProtectionProduct) ProtoReflect() protoreflect.Message {
	mi := &file_Products_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CropProtectionProduct.ProtoReflect.Descriptor instead.
func (*CropProtectionProduct) Descriptor() ([]byte, []int) {
	return file_Products_proto_rawDescGZIP(), []int{11}
}

func (x *CropProtectionProduct) GetBiological() bool {
	if x != nil {
		return x.Biological
	}
	return false
}

func (x *CropProtectionProduct) GetOrganophosphate() bool {
	if x != nil {
		return x.Organophosphate
	}
	return false
}

func (x *CropProtectionProduct) GetCarbamate() bool {
	if x != nil {
		return x.Carbamate
	}
	return false
}

type CropVarietyProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CropId              int64   `protobuf:"varint,1,opt,name=CropId,proto3" json:"CropId,omitempty"`
	TraitIds            []int64 `protobuf:"varint,2,rep,packed,name=TraitIds,proto3" json:"TraitIds,omitempty"`
	GeneticallyEnhanced bool    `protobuf:"varint,3,opt,name=GeneticallyEnhanced,proto3" json:"GeneticallyEnhanced,omitempty"`
}

func (x *CropVarietyProduct) Reset() {
	*x = CropVarietyProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Products_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CropVarietyProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CropVarietyProduct) ProtoMessage() {}

func (x *CropVarietyProduct) ProtoReflect() protoreflect.Message {
	mi := &file_Products_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CropVarietyProduct.ProtoReflect.Descriptor instead.
func (*CropVarietyProduct) Descriptor() ([]byte, []int) {
	return file_Products_proto_rawDescGZIP(), []int{12}
}

func (x *CropVarietyProduct) GetCropId() int64 {
	if x != nil {
		return x.CropId
	}
	return 0
}

func (x *CropVarietyProduct) GetTraitIds() []int64 {
	if x != nil {
		return x.TraitIds
	}
	return nil
}

func (x *CropVarietyProduct) GetGeneticallyEnhanced() bool {
	if x != nil {
		return x.GeneticallyEnhanced
	}
	return false
}

type DensityFactor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           *Common.CompoundIdentifier                  `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	ProductId    int64                                       `protobuf:"varint,2,opt,name=ProductId,proto3" json:"ProductId,omitempty"`
	BatchNo      string                                      `protobuf:"bytes,3,opt,name=BatchNo,proto3" json:"BatchNo,omitempty"`
	LotNo        string                                      `protobuf:"bytes,4,opt,name=LotNo,proto3" json:"LotNo,omitempty"`
	Density      *Representations.NumericRepresentationValue `protobuf:"bytes,5,opt,name=Density,proto3" json:"Density,omitempty"`
	TimeScopeIds []int64                                     `protobuf:"varint,6,rep,name=TimeScopeIds,proto3" json:"TimeScopeIds,omitempty"`
}

func (x *DensityFactor) Reset() {
	*x = DensityFactor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Products_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DensityFactor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DensityFactor) ProtoMessage() {}

func (x *DensityFactor) ProtoReflect() protoreflect.Message {
	mi := &file_Products_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DensityFactor.ProtoReflect.Descriptor instead.
func (*DensityFactor) Descriptor() ([]byte, []int) {
	return file_Products_proto_rawDescGZIP(), []int{13}
}

func (x *DensityFactor) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DensityFactor) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *DensityFactor) GetBatchNo() string {
	if x != nil {
		return x.BatchNo
	}
	return ""
}

func (x *DensityFactor) GetLotNo() string {
	if x != nil {
		return x.LotNo
	}
	return ""
}

func (x *DensityFactor) GetDensity() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.Density
	}
	return nil
}

func (x *DensityFactor) GetTimeScopeIds() []int64 {
	if x != nil {
		return x.TimeScopeIds
	}
	return nil
}

type InertIngredient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InertIngredient) Reset() {
	*x = InertIngredient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Products_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InertIngredient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InertIngredient) ProtoMessage() {}

func (x *InertIngredient) ProtoReflect() protoreflect.Message {
	mi := &file_Products_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InertIngredient.ProtoReflect.Descriptor instead.
func (*InertIngredient) Descriptor() ([]byte, []int) {
	return file_Products_proto_rawDescGZIP(), []int{14}
}

type Ingredient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           *Common.CompoundIdentifier `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Description  string                     `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	ContextItems []*Common.ContextItem      `protobuf:"bytes,3,rep,name=ContextItems,proto3" json:"ContextItems,omitempty"`
	// Types that are assignable to Subtype:
	//
	//	*Ingredient_ActiveIngredient
	//	*Ingredient_CropNutritionIngredient
	Subtype isIngredient_Subtype `protobuf_oneof:"subtype"`
}

func (x *Ingredient) Reset() {
	*x = Ingredient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Products_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ingredient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ingredient) ProtoMessage() {}

func (x *Ingredient) ProtoReflect() protoreflect.Message {
	mi := &file_Products_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ingredient.ProtoReflect.Descriptor instead.
func (*Ingredient) Descriptor() ([]byte, []int) {
	return file_Products_proto_rawDescGZIP(), []int{15}
}

func (x *Ingredient) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Ingredient) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Ingredient) GetContextItems() []*Common.ContextItem {
	if x != nil {
		return x.ContextItems
	}
	return nil
}

func (m *Ingredient) GetSubtype() isIngredient_Subtype {
	if m != nil {
		return m.Subtype
	}
	return nil
}

func (x *Ingredient) GetActiveIngredient() *ActiveIngredient {
	if x, ok := x.GetSubtype().(*Ingredient_ActiveIngredient); ok {
		return x.ActiveIngredient
	}
	return nil
}

func (x *Ingredient) GetCropNutritionIngredient() *CropNutritionIngredient {
	if x, ok := x.GetSubtype().(*Ingredient_CropNutritionIngredient); ok {
		return x.CropNutritionIngredient
	}
	return nil
}

type isIngredient_Subtype interface {
	isIngredient_Subtype()
}

type Ingredient_ActiveIngredient struct {
	ActiveIngredient *ActiveIngredient `protobuf:"bytes,101,opt,name=ActiveIngredient,proto3,oneof"`
}

type Ingredient_CropNutritionIngredient struct {
	CropNutritionIngredient *CropNutritionIngredient `protobuf:"bytes,102,opt,name=CropNutritionIngredient,proto3,oneof"`
}

func (*Ingredient_ActiveIngredient) isIngredient_Subtype() {}

func (*Ingredient_CropNutritionIngredient) isIngredient_Subtype() {}

type IngredientUse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           *Common.CompoundIdentifier `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	ProductId    int64                      `protobuf:"varint,2,opt,name=ProductId,proto3" json:"ProductId,omitempty"`
	IngredientId int64                      `protobuf:"varint,3,opt,name=IngredientId,proto3" json:"IngredientId,omitempty"`
	Fraction     float64                    `protobuf:"fixed64,4,opt,name=Fraction,proto3" json:"Fraction,omitempty"`
	IsProduct    bool                       `protobuf:"varint,5,opt,name=IsProduct,proto3" json:"IsProduct,omitempty"`
}

func (x *IngredientUse) Reset() {
	*x = IngredientUse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Products_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngredientUse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngredientUse) ProtoMessage() {}

func (x *IngredientUse) ProtoReflect() protoreflect.Message {
	mi := &file_Products_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngredientUse.ProtoReflect.Descriptor instead.
func (*IngredientUse) Descriptor() ([]byte, []int) {
	return file_Products_proto_rawDescGZIP(), []int{16}
}

func (x *IngredientUse) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *IngredientUse) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *IngredientUse) GetIngredientId() int64 {
	if x != nil {
		return x.IngredientId
	}
	return 0
}

func (x *IngredientUse) GetFraction() float64 {
	if x != nil {
		return x.Fraction
	}
	return 0
}

func (x *IngredientUse) GetIsProduct() bool {
	if x != nil {
		return x.IsProduct
	}
	return false
}

type MixProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalQuantity *Representations.NumericRepresentationValue `protobuf:"bytes,1,opt,name=TotalQuantity,proto3" json:"TotalQuantity,omitempty"`
	IsTemporary   bool                                        `protobuf:"varint,2,opt,name=IsTemporary,proto3" json:"IsTemporary,omitempty"`
	IsHotMix      bool                                        `protobuf:"varint,3,opt,name=IsHotMix,proto3" json:"IsHotMix,omitempty"`
}

func (x *MixProduct) Reset() {
	*x = MixProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Products_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MixProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MixProduct) ProtoMessage() {}

func (x *MixProduct) ProtoReflect() protoreflect.Message {
	mi := &file_Products_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MixProduct.ProtoReflect.Descriptor instead.
func (*MixProduct) Descriptor() ([]byte, []int) {
	return file_Products_proto_rawDescGZIP(), []int{17}
}

func (x *MixProduct) GetTotalQuantity() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.TotalQuantity
	}
	return nil
}

func (x *MixProduct) GetIsTemporary() bool {
	if x != nil {
		return x.IsTemporary
	}
	return false
}

func (x *MixProduct) GetIsHotMix() bool {
	if x != nil {
		return x.IsHotMix
	}
	return false
}

type PackagedProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        *Common.CompoundIdentifier                  `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Description               string                                      `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	ProductId                 int64                                       `protobuf:"varint,3,opt,name=ProductId,proto3" json:"ProductId,omitempty"`
	ContainerModelId          int64                                       `protobuf:"varint,4,opt,name=ContainerModelId,proto3" json:"ContainerModelId,omitempty"`
	IsBulk                    bool                                        `protobuf:"varint,5,opt,name=IsBulk,proto3" json:"IsBulk,omitempty"`
	Status                    *PackagedProductStatus                      `protobuf:"bytes,6,opt,name=Status,proto3" json:"Status,omitempty"`
	ProductQuantity           *Representations.NumericRepresentationValue `protobuf:"bytes,7,opt,name=ProductQuantity,proto3" json:"ProductQuantity,omitempty"`
	ContainedPackagedProducts []*ContainedPackagedProduct                 `protobuf:"bytes,8,rep,name=ContainedPackagedProducts,proto3" json:"ContainedPackagedProducts,omitempty"`
	GrossWeight               *Representations.NumericRepresentationValue `protobuf:"bytes,9,opt,name=GrossWeight,proto3" json:"GrossWeight,omitempty"`
	NetWeight                 *Representations.NumericRepresentationValue `protobuf:"bytes,10,opt,name=NetWeight,proto3" json:"NetWeight,omitempty"`
	ContextItems              []*Common.ContextItem                       `protobuf:"bytes,11,rep,name=ContextItems,proto3" json:"ContextItems,omitempty"`
}

func (x *PackagedProduct) Reset() {
	*x = PackagedProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Products_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackagedProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackagedProduct) ProtoMessage() {}

func (x *PackagedProduct) ProtoReflect() protoreflect.Message {
	mi := &file_Products_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackagedProduct.ProtoReflect.Descriptor instead.
func (*PackagedProduct) Descriptor() ([]byte, []int) {
	return file_Products_proto_rawDescGZIP(), []int{18}
}

func (x *PackagedProduct) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PackagedProduct) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PackagedProduct) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *PackagedProduct) GetContainerModelId() int64 {
	if x != nil {
		return x.ContainerModelId
	}
	return 0
}

func (x *PackagedProduct) GetIsBulk() bool {
	if x != nil {
		return x.IsBulk
	}
	return false
}

func (x *PackagedProduct) GetStatus() *PackagedProductStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PackagedProduct) GetProductQuantity() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.ProductQuantity
	}
	return nil
}

func (x *PackagedProduct) GetContainedPackagedProducts() []*ContainedPackagedProduct {
	if x != nil {
		return x.ContainedPackagedProducts
	}
	return nil
}

func (x *PackagedProduct) GetGrossWeight() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.GrossWeight
	}
	return nil
}

func (x *PackagedProduct) GetNetWeight() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.NetWeight
	}
	return nil
}

func (x *PackagedProduct) GetContextItems() []*Common.ContextItem {
	if x != nil {
		return x.ContextItems
	}
	return nil
}

type PackagedProductInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                                  *Common.CompoundIdentifier                  `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Description                         string                                      `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	PackagedProductId                   int64                                       `protobuf:"varint,3,opt,name=PackagedProductId,proto3" json:"PackagedProductId,omitempty"`
	ProductQuantity                     *Representations.NumericRepresentationValue `protobuf:"bytes,4,opt,name=ProductQuantity,proto3" json:"ProductQuantity,omitempty"`
	ContainedPackagedProductInstanceIds []int64                                     `protobuf:"varint,5,rep,packed,name=ContainedPackagedProductInstanceIds,proto3" json:"ContainedPackagedProductInstanceIds,omitempty"`
	Height                              *Representations.NumericRepresentationValue `protobuf:"bytes,6,opt,name=Height,proto3" json:"Height,omitempty"`
	GrossWeight                         *Representations.NumericRepresentationValue `protobuf:"bytes,7,opt,name=GrossWeight,proto3" json:"GrossWeight,omitempty"`
	NetWeight                           *Representations.NumericRepresentationValue `protobuf:"bytes,8,opt,name=NetWeight,proto3" json:"NetWeight,omitempty"`
	ContainerId                         int64                                       `protobuf:"varint,9,opt,name=ContainerId,proto3" json:"ContainerId,omitempty"`
	ContextItems                        []*Common.ContextItem                       `protobuf:"bytes,10,rep,name=ContextItems,proto3" json:"ContextItems,omitempty"`
}

func (x *PackagedProductInstance) Reset() {
	*x = PackagedProductInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Products_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackagedProductInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackagedProductInstance) ProtoMessage() {}

func (x *PackagedProductInstance) ProtoReflect() protoreflect.Message {
	mi := &file_Products_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackagedProductInstance.ProtoReflect.Descriptor instead.
func (*PackagedProductInstance) Descriptor() ([]byte, []int) {
	return file_Products_proto_rawDescGZIP(), []int{19}
}

func (x *PackagedProductInstance) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PackagedProductInstance) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PackagedProductInstance) GetPackagedProductId() int64 {
	if x != nil {
		return x.PackagedProductId
	}
	return 0
}

func (x *PackagedProductInstance) GetProductQuantity() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.ProductQuantity
	}
	return nil
}

func (x *PackagedProductInstance) GetContainedPackagedProductInstanceIds() []int64 {
	if x != nil {
		return x.ContainedPackagedProductInstanceIds
	}
	return nil
}

func (x *PackagedProductInstance) GetHeight() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.Height
	}
	return nil
}

func (x *PackagedProductInstance) GetGrossWeight() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.GrossWeight
	}
	return nil
}

func (x *PackagedProductInstance) GetNetWeight() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.NetWeight
	}
	return nil
}

func (x *PackagedProductInstance) GetContainerId() int64 {
	if x != nil {
		return x.ContainerId
	}
	return 0
}

func (x *PackagedProductInstance) GetContextItems() []*Common.ContextItem {
	if x != nil {
		return x.ContextItems
	}
	return nil
}

type ProductStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProductStatus) Reset() {
	*x = ProductStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Products_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductStatus) ProtoMessage() {}

func (x *ProductStatus) ProtoReflect() protoreflect.Message {
	mi := &file_Products_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductStatus.ProtoReflect.Descriptor instead.
func (*ProductStatus) Descriptor() ([]byte, []int) {
	return file_Products_proto_rawDescGZIP(), []int{20}
}

type PackagedProductStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PackagedProductStatus) Reset() {
	*x = PackagedProductStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Products_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackagedProductStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackagedProductStatus) ProtoMessage() {}

func (x *PackagedProductStatus) ProtoReflect() protoreflect.Message {
	mi := &file_Products_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackagedProductStatus.ProtoReflect.Descriptor instead.
func (*PackagedProductStatus) Descriptor() ([]byte, []int) {
	return file_Products_proto_rawDescGZIP(), []int{21}
}

type Product struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  *Common.CompoundIdentifier                  `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	ContextItems        []*Common.ContextItem                       `protobuf:"bytes,2,rep,name=ContextItems,proto3" json:"ContextItems,omitempty"`
	ProductComponents   []*ProductComponent                         `protobuf:"bytes,3,rep,name=ProductComponents,proto3" json:"ProductComponents,omitempty"`
	BrandId             int64                                       `protobuf:"varint,15,opt,name=BrandId,proto3" json:"BrandId,omitempty"`
	Category            *Category                                   `protobuf:"bytes,16,opt,name=Category,proto3" json:"Category,omitempty"`
	Density             *Representations.NumericRepresentationValue `protobuf:"bytes,17,opt,name=Density,proto3" json:"Density,omitempty"`
	Description         string                                      `protobuf:"bytes,18,opt,name=Description,proto3" json:"Description,omitempty"`
	Form                ProductFormEnum                             `protobuf:"varint,19,opt,name=Form,proto3,enum=ADAPT.Products.ProductFormEnum" json:"Form,omitempty"`
	HasCropProtection   bool                                        `protobuf:"varint,20,opt,name=HasCropProtection,proto3" json:"HasCropProtection,omitempty"`
	HasCropNutrition    bool                                        `protobuf:"varint,21,opt,name=HasCropNutrition,proto3" json:"HasCropNutrition,omitempty"`
	HasCropVariety      bool                                        `protobuf:"varint,22,opt,name=HasCropVariety,proto3" json:"HasCropVariety,omitempty"`
	HasHarvestCommodity bool                                        `protobuf:"varint,23,opt,name=HasHarvestCommodity,proto3" json:"HasHarvestCommodity,omitempty"`
	ManufacturerId      int64                                       `protobuf:"varint,24,opt,name=ManufacturerId,proto3" json:"ManufacturerId,omitempty"`
	ProductType         *ProductType                                `protobuf:"bytes,25,opt,name=ProductType,proto3" json:"ProductType,omitempty"`
	Status              *ProductStatus                              `protobuf:"bytes,26,opt,name=Status,proto3" json:"Status,omitempty"`
	// Types that are assignable to Subtype:
	//
	//	*Product_GenericProduct
	//	*Product_HarvestedCommodityProduct
	//	*Product_CropProtectionProduct
	//	*Product_CropVarietyProduct
	//	*Product_CropNutritionProduct
	//	*Product_MixProduct
	Subtype         isProduct_Subtype `protobuf_oneof:"subtype"`
	SpecificGravity float64           `protobuf:"fixed64,27,opt,name=SpecificGravity,proto3" json:"SpecificGravity,omitempty"`
}

func (x *Product) Reset() {
	*x = Product{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Products_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product) ProtoMessage() {}

func (x *Product) ProtoReflect() protoreflect.Message {
	mi := &file_Products_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product.ProtoReflect.Descriptor instead.
func (*Product) Descriptor() ([]byte, []int) {
	return file_Products_proto_rawDescGZIP(), []int{22}
}

func (x *Product) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Product) GetContextItems() []*Common.ContextItem {
	if x != nil {
		return x.ContextItems
	}
	return nil
}

func (x *Product) GetProductComponents() []*ProductComponent {
	if x != nil {
		return x.ProductComponents
	}
	return nil
}

func (x *Product) GetBrandId() int64 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

func (x *Product) GetCategory() *Category {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *Product) GetDensity() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.Density
	}
	return nil
}

func (x *Product) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Product) GetForm() ProductFormEnum {
	if x != nil {
		return x.Form
	}
	return ProductFormEnum_Gas
}

func (x *Product) GetHasCropProtection() bool {
	if x != nil {
		return x.HasCropProtection
	}
	return false
}

func (x *Product) GetHasCropNutrition() bool {
	if x != nil {
		return x.HasCropNutrition
	}
	return false
}

func (x *Product) GetHasCropVariety() bool {
	if x != nil {
		return x.HasCropVariety
	}
	return false
}

func (x *Product) GetHasHarvestCommodity() bool {
	if x != nil {
		return x.HasHarvestCommodity
	}
	return false
}

func (x *Product) GetManufacturerId() int64 {
	if x != nil {
		return x.ManufacturerId
	}
	return 0
}

func (x *Product) GetProductType() *ProductType {
	if x != nil {
		return x.ProductType
	}
	return nil
}

func (x *Product) GetStatus() *ProductStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (m *Product) GetSubtype() isProduct_Subtype {
	if m != nil {
		return m.Subtype
	}
	return nil
}

func (x *Product) GetGenericProduct() *GenericProduct {
	if x, ok := x.GetSubtype().(*Product_GenericProduct); ok {
		return x.GenericProduct
	}
	return nil
}

func (x *Product) GetHarvestedCommodityProduct() *HarvestedCommodityProduct {
	if x, ok := x.GetSubtype().(*Product_HarvestedCommodityProduct); ok {
		return x.HarvestedCommodityProduct
	}
	return nil
}

func (x *Product) GetCropProtectionProduct() *CropProtectionProduct {
	if x, ok := x.GetSubtype().(*Product_CropProtectionProduct); ok {
		return x.CropProtectionProduct
	}
	return nil
}

func (x *Product) GetCropVarietyProduct() *CropVarietyProduct {
	if x, ok := x.GetSubtype().(*Product_CropVarietyProduct); ok {
		return x.CropVarietyProduct
	}
	return nil
}

func (x *Product) GetCropNutritionProduct() *CropNutritionProduct {
	if x, ok := x.GetSubtype().(*Product_CropNutritionProduct); ok {
		return x.CropNutritionProduct
	}
	return nil
}

func (x *Product) GetMixProduct() *MixProduct {
	if x, ok := x.GetSubtype().(*Product_MixProduct); ok {
		return x.MixProduct
	}
	return nil
}

func (x *Product) GetSpecificGravity() float64 {
	if x != nil {
		return x.SpecificGravity
	}
	return 0
}

type isProduct_Subtype interface {
	isProduct_Subtype()
}

type Product_GenericProduct struct {
	GenericProduct *GenericProduct `protobuf:"bytes,101,opt,name=GenericProduct,proto3,oneof"`
}

type Product_HarvestedCommodityProduct struct {
	HarvestedCommodityProduct *HarvestedCommodityProduct `protobuf:"bytes,102,opt,name=HarvestedCommodityProduct,proto3,oneof"`
}

type Product_CropProtectionProduct struct {
	CropProtectionProduct *CropProtectionProduct `protobuf:"bytes,103,opt,name=CropProtectionProduct,proto3,oneof"`
}

type Product_CropVarietyProduct struct {
	CropVarietyProduct *CropVarietyProduct `protobuf:"bytes,104,opt,name=CropVarietyProduct,proto3,oneof"`
}

type Product_CropNutritionProduct struct {
	CropNutritionProduct *CropNutritionProduct `protobuf:"bytes,105,opt,name=CropNutritionProduct,proto3,oneof"`
}

type Product_MixProduct struct {
	MixProduct *MixProduct `protobuf:"bytes,106,opt,name=MixProduct,proto3,oneof"`
}

func (*Product_GenericProduct) isProduct_Subtype() {}

func (*Product_HarvestedCommodityProduct) isProduct_Subtype() {}

func (*Product_CropProtectionProduct) isProduct_Subtype() {}

func (*Product_CropVarietyProduct) isProduct_Subtype() {}

func (*Product_CropNutritionProduct) isProduct_Subtype() {}

func (*Product_MixProduct) isProduct_Subtype() {}

type GenericProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GenericProduct) Reset() {
	*x = GenericProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Products_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericProduct) ProtoMessage() {}

func (x *GenericProduct) ProtoReflect() protoreflect.Message {
	mi := &file_Products_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericProduct.ProtoReflect.Descriptor instead.
func (*GenericProduct) Descriptor() ([]byte, []int) {
	return file_Products_proto_rawDescGZIP(), []int{23}
}

type HarvestedCommodityProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CropId int64 `protobuf:"varint,1,opt,name=CropId,proto3" json:"CropId,omitempty"`
}

func (x *HarvestedCommodityProduct) Reset() {
	*x = HarvestedCommodityProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Products_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HarvestedCommodityProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HarvestedCommodityProduct) ProtoMessage() {}

func (x *HarvestedCommodityProduct) ProtoReflect() protoreflect.Message {
	mi := &file_Products_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HarvestedCommodityProduct.ProtoReflect.Descriptor instead.
func (*HarvestedCommodityProduct) Descriptor() ([]byte, []int) {
	return file_Products_proto_rawDescGZIP(), []int{24}
}

func (x *HarvestedCommodityProduct) GetCropId() int64 {
	if x != nil {
		return x.CropId
	}
	return 0
}

type ProductComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IngredientId int64                                       `protobuf:"varint,1,opt,name=IngredientId,proto3" json:"IngredientId,omitempty"`
	Quantity     *Representations.NumericRepresentationValue `protobuf:"bytes,2,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
	IsProduct    bool                                        `protobuf:"varint,3,opt,name=IsProduct,proto3" json:"IsProduct,omitempty"`
	IsCarrier    bool                                        `protobuf:"varint,4,opt,name=IsCarrier,proto3" json:"IsCarrier,omitempty"`
}

func (x *ProductComponent) Reset() {
	*x = ProductComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Products_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductComponent) ProtoMessage() {}

func (x *ProductComponent) ProtoReflect() protoreflect.Message {
	mi := &file_Products_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductComponent.ProtoReflect.Descriptor instead.
func (*ProductComponent) Descriptor() ([]byte, []int) {
	return file_Products_proto_rawDescGZIP(), []int{25}
}

func (x *ProductComponent) GetIngredientId() int64 {
	if x != nil {
		return x.IngredientId
	}
	return 0
}

func (x *ProductComponent) GetQuantity() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *ProductComponent) GetIsProduct() bool {
	if x != nil {
		return x.IsProduct
	}
	return false
}

func (x *ProductComponent) GetIsCarrier() bool {
	if x != nil {
		return x.IsCarrier
	}
	return false
}

type ProductType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProductType) Reset() {
	*x = ProductType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Products_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductType) ProtoMessage() {}

func (x *ProductType) ProtoReflect() protoreflect.Message {
	mi := &file_Products_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductType.ProtoReflect.Descriptor instead.
func (*ProductType) Descriptor() ([]byte, []int) {
	return file_Products_proto_rawDescGZIP(), []int{26}
}

type ProductUse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId    int64                                       `protobuf:"varint,1,opt,name=ProductId,proto3" json:"ProductId,omitempty"`
	Rate         *Representations.NumericRepresentationValue `protobuf:"bytes,2,opt,name=Rate,proto3" json:"Rate,omitempty"`
	AppliedArea  *Representations.NumericRepresentationValue `protobuf:"bytes,3,opt,name=AppliedArea,proto3" json:"AppliedArea,omitempty"`
	ProductTotal *Representations.NumericRepresentationValue `protobuf:"bytes,4,opt,name=ProductTotal,proto3" json:"ProductTotal,omitempty"`
}

func (x *ProductUse) Reset() {
	*x = ProductUse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Products_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductUse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductUse) ProtoMessage() {}

func (x *ProductUse) ProtoReflect() protoreflect.Message {
	mi := &file_Products_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductUse.ProtoReflect.Descriptor instead.
func (*ProductUse) Descriptor() ([]byte, []int) {
	return file_Products_proto_rawDescGZIP(), []int{27}
}

func (x *ProductUse) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *ProductUse) GetRate() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.Rate
	}
	return nil
}

func (x *ProductUse) GetAppliedArea() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.AppliedArea
	}
	return nil
}

func (x *ProductUse) GetProductTotal() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.ProductTotal
	}
	return nil
}

type Trait struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *Common.CompoundIdentifier `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	TraitCode      string                     `protobuf:"bytes,2,opt,name=TraitCode,proto3" json:"TraitCode,omitempty"`
	Description    string                     `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	ManufacturerId int64                      `protobuf:"varint,4,opt,name=ManufacturerId,proto3" json:"ManufacturerId,omitempty"`
	CropIds        []int64                    `protobuf:"varint,5,rep,packed,name=CropIds,proto3" json:"CropIds,omitempty"`
}

func (x *Trait) Reset() {
	*x = Trait{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Products_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trait) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trait) ProtoMessage() {}

func (x *Trait) ProtoReflect() protoreflect.Message {
	mi := &file_Products_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trait.ProtoReflect.Descriptor instead.
func (*Trait) Descriptor() ([]byte, []int) {
	return file_Products_proto_rawDescGZIP(), []int{28}
}

func (x *Trait) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Trait) GetTraitCode() string {
	if x != nil {
		return x.TraitCode
	}
	return ""
}

func (x *Trait) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Trait) GetManufacturerId() int64 {
	if x != nil {
		return x.ManufacturerId
	}
	return 0
}

func (x *Trait) GetCropIds() []int64 {
	if x != nil {
		return x.CropIds
	}
	return nil
}

var File_Products_proto protoreflect.FileDescriptor

var file_Products_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x1a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15,
	0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x12, 0x0a, 0x10, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x22, 0xf6, 0x01, 0x0a, 0x10, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x30,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x41, 0x44, 0x41,
	0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75,
	0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x47, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x47, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x73, 0x22, 0xf4, 0x01, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22,
	0xe7, 0x01, 0x0a, 0x0c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x0c, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x46,
	0x75, 0x6e, 0x67, 0x69, 0x63, 0x69, 0x64, 0x65, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x72,
	0x6f, 0x77, 0x74, 0x68, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x10, 0x03, 0x12,
	0x0f, 0x0a, 0x0b, 0x49, 0x6e, 0x73, 0x65, 0x63, 0x74, 0x69, 0x63, 0x69, 0x64, 0x65, 0x10, 0x04,
	0x12, 0x0d, 0x0a, 0x09, 0x48, 0x65, 0x72, 0x62, 0x69, 0x63, 0x69, 0x64, 0x65, 0x10, 0x05, 0x12,
	0x0a, 0x0a, 0x06, 0x4d, 0x61, 0x6e, 0x75, 0x72, 0x65, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x4e,
	0x69, 0x74, 0x72, 0x6f, 0x67, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x7a, 0x65,
	0x72, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x08,
	0x12, 0x0b, 0x0a, 0x07, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x10, 0x09, 0x12, 0x0e, 0x0a,
	0x0a, 0x46, 0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x10, 0x0a, 0x12, 0x0d, 0x0a,
	0x09, 0x50, 0x65, 0x73, 0x74, 0x69, 0x63, 0x69, 0x64, 0x65, 0x10, 0x0b, 0x12, 0x0c, 0x0a, 0x08,
	0x41, 0x64, 0x6a, 0x75, 0x76, 0x61, 0x6e, 0x74, 0x10, 0x0c, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x65,
	0x66, 0x6f, 0x6c, 0x69, 0x61, 0x6e, 0x74, 0x10, 0x0d, 0x22, 0x5e, 0x0a, 0x18, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x64, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xdc, 0x02, 0x0a, 0x09, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x1c, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x43, 0x6f, 0x72,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xd9, 0x04, 0x0a, 0x0e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x30, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3c, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4d, 0x0a,
	0x08, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52,
	0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x08, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x48, 0x0a, 0x0e,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x55, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x55,
	0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52,
	0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e,
	0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x47, 0x0a, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63,
	0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x49, 0x0a, 0x06, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41,
	0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x41, 0x44,
	0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x22, 0x6b, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x53, 0x0a, 0x18,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x65, 0x74, 0x69, 0x72, 0x65, 0x64, 0x10, 0x02, 0x12,
	0x10, 0x0a, 0x0c, 0x4e, 0x6f, 0x4c, 0x6f, 0x6e, 0x67, 0x65, 0x72, 0x53, 0x6f, 0x6c, 0x64, 0x10,
	0x03, 0x22, 0x5f, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x4b, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0e, 0x0a,
	0x0a, 0x44, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x52, 0x65, 0x75, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x10, 0x03, 0x22, 0xf1, 0x02, 0x0a, 0x04, 0x43, 0x72, 0x6f, 0x70, 0x12, 0x30, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x5b, 0x0a,
	0x0f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52,
	0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e,
	0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x6b, 0x0a, 0x17, 0x53, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x50, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x69,
	0x73, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44,
	0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17,
	0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x50, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x4d,
	0x6f, 0x69, 0x73, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x69, 0x0a, 0x17, 0x43, 0x72, 0x6f, 0x70, 0x4e, 0x75,
	0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x12, 0x4e, 0x0a, 0x0e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x41, 0x44, 0x41, 0x50,
	0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x32, 0x0a, 0x14, 0x43, 0x72, 0x6f, 0x70, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x4d,
	0x61, 0x6e, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x4d,
	0x61, 0x6e, 0x75, 0x72, 0x65, 0x22, 0x7f, 0x0a, 0x15, 0x43, 0x72, 0x6f, 0x70, 0x50, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x42, 0x69, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x42, 0x69, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x28,
	0x0a, 0x0f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x6f, 0x70, 0x68, 0x6f, 0x73, 0x70, 0x68, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x6f, 0x70,
	0x68, 0x6f, 0x73, 0x70, 0x68, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x61, 0x72, 0x62,
	0x61, 0x6d, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x43, 0x61, 0x72,
	0x62, 0x61, 0x6d, 0x61, 0x74, 0x65, 0x22, 0x7a, 0x0a, 0x12, 0x43, 0x72, 0x6f, 0x70, 0x56, 0x61,
	0x72, 0x69, 0x65, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x43, 0x72, 0x6f, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x43, 0x72,
	0x6f, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x69, 0x74, 0x49, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x54, 0x72, 0x61, 0x69, 0x74, 0x49, 0x64, 0x73,
	0x12, 0x30, 0x0a, 0x13, 0x47, 0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x45,
	0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x47,
	0x65, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63,
	0x65, 0x64, 0x22, 0x84, 0x02, 0x0a, 0x0d, 0x44, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x42, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x6f, 0x12, 0x14,
	0x0a, 0x05, 0x4c, 0x6f, 0x74, 0x4e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c,
	0x6f, 0x74, 0x4e, 0x6f, 0x12, 0x4b, 0x0a, 0x07, 0x44, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75,
	0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x44, 0x65, 0x6e, 0x73, 0x69, 0x74,
	0x79, 0x12, 0x26, 0x0a, 0x0c, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x42, 0x02, 0x10, 0x00, 0x52, 0x0c, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x73, 0x22, 0x11, 0x0a, 0x0f, 0x49, 0x6e, 0x65,
	0x72, 0x74, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x22, 0xdf, 0x02, 0x0a,
	0x0a, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3d, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x4e,
	0x0a, 0x10, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x63,
	0x0a, 0x17, 0x43, 0x72, 0x6f, 0x70, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x43, 0x72, 0x6f, 0x70, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x17, 0x43, 0x72, 0x6f, 0x70,
	0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x22, 0xbd,
	0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x41,
	0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x22, 0xa3,
	0x01, 0x0a, 0x0a, 0x4d, 0x69, 0x78, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x57, 0x0a,
	0x0d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d,
	0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x54, 0x65, 0x6d, 0x70,
	0x6f, 0x72, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x73, 0x54,
	0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x48, 0x6f,
	0x74, 0x4d, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x48, 0x6f,
	0x74, 0x4d, 0x69, 0x78, 0x22, 0xb0, 0x05, 0x0a, 0x0f, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x42, 0x75, 0x6c, 0x6b,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x42, 0x75, 0x6c, 0x6b, 0x12, 0x3d,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5b, 0x0a,
	0x0f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52,
	0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e,
	0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x66, 0x0a, 0x19, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x64, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x19, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x12, 0x53, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x73, 0x73, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e,
	0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x47, 0x72, 0x6f, 0x73,
	0x73, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x4f, 0x0a, 0x09, 0x4e, 0x65, 0x74, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41,
	0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x4e,
	0x65, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x9c, 0x05, 0x0a, 0x17, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x02, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x11, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x5b, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x50, 0x0a, 0x23, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x23, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x73, 0x12, 0x49, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d,
	0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x53, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x73, 0x73, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d,
	0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x47, 0x72, 0x6f, 0x73, 0x73, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x4f, 0x0a, 0x09, 0x4e, 0x65, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e,
	0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x4e, 0x65, 0x74, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x5d, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4c, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0a, 0x0a, 0x06,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x6e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x65, 0x74, 0x69, 0x72, 0x65,
	0x64, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x6f, 0x4c, 0x6f, 0x6e, 0x67, 0x65, 0x72, 0x53,
	0x6f, 0x6c, 0x64, 0x10, 0x03, 0x22, 0x6d, 0x0a, 0x15, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x54,
	0x0a, 0x19, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0a, 0x0a, 0x06, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x6e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x65, 0x74, 0x69, 0x72, 0x65, 0x64,
	0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x6f, 0x4c, 0x6f, 0x6e, 0x67, 0x65, 0x72, 0x53, 0x6f,
	0x6c, 0x64, 0x10, 0x03, 0x22, 0xc9, 0x0a, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x41,
	0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x12, 0x4e, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x41,
	0x44, 0x41, 0x50, 0x54, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x11,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x08, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x4b, 0x0a, 0x07, 0x44, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72,
	0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x44, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x12, 0x20,
	0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x33, 0x0a, 0x04, 0x46, 0x6f, 0x72, 0x6d, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x45, 0x6e, 0x75, 0x6d, 0x52,
	0x04, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x2c, 0x0a, 0x11, 0x48, 0x61, 0x73, 0x43, 0x72, 0x6f, 0x70,
	0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x48, 0x61, 0x73, 0x43, 0x72, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x48, 0x61, 0x73, 0x43, 0x72, 0x6f, 0x70, 0x4e, 0x75,
	0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x48,
	0x61, 0x73, 0x43, 0x72, 0x6f, 0x70, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x26, 0x0a, 0x0e, 0x48, 0x61, 0x73, 0x43, 0x72, 0x6f, 0x70, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74,
	0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x48, 0x61, 0x73, 0x43, 0x72, 0x6f, 0x70,
	0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x48, 0x61, 0x73, 0x48, 0x61,
	0x72, 0x76, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x48, 0x61, 0x73, 0x48, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x61, 0x6e,
	0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x49, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x3d, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x35, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x48, 0x0a, 0x0e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x69, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x48,
	0x00, 0x52, 0x0e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x12, 0x69, 0x0a, 0x19, 0x48, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x66,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x48, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x48,
	0x00, 0x52, 0x19, 0x48, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x5d, 0x0a, 0x15,
	0x43, 0x72, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x41, 0x44,
	0x41, 0x50, 0x54, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x72, 0x6f,
	0x70, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x48, 0x00, 0x52, 0x15, 0x43, 0x72, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x54, 0x0a, 0x12, 0x43,
	0x72, 0x6f, 0x70, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x72, 0x6f, 0x70, 0x56, 0x61, 0x72,
	0x69, 0x65, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x12, 0x43,
	0x72, 0x6f, 0x70, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x12, 0x5a, 0x0a, 0x14, 0x43, 0x72, 0x6f, 0x70, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x43, 0x72, 0x6f, 0x70, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x14, 0x43, 0x72, 0x6f, 0x70, 0x4e, 0x75, 0x74,
	0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x3c, 0x0a,
	0x0a, 0x4d, 0x69, 0x78, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x6a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x2e, 0x4d, 0x69, 0x78, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52,
	0x0a, 0x4d, 0x69, 0x78, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x47, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x47, 0x72,
	0x61, 0x76, 0x69, 0x74, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x10, 0x0a, 0x0e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x22, 0x33, 0x0a, 0x19, 0x48, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x43, 0x72, 0x6f, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x43, 0x72, 0x6f, 0x70, 0x49, 0x64, 0x22, 0xc1, 0x01, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x4d, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72,
	0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x49, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x49, 0x73, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x49, 0x73, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x22, 0x61, 0x0a, 0x0b, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x52, 0x0a, 0x0f, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0c, 0x0a,
	0x08, 0x43, 0x68, 0x65, 0x6d, 0x69, 0x63, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x46,
	0x65, 0x72, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x69, 0x78, 0x10,
	0x03, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x10, 0x04, 0x22, 0x9d,
	0x02, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x73, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x04, 0x52,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41, 0x50,
	0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x53, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x41, 0x72, 0x65,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e,
	0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x64, 0x41, 0x72, 0x65, 0x61, 0x12, 0x55, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xbb,
	0x01, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72,
	0x61, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54,
	0x72, 0x61, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x61,
	0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x72, 0x6f, 0x70, 0x49, 0x64, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x07, 0x43, 0x72, 0x6f, 0x70, 0x49, 0x64, 0x73, 0x2a, 0x3e, 0x0a, 0x0f,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x07, 0x0a, 0x03, 0x47, 0x61, 0x73, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x6f, 0x6c, 0x69, 0x64, 0x10, 0x02, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x03, 0x42, 0x2a, 0x5a, 0x28,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x61, 0x6c, 0x74, 0x65,
	0x67, 0x72, 0x6f, 0x73, 0x73, 0x65, 0x2f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x2d, 0x67, 0x6f, 0x2f,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_Products_proto_rawDescOnce sync.Once
	file_Products_proto_rawDescData = file_Products_proto_rawDesc
)

func file_Products_proto_rawDescGZIP() []byte {
	file_Products_proto_rawDescOnce.Do(func() {
		file_Products_proto_rawDescData = protoimpl.X.CompressGZIP(file_Products_proto_rawDescData)
	})
	return file_Products_proto_rawDescData
}

var file_Products_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_Products_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_Products_proto_goTypes = []interface{}{
	(ProductFormEnum)(0),                                 // 0: ADAPT.Products.ProductFormEnum
	(Category_CategoryEnum)(0),                           // 1: ADAPT.Products.Category.CategoryEnum
	(ContainerModelStatus_ContainerModelStatusEnum)(0),   // 2: ADAPT.Products.ContainerModelStatus.ContainerModelStatusEnum
	(ContainerUseType_ContainerUseTypeEnum)(0),           // 3: ADAPT.Products.ContainerUseType.ContainerUseTypeEnum
	(ProductStatus_ProductStatusEnum)(0),                 // 4: ADAPT.Products.ProductStatus.ProductStatusEnum
	(PackagedProductStatus_PackagedProductStatusEnum)(0), // 5: ADAPT.Products.PackagedProductStatus.PackagedProductStatusEnum
	(ProductType_ProductTypeEnum)(0),                     // 6: ADAPT.Products.ProductType.ProductTypeEnum
	(*ActiveIngredient)(nil),                             // 7: ADAPT.Products.ActiveIngredient
	(*AvailableProduct)(nil),                             // 8: ADAPT.Products.AvailableProduct
	(*Category)(nil),                                     // 9: ADAPT.Products.Category
	(*ContainedPackagedProduct)(nil),                     // 10: ADAPT.Products.ContainedPackagedProduct
	(*Container)(nil),                                    // 11: ADAPT.Products.Container
	(*ContainerModel)(nil),                               // 12: ADAPT.Products.ContainerModel
	(*ContainerModelStatus)(nil),                         // 13: ADAPT.Products.ContainerModelStatus
	(*ContainerUseType)(nil),                             // 14: ADAPT.Products.ContainerUseType
	(*Crop)(nil),                                         // 15: ADAPT.Products.Crop
	(*CropNutritionIngredient)(nil),                      // 16: ADAPT.Products.CropNutritionIngredient
	(*CropNutritionProduct)(nil),                         // 17: ADAPT.Products.CropNutritionProduct
	(*CropProtectionProduct)(nil),                        // 18: ADAPT.Products.CropProtectionProduct
	(*CropVarietyProduct)(nil),                           // 19: ADAPT.Products.CropVarietyProduct
	(*DensityFactor)(nil),                                // 20: ADAPT.Products.DensityFactor
	(*InertIngredient)(nil),                              // 21: ADAPT.Products.InertIngredient
	(*Ingredient)(nil),                                   // 22: ADAPT.Products.Ingredient
	(*IngredientUse)(nil),                                // 23: ADAPT.Products.IngredientUse
	(*MixProduct)(nil),                                   // 24: ADAPT.Products.MixProduct
	(*PackagedProduct)(nil),                              // 25: ADAPT.Products.PackagedProduct
	(*PackagedProductInstance)(nil),                      // 26: ADAPT.Products.PackagedProductInstance
	(*ProductStatus)(nil),                                // 27: ADAPT.Products.ProductStatus
	(*PackagedProductStatus)(nil),                        // 28: ADAPT.Products.PackagedProductStatus
	(*Product)(nil),                                      // 29: ADAPT.Products.Product
	(*GenericProduct)(nil),                               // 30: ADAPT.Products.GenericProduct
	(*HarvestedCommodityProduct)(nil),                    // 31: ADAPT.Products.HarvestedCommodityProduct
	(*ProductComponent)(nil),                             // 32: ADAPT.Products.ProductComponent
	(*ProductType)(nil),                                  // 33: ADAPT.Products.ProductType
	(*ProductUse)(nil),                                   // 34: ADAPT.Products.ProductUse
	(*Trait)(nil),                                        // 35: ADAPT.Products.Trait
	(*Common.CompoundIdentifier)(nil),                    // 36: ADAPT.Common.CompoundIdentifier
	(*Common.ContextItem)(nil),                           // 37: ADAPT.Common.ContextItem
	(*Common.TimeScope)(nil),                             // 38: ADAPT.Common.TimeScope
	(*Representations.NumericRepresentationValue)(nil),   // 39: ADAPT.Representations.NumericRepresentationValue
	(*Representations.EnumeratedValue)(nil),              // 40: ADAPT.Representations.EnumeratedValue
}
var file_Products_proto_depIdxs = []int32{
	36, // 0: ADAPT.Products.AvailableProduct.Id:type_name -> ADAPT.Common.CompoundIdentifier
	37, // 1: ADAPT.Products.AvailableProduct.ContextItems:type_name -> ADAPT.Common.ContextItem
	38, // 2: ADAPT.Products.AvailableProduct.TimeScopes:type_name -> ADAPT.Common.TimeScope
	36, // 3: ADAPT.Products.Container.Id:type_name -> ADAPT.Common.CompoundIdentifier
	14, // 4: ADAPT.Products.Container.ContainerUseType:type_name -> ADAPT.Products.ContainerUseType
	37, // 5: ADAPT.Products.Container.ContextItems:type_name -> ADAPT.Common.ContextItem
	36, // 6: ADAPT.Products.ContainerModel.Id:type_name -> ADAPT.Common.CompoundIdentifier
	13, // 7: ADAPT.Products.ContainerModel.Status:type_name -> ADAPT.Products.ContainerModelStatus
	39, // 8: ADAPT.Products.ContainerModel.Capacity:type_name -> ADAPT.Representations.NumericRepresentationValue
	14, // 9: ADAPT.Products.ContainerModel.DefaultUseType:type_name -> ADAPT.Products.ContainerUseType
	39, // 10: ADAPT.Products.ContainerModel.Length:type_name -> ADAPT.Representations.NumericRepresentationValue
	39, // 11: ADAPT.Products.ContainerModel.Width:type_name -> ADAPT.Representations.NumericRepresentationValue
	39, // 12: ADAPT.Products.ContainerModel.Height:type_name -> ADAPT.Representations.NumericRepresentationValue
	37, // 13: ADAPT.Products.ContainerModel.ContextItems:type_name -> ADAPT.Common.ContextItem
	36, // 14: ADAPT.Products.Crop.Id:type_name -> ADAPT.Common.CompoundIdentifier
	39, // 15: ADAPT.Products.Crop.ReferenceWeight:type_name -> ADAPT.Representations.NumericRepresentationValue
	39, // 16: ADAPT.Products.Crop.StandardPayableMoisture:type_name -> ADAPT.Representations.NumericRepresentationValue
	37, // 17: ADAPT.Products.Crop.ContextItems:type_name -> ADAPT.Common.ContextItem
	40, // 18: ADAPT.Products.CropNutritionIngredient.IngredientCode:type_name -> ADAPT.Representations.EnumeratedValue
	36, // 19: ADAPT.Products.DensityFactor.Id:type_name -> ADAPT.Common.CompoundIdentifier
	39, // 20: ADAPT.Products.DensityFactor.Density:type_name -> ADAPT.Representations.NumericRepresentationValue
	36, // 21: ADAPT.Products.Ingredient.Id:type_name -> ADAPT.Common.CompoundIdentifier
	37, // 22: ADAPT.Products.Ingredient.ContextItems:type_name -> ADAPT.Common.ContextItem
	7,  // 23: ADAPT.Products.Ingredient.ActiveIngredient:type_name -> ADAPT.Products.ActiveIngredient
	16, // 24: ADAPT.Products.Ingredient.CropNutritionIngredient:type_name -> ADAPT.Products.CropNutritionIngredient
	36, // 25: ADAPT.Products.IngredientUse.Id:type_name -> ADAPT.Common.CompoundIdentifier
	39, // 26: ADAPT.Products.MixProduct.TotalQuantity:type_name -> ADAPT.Representations.NumericRepresentationValue
	36, // 27: ADAPT.Products.PackagedProduct.Id:type_name -> ADAPT.Common.CompoundIdentifier
	28, // 28: ADAPT.Products.PackagedProduct.Status:type_name -> ADAPT.Products.PackagedProductStatus
	39, // 29: ADAPT.Products.PackagedProduct.ProductQuantity:type_name -> ADAPT.Representations.NumericRepresentationValue
	10, // 30: ADAPT.Products.PackagedProduct.ContainedPackagedProducts:type_name -> ADAPT.Products.ContainedPackagedProduct
	39, // 31: ADAPT.Products.PackagedProduct.GrossWeight:type_name -> ADAPT.Representations.NumericRepresentationValue
	39, // 32: ADAPT.Products.PackagedProduct.NetWeight:type_name -> ADAPT.Representations.NumericRepresentationValue
	37, // 33: ADAPT.Products.PackagedProduct.ContextItems:type_name -> ADAPT.Common.ContextItem
	36, // 34: ADAPT.Products.PackagedProductInstance.Id:type_name -> ADAPT.Common.CompoundIdentifier
	39, // 35: ADAPT.Products.PackagedProductInstance.ProductQuantity:type_name -> ADAPT.Representations.NumericRepresentationValue
	39, // 36: ADAPT.Products.PackagedProductInstance.Height:type_name -> ADAPT.Representations.NumericRepresentationValue
	39, // 37: ADAPT.Products.PackagedProductInstance.GrossWeight:type_name -> ADAPT.Representations.NumericRepresentationValue
	39, // 38: ADAPT.Products.PackagedProductInstance.NetWeight:type_name -> ADAPT.Representations.NumericRepresentationValue
	37, // 39: ADAPT.Products.PackagedProductInstance.ContextItems:type_name -> ADAPT.Common.ContextItem
	36, // 40: ADAPT.Products.Product.Id:type_name -> ADAPT.Common.CompoundIdentifier
	37, // 41: ADAPT.Products.Product.ContextItems:type_name -> ADAPT.Common.ContextItem
	32, // 42: ADAPT.Products.Product.ProductComponents:type_name -> ADAPT.Products.ProductComponent
	9,  // 43: ADAPT.Products.Product.Category:type_name -> ADAPT.Products.Category
	39, // 44: ADAPT.Products.Product.Density:type_name -> ADAPT.Representations.NumericRepresentationValue
	0,  // 45: ADAPT.Products.Product.Form:type_name -> ADAPT.Products.ProductFormEnum
	33, // 46: ADAPT.Products.Product.ProductType:type_name -> ADAPT.Products.ProductType
	27, // 47: ADAPT.Products.Product.Status:type_name -> ADAPT.Products.ProductStatus
	30, // 48: ADAPT.Products.Product.GenericProduct:type_name -> ADAPT.Products.GenericProduct
	31, // 49: ADAPT.Products.Product.HarvestedCommodityProduct:type_name -> ADAPT.Products.HarvestedCommodityProduct
	18, // 50: ADAPT.Products.Product.CropProtectionProduct:type_name -> ADAPT.Products.CropProtectionProduct
	19, // 51: ADAPT.Products.Product.CropVarietyProduct:type_name -> ADAPT.Products.CropVarietyProduct
	17, // 52: ADAPT.Products.Product.CropNutritionProduct:type_name -> ADAPT.Products.CropNutritionProduct
	24, // 53: ADAPT.Products.Product.MixProduct:type_name -> ADAPT.Products.MixProduct
	39, // 54: ADAPT.Products.ProductComponent.Quantity:type_name -> ADAPT.Representations.NumericRepresentationValue
	39, // 55: ADAPT.Products.ProductUse.Rate:type_name -> ADAPT.Representations.NumericRepresentationValue
	39, // 56: ADAPT.Products.ProductUse.AppliedArea:type_name -> ADAPT.Representations.NumericRepresentationValue
	39, // 57: ADAPT.Products.ProductUse.ProductTotal:type_name -> ADAPT.Representations.NumericRepresentationValue
	36, // 58: ADAPT.Products.Trait.Id:type_name -> ADAPT.Common.CompoundIdentifier
	59, // [59:59] is the sub-list for method output_type
	59, // [59:59] is the sub-list for method input_type
	59, // [59:59] is the sub-list for extension type_name
	59, // [59:59] is the sub-list for extension extendee
	0,  // [0:59] is the sub-list for field type_name
}

func init() { file_Products_proto_init() }
func file_Products_proto_init() {
	if File_Products_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_Products_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActiveIngredient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Products_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailableProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Products_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Category); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Products_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainedPackagedProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Products_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Container); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Products_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Products_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerModelStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Products_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerUseType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Products_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Crop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Products_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CropNutritionIngredient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Products_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CropNutritionProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Products_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CropProtectionProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Products_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CropVarietyProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Products_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DensityFactor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Products_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InertIngredient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Products_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ingredient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Products_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngredientUse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Products_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MixProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Products_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackagedProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Products_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackagedProductInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Products_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Products_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackagedProductStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Products_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Products_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Products_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HarvestedCommodityProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Products_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Products_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Products_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductUse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Products_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trait); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_Products_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*Ingredient_ActiveIngredient)(nil),
		(*Ingredient_CropNutritionIngredient)(nil),
	}
	file_Products_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*Product_GenericProduct)(nil),
		(*Product_HarvestedCommodityProduct)(nil),
		(*Product_CropProtectionProduct)(nil),
		(*Product_CropVarietyProduct)(nil),
		(*Product_CropNutritionProduct)(nil),
		(*Product_MixProduct)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Products_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Products_proto_goTypes,
		DependencyIndexes: file_Products_proto_depIdxs,
		EnumInfos:         file_Products_proto_enumTypes,
		MessageInfos:      file_Products_proto_msgTypes,
	}.Build()
	File_Products_proto = out.File
	file_Products_proto_rawDesc = nil
	file_Products_proto_goTypes = nil
	file_Products_proto_depIdxs = nil
}
