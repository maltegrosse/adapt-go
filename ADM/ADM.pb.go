// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.19.6
// source: ADM.proto

package ADM

import (
	Common "github.com/maltegrosse/adapt-go/Common"
	Documents "github.com/maltegrosse/adapt-go/Documents"
	Equipment "github.com/maltegrosse/adapt-go/Equipment"
	FieldBounderies "github.com/maltegrosse/adapt-go/FieldBounderies"
	Guidance "github.com/maltegrosse/adapt-go/Guidance"
	LoggedData "github.com/maltegrosse/adapt-go/LoggedData"
	Logistics "github.com/maltegrosse/adapt-go/Logistics"
	Prescriptions "github.com/maltegrosse/adapt-go/Prescriptions"
	Products "github.com/maltegrosse/adapt-go/Products"
	ReferenceLayers "github.com/maltegrosse/adapt-go/ReferenceLayers"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ApplicationDataModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProprietaryValues []*ProprietaryValue               `protobuf:"bytes,1,rep,name=ProprietaryValues,proto3" json:"ProprietaryValues,omitempty"`
	Catalog           *Catalog                          `protobuf:"bytes,2,opt,name=Catalog,proto3" json:"Catalog,omitempty"`
	Documents         *ADMDocuments                     `protobuf:"bytes,3,opt,name=Documents,proto3" json:"Documents,omitempty"`
	ReferenceLayers   []*ReferenceLayers.ReferenceLayer `protobuf:"bytes,4,rep,name=ReferenceLayers,proto3" json:"ReferenceLayers,omitempty"`
}

func (x *ApplicationDataModel) Reset() {
	*x = ApplicationDataModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ADM_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationDataModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationDataModel) ProtoMessage() {}

func (x *ApplicationDataModel) ProtoReflect() protoreflect.Message {
	mi := &file_ADM_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationDataModel.ProtoReflect.Descriptor instead.
func (*ApplicationDataModel) Descriptor() ([]byte, []int) {
	return file_ADM_proto_rawDescGZIP(), []int{0}
}

func (x *ApplicationDataModel) GetProprietaryValues() []*ProprietaryValue {
	if x != nil {
		return x.ProprietaryValues
	}
	return nil
}

func (x *ApplicationDataModel) GetCatalog() *Catalog {
	if x != nil {
		return x.Catalog
	}
	return nil
}

func (x *ApplicationDataModel) GetDocuments() *ADMDocuments {
	if x != nil {
		return x.Documents
	}
	return nil
}

func (x *ApplicationDataModel) GetReferenceLayers() []*ReferenceLayers.ReferenceLayer {
	if x != nil {
		return x.ReferenceLayers
	}
	return nil
}

type ProprietaryValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   int64  `protobuf:"varint,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *ProprietaryValue) Reset() {
	*x = ProprietaryValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ADM_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProprietaryValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProprietaryValue) ProtoMessage() {}

func (x *ProprietaryValue) ProtoReflect() protoreflect.Message {
	mi := &file_ADM_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProprietaryValue.ProtoReflect.Descriptor instead.
func (*ProprietaryValue) Descriptor() ([]byte, []int) {
	return file_ADM_proto_rawDescGZIP(), []int{1}
}

func (x *ProprietaryValue) GetKey() int64 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *ProprietaryValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Properties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Properties map[string]string `protobuf:"bytes,3,rep,name=Properties,proto3" json:"Properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Properties) Reset() {
	*x = Properties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ADM_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Properties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Properties) ProtoMessage() {}

func (x *Properties) ProtoReflect() protoreflect.Message {
	mi := &file_ADM_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Properties.ProtoReflect.Descriptor instead.
func (*Properties) Descriptor() ([]byte, []int) {
	return file_ADM_proto_rawDescGZIP(), []int{2}
}

func (x *Properties) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

type Catalog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Brands                       []*Logistics.Brand                       `protobuf:"bytes,1,rep,name=Brands,proto3" json:"Brands,omitempty"`
	Companies                    []*Logistics.Company                     `protobuf:"bytes,2,rep,name=Companies,proto3" json:"Companies,omitempty"`
	Connectors                   []*Equipment.Connector                   `protobuf:"bytes,3,rep,name=Connectors,proto3" json:"Connectors,omitempty"`
	ContactInfo                  []*Logistics.ContactInfo                 `protobuf:"bytes,4,rep,name=ContactInfo,proto3" json:"ContactInfo,omitempty"`
	Crops                        []*Products.Crop                         `protobuf:"bytes,5,rep,name=Crops,proto3" json:"Crops,omitempty"`
	CropZones                    []*Logistics.CropZone                    `protobuf:"bytes,6,rep,name=CropZones,proto3" json:"CropZones,omitempty"`
	Description                  string                                   `protobuf:"bytes,7,opt,name=Description,proto3" json:"Description,omitempty"`
	DeviceElements               []*Equipment.DeviceElement               `protobuf:"bytes,8,rep,name=DeviceElements,proto3" json:"DeviceElements,omitempty"`
	DeviceModels                 []*Equipment.DeviceModel                 `protobuf:"bytes,9,rep,name=DeviceModels,proto3" json:"DeviceModels,omitempty"`
	DeviceElementConfigurations  []*Equipment.DeviceElementConfiguration  `protobuf:"bytes,10,rep,name=DeviceElementConfigurations,proto3" json:"DeviceElementConfigurations,omitempty"`
	EquipmentConfigurations      []*Equipment.EquipmentConfiguration      `protobuf:"bytes,11,rep,name=EquipmentConfigurations,proto3" json:"EquipmentConfigurations,omitempty"`
	EquipmentConfigurationGroups []*Equipment.EquipmentConfigurationGroup `protobuf:"bytes,12,rep,name=EquipmentConfigurationGroups,proto3" json:"EquipmentConfigurationGroups,omitempty"`
	Farms                        []*Logistics.Farm                        `protobuf:"bytes,13,rep,name=Farms,proto3" json:"Farms,omitempty"`
	Fields                       []*Logistics.Field                       `protobuf:"bytes,14,rep,name=Fields,proto3" json:"Fields,omitempty"`
	FieldBoundaries              []*FieldBounderies.FieldBoundary         `protobuf:"bytes,15,rep,name=FieldBoundaries,proto3" json:"FieldBoundaries,omitempty"`
	Growers                      []*Logistics.Grower                      `protobuf:"bytes,16,rep,name=Growers,proto3" json:"Growers,omitempty"`
	GuidancePatterns             []*Guidance.GuidancePattern              `protobuf:"bytes,17,rep,name=GuidancePatterns,proto3" json:"GuidancePatterns,omitempty"`
	GuidanceGroups               []*Guidance.GuidanceGroup                `protobuf:"bytes,18,rep,name=GuidanceGroups,proto3" json:"GuidanceGroups,omitempty"`
	HitchPoints                  []*Equipment.HitchPoint                  `protobuf:"bytes,19,rep,name=HitchPoints,proto3" json:"HitchPoints,omitempty"`
	Ingredients                  []*Products.Ingredient                   `protobuf:"bytes,20,rep,name=Ingredients,proto3" json:"Ingredients,omitempty"`
	Manufacturers                []*Logistics.Manufacturer                `protobuf:"bytes,21,rep,name=Manufacturers,proto3" json:"Manufacturers,omitempty"`
	Persons                      []*Logistics.Person                      `protobuf:"bytes,22,rep,name=Persons,proto3" json:"Persons,omitempty"`
	PersonRoles                  []*Logistics.PersonRole                  `protobuf:"bytes,23,rep,name=PersonRoles,proto3" json:"PersonRoles,omitempty"`
	Prescriptions                []*Prescriptions.Prescription            `protobuf:"bytes,24,rep,name=Prescriptions,proto3" json:"Prescriptions,omitempty"`
	Products                     []*Products.Product                      `protobuf:"bytes,25,rep,name=Products,proto3" json:"Products,omitempty"`
	TimeScopes                   []*Common.TimeScope                      `protobuf:"bytes,26,rep,name=TimeScopes,proto3" json:"TimeScopes,omitempty"`
	// following fields added
	GeoPoliticalContexts     []*Common.GeoPoliticalContext        `protobuf:"bytes,27,rep,name=GeoPoliticalContexts,proto3" json:"GeoPoliticalContexts,omitempty"`
	Facilities               []*Logistics.Facility                `protobuf:"bytes,28,rep,name=Facilities,proto3" json:"Facilities,omitempty"`
	IrrSystemConfigurations  []*Equipment.IrrSystemConfiguration  `protobuf:"bytes,29,rep,name=IrrSystemConfigurations,proto3" json:"IrrSystemConfigurations,omitempty"`
	IrrSectionConfigurations []*Equipment.IrrSectionConfiguration `protobuf:"bytes,30,rep,name=IrrSectionConfigurations,proto3" json:"IrrSectionConfigurations,omitempty"`
	EndgunConfigurations     []*Equipment.EndgunConfiguration     `protobuf:"bytes,31,rep,name=EndgunConfigurations,proto3" json:"EndgunConfigurations,omitempty"`
	Places                   []*Logistics.Place                   `protobuf:"bytes,32,rep,name=Places,proto3" json:"Places,omitempty"`
	ContainerModels          []*Products.ContainerModel           `protobuf:"bytes,33,rep,name=ContainerModels,proto3" json:"ContainerModels,omitempty"`
	PackagedProducts         []*Products.PackagedProduct          `protobuf:"bytes,34,rep,name=PackagedProducts,proto3" json:"PackagedProducts,omitempty"`
	PackagedProductInstances []*Products.PackagedProductInstance  `protobuf:"bytes,35,rep,name=PackagedProductInstances,proto3" json:"PackagedProductInstances,omitempty"`
	Containers               []*Products.Container                `protobuf:"bytes,37,rep,name=Containers,proto3" json:"Containers,omitempty"`
	ObsCodeComponents        []*Documents.ObsCodeComponent        `protobuf:"bytes,38,rep,name=ObsCodeComponents,proto3" json:"ObsCodeComponents,omitempty"`
	DeviceSeries             []*Equipment.DeviceSeries            `protobuf:"bytes,39,rep,name=DeviceSeries,proto3" json:"DeviceSeries,omitempty"`
}

func (x *Catalog) Reset() {
	*x = Catalog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ADM_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Catalog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Catalog) ProtoMessage() {}

func (x *Catalog) ProtoReflect() protoreflect.Message {
	mi := &file_ADM_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Catalog.ProtoReflect.Descriptor instead.
func (*Catalog) Descriptor() ([]byte, []int) {
	return file_ADM_proto_rawDescGZIP(), []int{3}
}

func (x *Catalog) GetBrands() []*Logistics.Brand {
	if x != nil {
		return x.Brands
	}
	return nil
}

func (x *Catalog) GetCompanies() []*Logistics.Company {
	if x != nil {
		return x.Companies
	}
	return nil
}

func (x *Catalog) GetConnectors() []*Equipment.Connector {
	if x != nil {
		return x.Connectors
	}
	return nil
}

func (x *Catalog) GetContactInfo() []*Logistics.ContactInfo {
	if x != nil {
		return x.ContactInfo
	}
	return nil
}

func (x *Catalog) GetCrops() []*Products.Crop {
	if x != nil {
		return x.Crops
	}
	return nil
}

func (x *Catalog) GetCropZones() []*Logistics.CropZone {
	if x != nil {
		return x.CropZones
	}
	return nil
}

func (x *Catalog) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Catalog) GetDeviceElements() []*Equipment.DeviceElement {
	if x != nil {
		return x.DeviceElements
	}
	return nil
}

func (x *Catalog) GetDeviceModels() []*Equipment.DeviceModel {
	if x != nil {
		return x.DeviceModels
	}
	return nil
}

func (x *Catalog) GetDeviceElementConfigurations() []*Equipment.DeviceElementConfiguration {
	if x != nil {
		return x.DeviceElementConfigurations
	}
	return nil
}

func (x *Catalog) GetEquipmentConfigurations() []*Equipment.EquipmentConfiguration {
	if x != nil {
		return x.EquipmentConfigurations
	}
	return nil
}

func (x *Catalog) GetEquipmentConfigurationGroups() []*Equipment.EquipmentConfigurationGroup {
	if x != nil {
		return x.EquipmentConfigurationGroups
	}
	return nil
}

func (x *Catalog) GetFarms() []*Logistics.Farm {
	if x != nil {
		return x.Farms
	}
	return nil
}

func (x *Catalog) GetFields() []*Logistics.Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Catalog) GetFieldBoundaries() []*FieldBounderies.FieldBoundary {
	if x != nil {
		return x.FieldBoundaries
	}
	return nil
}

func (x *Catalog) GetGrowers() []*Logistics.Grower {
	if x != nil {
		return x.Growers
	}
	return nil
}

func (x *Catalog) GetGuidancePatterns() []*Guidance.GuidancePattern {
	if x != nil {
		return x.GuidancePatterns
	}
	return nil
}

func (x *Catalog) GetGuidanceGroups() []*Guidance.GuidanceGroup {
	if x != nil {
		return x.GuidanceGroups
	}
	return nil
}

func (x *Catalog) GetHitchPoints() []*Equipment.HitchPoint {
	if x != nil {
		return x.HitchPoints
	}
	return nil
}

func (x *Catalog) GetIngredients() []*Products.Ingredient {
	if x != nil {
		return x.Ingredients
	}
	return nil
}

func (x *Catalog) GetManufacturers() []*Logistics.Manufacturer {
	if x != nil {
		return x.Manufacturers
	}
	return nil
}

func (x *Catalog) GetPersons() []*Logistics.Person {
	if x != nil {
		return x.Persons
	}
	return nil
}

func (x *Catalog) GetPersonRoles() []*Logistics.PersonRole {
	if x != nil {
		return x.PersonRoles
	}
	return nil
}

func (x *Catalog) GetPrescriptions() []*Prescriptions.Prescription {
	if x != nil {
		return x.Prescriptions
	}
	return nil
}

func (x *Catalog) GetProducts() []*Products.Product {
	if x != nil {
		return x.Products
	}
	return nil
}

func (x *Catalog) GetTimeScopes() []*Common.TimeScope {
	if x != nil {
		return x.TimeScopes
	}
	return nil
}

func (x *Catalog) GetGeoPoliticalContexts() []*Common.GeoPoliticalContext {
	if x != nil {
		return x.GeoPoliticalContexts
	}
	return nil
}

func (x *Catalog) GetFacilities() []*Logistics.Facility {
	if x != nil {
		return x.Facilities
	}
	return nil
}

func (x *Catalog) GetIrrSystemConfigurations() []*Equipment.IrrSystemConfiguration {
	if x != nil {
		return x.IrrSystemConfigurations
	}
	return nil
}

func (x *Catalog) GetIrrSectionConfigurations() []*Equipment.IrrSectionConfiguration {
	if x != nil {
		return x.IrrSectionConfigurations
	}
	return nil
}

func (x *Catalog) GetEndgunConfigurations() []*Equipment.EndgunConfiguration {
	if x != nil {
		return x.EndgunConfigurations
	}
	return nil
}

func (x *Catalog) GetPlaces() []*Logistics.Place {
	if x != nil {
		return x.Places
	}
	return nil
}

func (x *Catalog) GetContainerModels() []*Products.ContainerModel {
	if x != nil {
		return x.ContainerModels
	}
	return nil
}

func (x *Catalog) GetPackagedProducts() []*Products.PackagedProduct {
	if x != nil {
		return x.PackagedProducts
	}
	return nil
}

func (x *Catalog) GetPackagedProductInstances() []*Products.PackagedProductInstance {
	if x != nil {
		return x.PackagedProductInstances
	}
	return nil
}

func (x *Catalog) GetContainers() []*Products.Container {
	if x != nil {
		return x.Containers
	}
	return nil
}

func (x *Catalog) GetObsCodeComponents() []*Documents.ObsCodeComponent {
	if x != nil {
		return x.ObsCodeComponents
	}
	return nil
}

func (x *Catalog) GetDeviceSeries() []*Equipment.DeviceSeries {
	if x != nil {
		return x.DeviceSeries
	}
	return nil
}

// renamed Documents to ADMDocuments, conflicting imports
type ADMDocuments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceElementUses    []*Equipment.DeviceElementUse    `protobuf:"bytes,1,rep,name=DeviceElementUses,proto3" json:"DeviceElementUses,omitempty"`
	DocumentCorrelations []*Documents.DocumentCorrelation `protobuf:"bytes,2,rep,name=DocumentCorrelations,proto3" json:"DocumentCorrelations,omitempty"`
	GuidanceAllocations  []*Guidance.GuidanceAllocation   `protobuf:"bytes,3,rep,name=GuidanceAllocations,proto3" json:"GuidanceAllocations,omitempty"`
	IrrCollections       []*Documents.IrrCollection       `protobuf:"bytes,4,rep,name=IrrCollections,proto3" json:"IrrCollections,omitempty"`
	IrrRecords           []*Documents.IrrRecord           `protobuf:"bytes,5,rep,name=IrrRecords,proto3" json:"IrrRecords,omitempty"`
	Loads                []*LoggedData.Load               `protobuf:"bytes,6,rep,name=Loads,proto3" json:"Loads,omitempty"`
	LoggedData           []*LoggedData.LoggedData         `protobuf:"bytes,7,rep,name=LoggedData,proto3" json:"LoggedData,omitempty"`
	LoggedDataCatalog    int64                            `protobuf:"varint,8,opt,name=LoggedDataCatalog,proto3" json:"LoggedDataCatalog,omitempty"`
	Obs                  []*Documents.Obs                 `protobuf:"bytes,9,rep,name=Obs,proto3" json:"Obs,omitempty"`
	ObsCollections       []*Documents.ObsCollection       `protobuf:"bytes,10,rep,name=ObsCollections,proto3" json:"ObsCollections,omitempty"`
	ObsDatasets          []*Documents.ObsDataset          `protobuf:"bytes,11,rep,name=ObsDatasets,proto3" json:"ObsDatasets,omitempty"`
	Observations         []*Documents.Observations        `protobuf:"bytes,12,rep,name=Observations,proto3" json:"Observations,omitempty"`
	Plans                []*Documents.Plan                `protobuf:"bytes,13,rep,name=Plans,proto3" json:"Plans,omitempty"`
	Recommendations      []*Documents.Recommendation      `protobuf:"bytes,14,rep,name=Recommendations,proto3" json:"Recommendations,omitempty"`
	Summaries            []*Documents.Summary             `protobuf:"bytes,15,rep,name=Summaries,proto3" json:"Summaries,omitempty"`
	WorkItemOperations   []*Documents.WorkItemOperation   `protobuf:"bytes,16,rep,name=WorkItemOperations,proto3" json:"WorkItemOperations,omitempty"`
	WorkItems            []*Documents.WorkItem            `protobuf:"bytes,17,rep,name=WorkItems,proto3" json:"WorkItems,omitempty"`
	WorkOrders           []*Documents.WorkOrder           `protobuf:"bytes,18,rep,name=WorkOrders,proto3" json:"WorkOrders,omitempty"`
	WorkRecords          []*Documents.WorkRecord          `protobuf:"bytes,19,rep,name=WorkRecords,proto3" json:"WorkRecords,omitempty"`
}

func (x *ADMDocuments) Reset() {
	*x = ADMDocuments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ADM_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ADMDocuments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ADMDocuments) ProtoMessage() {}

func (x *ADMDocuments) ProtoReflect() protoreflect.Message {
	mi := &file_ADM_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ADMDocuments.ProtoReflect.Descriptor instead.
func (*ADMDocuments) Descriptor() ([]byte, []int) {
	return file_ADM_proto_rawDescGZIP(), []int{4}
}

func (x *ADMDocuments) GetDeviceElementUses() []*Equipment.DeviceElementUse {
	if x != nil {
		return x.DeviceElementUses
	}
	return nil
}

func (x *ADMDocuments) GetDocumentCorrelations() []*Documents.DocumentCorrelation {
	if x != nil {
		return x.DocumentCorrelations
	}
	return nil
}

func (x *ADMDocuments) GetGuidanceAllocations() []*Guidance.GuidanceAllocation {
	if x != nil {
		return x.GuidanceAllocations
	}
	return nil
}

func (x *ADMDocuments) GetIrrCollections() []*Documents.IrrCollection {
	if x != nil {
		return x.IrrCollections
	}
	return nil
}

func (x *ADMDocuments) GetIrrRecords() []*Documents.IrrRecord {
	if x != nil {
		return x.IrrRecords
	}
	return nil
}

func (x *ADMDocuments) GetLoads() []*LoggedData.Load {
	if x != nil {
		return x.Loads
	}
	return nil
}

func (x *ADMDocuments) GetLoggedData() []*LoggedData.LoggedData {
	if x != nil {
		return x.LoggedData
	}
	return nil
}

func (x *ADMDocuments) GetLoggedDataCatalog() int64 {
	if x != nil {
		return x.LoggedDataCatalog
	}
	return 0
}

func (x *ADMDocuments) GetObs() []*Documents.Obs {
	if x != nil {
		return x.Obs
	}
	return nil
}

func (x *ADMDocuments) GetObsCollections() []*Documents.ObsCollection {
	if x != nil {
		return x.ObsCollections
	}
	return nil
}

func (x *ADMDocuments) GetObsDatasets() []*Documents.ObsDataset {
	if x != nil {
		return x.ObsDatasets
	}
	return nil
}

func (x *ADMDocuments) GetObservations() []*Documents.Observations {
	if x != nil {
		return x.Observations
	}
	return nil
}

func (x *ADMDocuments) GetPlans() []*Documents.Plan {
	if x != nil {
		return x.Plans
	}
	return nil
}

func (x *ADMDocuments) GetRecommendations() []*Documents.Recommendation {
	if x != nil {
		return x.Recommendations
	}
	return nil
}

func (x *ADMDocuments) GetSummaries() []*Documents.Summary {
	if x != nil {
		return x.Summaries
	}
	return nil
}

func (x *ADMDocuments) GetWorkItemOperations() []*Documents.WorkItemOperation {
	if x != nil {
		return x.WorkItemOperations
	}
	return nil
}

func (x *ADMDocuments) GetWorkItems() []*Documents.WorkItem {
	if x != nil {
		return x.WorkItems
	}
	return nil
}

func (x *ADMDocuments) GetWorkOrders() []*Documents.WorkOrder {
	if x != nil {
		return x.WorkOrders
	}
	return nil
}

func (x *ADMDocuments) GetWorkRecords() []*Documents.WorkRecord {
	if x != nil {
		return x.WorkRecords
	}
	return nil
}

var File_ADM_proto protoreflect.FileDescriptor

var file_ADM_proto_rawDesc = []byte{
	0x0a, 0x09, 0x41, 0x44, 0x4d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x41, 0x44, 0x41,
	0x50, 0x54, 0x2e, 0x41, 0x44, 0x4d, 0x1a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x47,
	0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x4c,
	0x6f, 0x67, 0x67, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0f, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x13, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x97, 0x02, 0x0a,
	0x14, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x49, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x65,
	0x74, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x41, 0x44, 0x4d, 0x2e, 0x50, 0x72, 0x6f,
	0x70, 0x72, 0x69, 0x65, 0x74, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x50,
	0x72, 0x6f, 0x70, 0x72, 0x69, 0x65, 0x74, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x12, 0x2c, 0x0a, 0x07, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x41, 0x44, 0x4d, 0x2e, 0x43, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x07, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x35,
	0x0a, 0x09, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x41, 0x44, 0x4d, 0x2e, 0x41, 0x44,
	0x4d, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x09, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4f, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x0f, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x22, 0x3a, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x70, 0x72, 0x69,
	0x65, 0x74, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x45, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x41, 0x44,
	0x4d, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd1, 0x14, 0x0a, 0x07, 0x43, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x12, 0x2e, 0x0a, 0x06, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x4c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x06, 0x42, 0x72, 0x61,
	0x6e, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x4c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x52, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x41,
	0x44, 0x41, 0x50, 0x54, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x05, 0x43, 0x72, 0x6f, 0x70, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x72, 0x6f, 0x70, 0x52, 0x05, 0x43, 0x72,
	0x6f, 0x70, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x43, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x4c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e,
	0x65, 0x52, 0x09, 0x43, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46,
	0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x41,
	0x44, 0x41, 0x50, 0x54, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x0c, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x6d, 0x0a, 0x1b, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1b, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x61, 0x0a, 0x17, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54,
	0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x17, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x70, 0x0a, 0x1c, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x1c,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x2b, 0x0a, 0x05,
	0x46, 0x61, 0x72, 0x6d, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x41, 0x44,
	0x41, 0x50, 0x54, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x46, 0x61,
	0x72, 0x6d, 0x52, 0x05, 0x46, 0x61, 0x72, 0x6d, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x41, 0x44, 0x41, 0x50,
	0x54, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x52, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x4e, 0x0a, 0x0f, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x42, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x52, 0x0f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x47, 0x72, 0x6f,
	0x77, 0x65, 0x72, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x41, 0x44, 0x41,
	0x50, 0x54, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x47, 0x72, 0x6f,
	0x77, 0x65, 0x72, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x12, 0x4b, 0x0a, 0x10,
	0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x47,
	0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x10, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x12, 0x45, 0x0a, 0x0e, 0x47, 0x75, 0x69,
	0x64, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x0e, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x12, 0x3d, 0x0a, 0x0b, 0x48, 0x69, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x69, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x0b, 0x48, 0x69, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x3c, 0x0a, 0x0b, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x52, 0x0b, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x43, 0x0a,
	0x0d, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x73, 0x18, 0x15,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x4c, 0x6f, 0x67,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x72, 0x52, 0x0d, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x72, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x16, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x4c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x07, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52,
	0x6f, 0x6c, 0x65, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x41, 0x44, 0x41,
	0x50, 0x54, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x0b, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52,
	0x6f, 0x6c, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x0d, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x41, 0x44,
	0x41, 0x50, 0x54, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a,
	0x08, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73,
	0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52,
	0x0a, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x14, 0x47,
	0x65, 0x6f, 0x50, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x41, 0x44, 0x41, 0x50,
	0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x6f, 0x50, 0x6f, 0x6c, 0x69,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x14, 0x47, 0x65,
	0x6f, 0x50, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x4c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x0a, 0x46, 0x61, 0x63, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x61, 0x0a,
	0x17, 0x49, 0x72, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x49, 0x72, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x49, 0x72, 0x72, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x64, 0x0a, 0x18, 0x49, 0x72, 0x72, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x72, 0x72, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18, 0x49, 0x72,
	0x72, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x58, 0x0a, 0x14, 0x45, 0x6e, 0x64, 0x67, 0x75, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1f,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x6e, 0x64, 0x67, 0x75, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x45, 0x6e, 0x64, 0x67,
	0x75, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x2e, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x06, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x73,
	0x12, 0x48, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x41, 0x44, 0x41, 0x50,
	0x54, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x4b, 0x0a, 0x10, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x22,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x64, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x10, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x64, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x63, 0x0a, 0x18, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x41, 0x44, 0x41, 0x50,
	0x54, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x18, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x25, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x0a, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x4f, 0x0a, 0x11, 0x4f, 0x62, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x26, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x4f, 0x62, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x27, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x0c, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22, 0xd7, 0x09, 0x0a, 0x0c,
	0x41, 0x44, 0x4d, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4f, 0x0a, 0x11,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x52, 0x11, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x73, 0x12, 0x58, 0x0a,
	0x14, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x41, 0x44,
	0x41, 0x50, 0x54, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x14, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x72, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x54, 0x0a, 0x13, 0x47, 0x75, 0x69, 0x64, 0x61,
	0x6e, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x47, 0x75, 0x69,
	0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e,
	0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x46, 0x0a,
	0x0e, 0x49, 0x72, 0x72, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x49, 0x72, 0x72, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x49, 0x72, 0x72, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x49, 0x72, 0x72, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x41, 0x44, 0x41, 0x50,
	0x54, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x49, 0x72, 0x72, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0a, 0x49, 0x72, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x12, 0x2c, 0x0a, 0x05, 0x4c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x05, 0x4c, 0x6f, 0x61, 0x64, 0x73, 0x12,
	0x3c, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x4c, 0x6f, 0x67, 0x67,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0a, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a,
	0x11, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x43, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x26, 0x0a, 0x03, 0x4f,
	0x62, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54,
	0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x52, 0x03,
	0x4f, 0x62, 0x73, 0x12, 0x46, 0x0a, 0x0e, 0x4f, 0x62, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x41, 0x44,
	0x41, 0x50, 0x54, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4f, 0x62,
	0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x4f, 0x62, 0x73,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x4f,
	0x62, 0x73, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x0b, 0x4f,
	0x62, 0x73, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x0c, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x0c, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a,
	0x05, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x41,
	0x44, 0x41, 0x50, 0x54, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x05, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x49, 0x0a, 0x0f, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x09, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54,
	0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x52, 0x09, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x52, 0x0a,
	0x12, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x41, 0x44, 0x41, 0x50,
	0x54, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x49, 0x74, 0x65, 0x6d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x57,
	0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x37, 0x0a, 0x09, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x09, 0x57, 0x6f, 0x72, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x57, 0x6f,
	0x72, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0a, 0x57, 0x6f, 0x72, 0x6b,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x41, 0x44,
	0x41, 0x50, 0x54, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x73, 0x42, 0x25, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x61, 0x6c, 0x74, 0x65, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x65, 0x2f,
	0x61, 0x64, 0x61, 0x70, 0x74, 0x2d, 0x67, 0x6f, 0x2f, 0x41, 0x44, 0x4d, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ADM_proto_rawDescOnce sync.Once
	file_ADM_proto_rawDescData = file_ADM_proto_rawDesc
)

func file_ADM_proto_rawDescGZIP() []byte {
	file_ADM_proto_rawDescOnce.Do(func() {
		file_ADM_proto_rawDescData = protoimpl.X.CompressGZIP(file_ADM_proto_rawDescData)
	})
	return file_ADM_proto_rawDescData
}

var file_ADM_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_ADM_proto_goTypes = []interface{}{
	(*ApplicationDataModel)(nil),                  // 0: ADAPT.ADM.ApplicationDataModel
	(*ProprietaryValue)(nil),                      // 1: ADAPT.ADM.ProprietaryValue
	(*Properties)(nil),                            // 2: ADAPT.ADM.Properties
	(*Catalog)(nil),                               // 3: ADAPT.ADM.Catalog
	(*ADMDocuments)(nil),                          // 4: ADAPT.ADM.ADMDocuments
	nil,                                           // 5: ADAPT.ADM.Properties.PropertiesEntry
	(*ReferenceLayers.ReferenceLayer)(nil),        // 6: ADAPT.ReferenceLayers.ReferenceLayer
	(*Logistics.Brand)(nil),                       // 7: ADAPT.Logistics.Brand
	(*Logistics.Company)(nil),                     // 8: ADAPT.Logistics.Company
	(*Equipment.Connector)(nil),                   // 9: ADAPT.Equipment.Connector
	(*Logistics.ContactInfo)(nil),                 // 10: ADAPT.Logistics.ContactInfo
	(*Products.Crop)(nil),                         // 11: ADAPT.Products.Crop
	(*Logistics.CropZone)(nil),                    // 12: ADAPT.Logistics.CropZone
	(*Equipment.DeviceElement)(nil),               // 13: ADAPT.Equipment.DeviceElement
	(*Equipment.DeviceModel)(nil),                 // 14: ADAPT.Equipment.DeviceModel
	(*Equipment.DeviceElementConfiguration)(nil),  // 15: ADAPT.Equipment.DeviceElementConfiguration
	(*Equipment.EquipmentConfiguration)(nil),      // 16: ADAPT.Equipment.EquipmentConfiguration
	(*Equipment.EquipmentConfigurationGroup)(nil), // 17: ADAPT.Equipment.EquipmentConfigurationGroup
	(*Logistics.Farm)(nil),                        // 18: ADAPT.Logistics.Farm
	(*Logistics.Field)(nil),                       // 19: ADAPT.Logistics.Field
	(*FieldBounderies.FieldBoundary)(nil),         // 20: ADAPT.FieldBounderies.FieldBoundary
	(*Logistics.Grower)(nil),                      // 21: ADAPT.Logistics.Grower
	(*Guidance.GuidancePattern)(nil),              // 22: ADAPT.Guidance.GuidancePattern
	(*Guidance.GuidanceGroup)(nil),                // 23: ADAPT.Guidance.GuidanceGroup
	(*Equipment.HitchPoint)(nil),                  // 24: ADAPT.Equipment.HitchPoint
	(*Products.Ingredient)(nil),                   // 25: ADAPT.Products.Ingredient
	(*Logistics.Manufacturer)(nil),                // 26: ADAPT.Logistics.Manufacturer
	(*Logistics.Person)(nil),                      // 27: ADAPT.Logistics.Person
	(*Logistics.PersonRole)(nil),                  // 28: ADAPT.Logistics.PersonRole
	(*Prescriptions.Prescription)(nil),            // 29: ADAPT.Prescriptions.Prescription
	(*Products.Product)(nil),                      // 30: ADAPT.Products.Product
	(*Common.TimeScope)(nil),                      // 31: ADAPT.Common.TimeScope
	(*Common.GeoPoliticalContext)(nil),            // 32: ADAPT.Common.GeoPoliticalContext
	(*Logistics.Facility)(nil),                    // 33: ADAPT.Logistics.Facility
	(*Equipment.IrrSystemConfiguration)(nil),      // 34: ADAPT.Equipment.IrrSystemConfiguration
	(*Equipment.IrrSectionConfiguration)(nil),     // 35: ADAPT.Equipment.IrrSectionConfiguration
	(*Equipment.EndgunConfiguration)(nil),         // 36: ADAPT.Equipment.EndgunConfiguration
	(*Logistics.Place)(nil),                       // 37: ADAPT.Logistics.Place
	(*Products.ContainerModel)(nil),               // 38: ADAPT.Products.ContainerModel
	(*Products.PackagedProduct)(nil),              // 39: ADAPT.Products.PackagedProduct
	(*Products.PackagedProductInstance)(nil),      // 40: ADAPT.Products.PackagedProductInstance
	(*Products.Container)(nil),                    // 41: ADAPT.Products.Container
	(*Documents.ObsCodeComponent)(nil),            // 42: ADAPT.Documents.ObsCodeComponent
	(*Equipment.DeviceSeries)(nil),                // 43: ADAPT.Equipment.DeviceSeries
	(*Equipment.DeviceElementUse)(nil),            // 44: ADAPT.Equipment.DeviceElementUse
	(*Documents.DocumentCorrelation)(nil),         // 45: ADAPT.Documents.DocumentCorrelation
	(*Guidance.GuidanceAllocation)(nil),           // 46: ADAPT.Guidance.GuidanceAllocation
	(*Documents.IrrCollection)(nil),               // 47: ADAPT.Documents.IrrCollection
	(*Documents.IrrRecord)(nil),                   // 48: ADAPT.Documents.IrrRecord
	(*LoggedData.Load)(nil),                       // 49: ADAPT.LoggedData.Load
	(*LoggedData.LoggedData)(nil),                 // 50: ADAPT.LoggedData.LoggedData
	(*Documents.Obs)(nil),                         // 51: ADAPT.Documents.Obs
	(*Documents.ObsCollection)(nil),               // 52: ADAPT.Documents.ObsCollection
	(*Documents.ObsDataset)(nil),                  // 53: ADAPT.Documents.ObsDataset
	(*Documents.Observations)(nil),                // 54: ADAPT.Documents.Observations
	(*Documents.Plan)(nil),                        // 55: ADAPT.Documents.Plan
	(*Documents.Recommendation)(nil),              // 56: ADAPT.Documents.Recommendation
	(*Documents.Summary)(nil),                     // 57: ADAPT.Documents.Summary
	(*Documents.WorkItemOperation)(nil),           // 58: ADAPT.Documents.WorkItemOperation
	(*Documents.WorkItem)(nil),                    // 59: ADAPT.Documents.WorkItem
	(*Documents.WorkOrder)(nil),                   // 60: ADAPT.Documents.WorkOrder
	(*Documents.WorkRecord)(nil),                  // 61: ADAPT.Documents.WorkRecord
}
var file_ADM_proto_depIdxs = []int32{
	1,  // 0: ADAPT.ADM.ApplicationDataModel.ProprietaryValues:type_name -> ADAPT.ADM.ProprietaryValue
	3,  // 1: ADAPT.ADM.ApplicationDataModel.Catalog:type_name -> ADAPT.ADM.Catalog
	4,  // 2: ADAPT.ADM.ApplicationDataModel.Documents:type_name -> ADAPT.ADM.ADMDocuments
	6,  // 3: ADAPT.ADM.ApplicationDataModel.ReferenceLayers:type_name -> ADAPT.ReferenceLayers.ReferenceLayer
	5,  // 4: ADAPT.ADM.Properties.Properties:type_name -> ADAPT.ADM.Properties.PropertiesEntry
	7,  // 5: ADAPT.ADM.Catalog.Brands:type_name -> ADAPT.Logistics.Brand
	8,  // 6: ADAPT.ADM.Catalog.Companies:type_name -> ADAPT.Logistics.Company
	9,  // 7: ADAPT.ADM.Catalog.Connectors:type_name -> ADAPT.Equipment.Connector
	10, // 8: ADAPT.ADM.Catalog.ContactInfo:type_name -> ADAPT.Logistics.ContactInfo
	11, // 9: ADAPT.ADM.Catalog.Crops:type_name -> ADAPT.Products.Crop
	12, // 10: ADAPT.ADM.Catalog.CropZones:type_name -> ADAPT.Logistics.CropZone
	13, // 11: ADAPT.ADM.Catalog.DeviceElements:type_name -> ADAPT.Equipment.DeviceElement
	14, // 12: ADAPT.ADM.Catalog.DeviceModels:type_name -> ADAPT.Equipment.DeviceModel
	15, // 13: ADAPT.ADM.Catalog.DeviceElementConfigurations:type_name -> ADAPT.Equipment.DeviceElementConfiguration
	16, // 14: ADAPT.ADM.Catalog.EquipmentConfigurations:type_name -> ADAPT.Equipment.EquipmentConfiguration
	17, // 15: ADAPT.ADM.Catalog.EquipmentConfigurationGroups:type_name -> ADAPT.Equipment.EquipmentConfigurationGroup
	18, // 16: ADAPT.ADM.Catalog.Farms:type_name -> ADAPT.Logistics.Farm
	19, // 17: ADAPT.ADM.Catalog.Fields:type_name -> ADAPT.Logistics.Field
	20, // 18: ADAPT.ADM.Catalog.FieldBoundaries:type_name -> ADAPT.FieldBounderies.FieldBoundary
	21, // 19: ADAPT.ADM.Catalog.Growers:type_name -> ADAPT.Logistics.Grower
	22, // 20: ADAPT.ADM.Catalog.GuidancePatterns:type_name -> ADAPT.Guidance.GuidancePattern
	23, // 21: ADAPT.ADM.Catalog.GuidanceGroups:type_name -> ADAPT.Guidance.GuidanceGroup
	24, // 22: ADAPT.ADM.Catalog.HitchPoints:type_name -> ADAPT.Equipment.HitchPoint
	25, // 23: ADAPT.ADM.Catalog.Ingredients:type_name -> ADAPT.Products.Ingredient
	26, // 24: ADAPT.ADM.Catalog.Manufacturers:type_name -> ADAPT.Logistics.Manufacturer
	27, // 25: ADAPT.ADM.Catalog.Persons:type_name -> ADAPT.Logistics.Person
	28, // 26: ADAPT.ADM.Catalog.PersonRoles:type_name -> ADAPT.Logistics.PersonRole
	29, // 27: ADAPT.ADM.Catalog.Prescriptions:type_name -> ADAPT.Prescriptions.Prescription
	30, // 28: ADAPT.ADM.Catalog.Products:type_name -> ADAPT.Products.Product
	31, // 29: ADAPT.ADM.Catalog.TimeScopes:type_name -> ADAPT.Common.TimeScope
	32, // 30: ADAPT.ADM.Catalog.GeoPoliticalContexts:type_name -> ADAPT.Common.GeoPoliticalContext
	33, // 31: ADAPT.ADM.Catalog.Facilities:type_name -> ADAPT.Logistics.Facility
	34, // 32: ADAPT.ADM.Catalog.IrrSystemConfigurations:type_name -> ADAPT.Equipment.IrrSystemConfiguration
	35, // 33: ADAPT.ADM.Catalog.IrrSectionConfigurations:type_name -> ADAPT.Equipment.IrrSectionConfiguration
	36, // 34: ADAPT.ADM.Catalog.EndgunConfigurations:type_name -> ADAPT.Equipment.EndgunConfiguration
	37, // 35: ADAPT.ADM.Catalog.Places:type_name -> ADAPT.Logistics.Place
	38, // 36: ADAPT.ADM.Catalog.ContainerModels:type_name -> ADAPT.Products.ContainerModel
	39, // 37: ADAPT.ADM.Catalog.PackagedProducts:type_name -> ADAPT.Products.PackagedProduct
	40, // 38: ADAPT.ADM.Catalog.PackagedProductInstances:type_name -> ADAPT.Products.PackagedProductInstance
	41, // 39: ADAPT.ADM.Catalog.Containers:type_name -> ADAPT.Products.Container
	42, // 40: ADAPT.ADM.Catalog.ObsCodeComponents:type_name -> ADAPT.Documents.ObsCodeComponent
	43, // 41: ADAPT.ADM.Catalog.DeviceSeries:type_name -> ADAPT.Equipment.DeviceSeries
	44, // 42: ADAPT.ADM.ADMDocuments.DeviceElementUses:type_name -> ADAPT.Equipment.DeviceElementUse
	45, // 43: ADAPT.ADM.ADMDocuments.DocumentCorrelations:type_name -> ADAPT.Documents.DocumentCorrelation
	46, // 44: ADAPT.ADM.ADMDocuments.GuidanceAllocations:type_name -> ADAPT.Guidance.GuidanceAllocation
	47, // 45: ADAPT.ADM.ADMDocuments.IrrCollections:type_name -> ADAPT.Documents.IrrCollection
	48, // 46: ADAPT.ADM.ADMDocuments.IrrRecords:type_name -> ADAPT.Documents.IrrRecord
	49, // 47: ADAPT.ADM.ADMDocuments.Loads:type_name -> ADAPT.LoggedData.Load
	50, // 48: ADAPT.ADM.ADMDocuments.LoggedData:type_name -> ADAPT.LoggedData.LoggedData
	51, // 49: ADAPT.ADM.ADMDocuments.Obs:type_name -> ADAPT.Documents.Obs
	52, // 50: ADAPT.ADM.ADMDocuments.ObsCollections:type_name -> ADAPT.Documents.ObsCollection
	53, // 51: ADAPT.ADM.ADMDocuments.ObsDatasets:type_name -> ADAPT.Documents.ObsDataset
	54, // 52: ADAPT.ADM.ADMDocuments.Observations:type_name -> ADAPT.Documents.Observations
	55, // 53: ADAPT.ADM.ADMDocuments.Plans:type_name -> ADAPT.Documents.Plan
	56, // 54: ADAPT.ADM.ADMDocuments.Recommendations:type_name -> ADAPT.Documents.Recommendation
	57, // 55: ADAPT.ADM.ADMDocuments.Summaries:type_name -> ADAPT.Documents.Summary
	58, // 56: ADAPT.ADM.ADMDocuments.WorkItemOperations:type_name -> ADAPT.Documents.WorkItemOperation
	59, // 57: ADAPT.ADM.ADMDocuments.WorkItems:type_name -> ADAPT.Documents.WorkItem
	60, // 58: ADAPT.ADM.ADMDocuments.WorkOrders:type_name -> ADAPT.Documents.WorkOrder
	61, // 59: ADAPT.ADM.ADMDocuments.WorkRecords:type_name -> ADAPT.Documents.WorkRecord
	60, // [60:60] is the sub-list for method output_type
	60, // [60:60] is the sub-list for method input_type
	60, // [60:60] is the sub-list for extension type_name
	60, // [60:60] is the sub-list for extension extendee
	0,  // [0:60] is the sub-list for field type_name
}

func init() { file_ADM_proto_init() }
func file_ADM_proto_init() {
	if File_ADM_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ADM_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationDataModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ADM_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProprietaryValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ADM_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Properties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ADM_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Catalog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ADM_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ADMDocuments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ADM_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ADM_proto_goTypes,
		DependencyIndexes: file_ADM_proto_depIdxs,
		MessageInfos:      file_ADM_proto_msgTypes,
	}.Build()
	File_ADM_proto = out.File
	file_ADM_proto_rawDesc = nil
	file_ADM_proto_goTypes = nil
	file_ADM_proto_depIdxs = nil
}
