// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.19.6
// source: Guidance.proto

package Guidance

import (
	Common "github.com/maltegrosse/adapt-go/Common"
	Representations "github.com/maltegrosse/adapt-go/Representations"
	Shapes "github.com/maltegrosse/adapt-go/Shapes"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GuidanceExtension_GuidanceExtensionEnum int32

const (
	GuidanceExtension_FromBothPoints GuidanceExtension_GuidanceExtensionEnum = 0
	GuidanceExtension_FromA          GuidanceExtension_GuidanceExtensionEnum = 1
	GuidanceExtension_FromB          GuidanceExtension_GuidanceExtensionEnum = 2
	GuidanceExtension_None           GuidanceExtension_GuidanceExtensionEnum = 3
)

// Enum value maps for GuidanceExtension_GuidanceExtensionEnum.
var (
	GuidanceExtension_GuidanceExtensionEnum_name = map[int32]string{
		0: "FromBothPoints",
		1: "FromA",
		2: "FromB",
		3: "None",
	}
	GuidanceExtension_GuidanceExtensionEnum_value = map[string]int32{
		"FromBothPoints": 0,
		"FromA":          1,
		"FromB":          2,
		"None":           3,
	}
)

func (x GuidanceExtension_GuidanceExtensionEnum) Enum() *GuidanceExtension_GuidanceExtensionEnum {
	p := new(GuidanceExtension_GuidanceExtensionEnum)
	*p = x
	return p
}

func (x GuidanceExtension_GuidanceExtensionEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GuidanceExtension_GuidanceExtensionEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_Guidance_proto_enumTypes[0].Descriptor()
}

func (GuidanceExtension_GuidanceExtensionEnum) Type() protoreflect.EnumType {
	return &file_Guidance_proto_enumTypes[0]
}

func (x GuidanceExtension_GuidanceExtensionEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GuidanceExtension_GuidanceExtensionEnum.Descriptor instead.
func (GuidanceExtension_GuidanceExtensionEnum) EnumDescriptor() ([]byte, []int) {
	return file_Guidance_proto_rawDescGZIP(), []int{4, 0}
}

type GuidancePatternType_GuidancePatternTypeEnum int32

const (
	GuidancePatternType_APlus       GuidancePatternType_GuidancePatternTypeEnum = 0
	GuidancePatternType_AbLine      GuidancePatternType_GuidancePatternTypeEnum = 1
	GuidancePatternType_AbCurve     GuidancePatternType_GuidancePatternTypeEnum = 2
	GuidancePatternType_CenterPivot GuidancePatternType_GuidancePatternTypeEnum = 3
	GuidancePatternType_Spiral      GuidancePatternType_GuidancePatternTypeEnum = 4
)

// Enum value maps for GuidancePatternType_GuidancePatternTypeEnum.
var (
	GuidancePatternType_GuidancePatternTypeEnum_name = map[int32]string{
		0: "APlus",
		1: "AbLine",
		2: "AbCurve",
		3: "CenterPivot",
		4: "Spiral",
	}
	GuidancePatternType_GuidancePatternTypeEnum_value = map[string]int32{
		"APlus":       0,
		"AbLine":      1,
		"AbCurve":     2,
		"CenterPivot": 3,
		"Spiral":      4,
	}
)

func (x GuidancePatternType_GuidancePatternTypeEnum) Enum() *GuidancePatternType_GuidancePatternTypeEnum {
	p := new(GuidancePatternType_GuidancePatternTypeEnum)
	*p = x
	return p
}

func (x GuidancePatternType_GuidancePatternTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GuidancePatternType_GuidancePatternTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_Guidance_proto_enumTypes[1].Descriptor()
}

func (GuidancePatternType_GuidancePatternTypeEnum) Type() protoreflect.EnumType {
	return &file_Guidance_proto_enumTypes[1]
}

func (x GuidancePatternType_GuidancePatternTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GuidancePatternType_GuidancePatternTypeEnum.Descriptor instead.
func (GuidancePatternType_GuidancePatternTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_Guidance_proto_rawDescGZIP(), []int{7, 0}
}

type PivotGuidanceDefinition_PivotGuidanceDefinitionEnum int32

const (
	PivotGuidanceDefinition_PivotGuidancePatternStartEndCenter PivotGuidanceDefinition_PivotGuidanceDefinitionEnum = 0
	PivotGuidanceDefinition_PivotGuidancePatternCenterRadius   PivotGuidanceDefinition_PivotGuidanceDefinitionEnum = 1
	PivotGuidanceDefinition_PivotGuidancePatternThreePoints    PivotGuidanceDefinition_PivotGuidanceDefinitionEnum = 2
)

// Enum value maps for PivotGuidanceDefinition_PivotGuidanceDefinitionEnum.
var (
	PivotGuidanceDefinition_PivotGuidanceDefinitionEnum_name = map[int32]string{
		0: "PivotGuidancePatternStartEndCenter",
		1: "PivotGuidancePatternCenterRadius",
		2: "PivotGuidancePatternThreePoints",
	}
	PivotGuidanceDefinition_PivotGuidanceDefinitionEnum_value = map[string]int32{
		"PivotGuidancePatternStartEndCenter": 0,
		"PivotGuidancePatternCenterRadius":   1,
		"PivotGuidancePatternThreePoints":    2,
	}
)

func (x PivotGuidanceDefinition_PivotGuidanceDefinitionEnum) Enum() *PivotGuidanceDefinition_PivotGuidanceDefinitionEnum {
	p := new(PivotGuidanceDefinition_PivotGuidanceDefinitionEnum)
	*p = x
	return p
}

func (x PivotGuidanceDefinition_PivotGuidanceDefinitionEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PivotGuidanceDefinition_PivotGuidanceDefinitionEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_Guidance_proto_enumTypes[2].Descriptor()
}

func (PivotGuidanceDefinition_PivotGuidanceDefinitionEnum) Type() protoreflect.EnumType {
	return &file_Guidance_proto_enumTypes[2]
}

func (x PivotGuidanceDefinition_PivotGuidanceDefinitionEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PivotGuidanceDefinition_PivotGuidanceDefinitionEnum.Descriptor instead.
func (PivotGuidanceDefinition_PivotGuidanceDefinitionEnum) EnumDescriptor() ([]byte, []int) {
	return file_Guidance_proto_rawDescGZIP(), []int{10, 0}
}

type PropagationDirection_PropagationDirectionEnum int32

const (
	PropagationDirection_BothDirections PropagationDirection_PropagationDirectionEnum = 0
	PropagationDirection_LeftOnly       PropagationDirection_PropagationDirectionEnum = 1
	PropagationDirection_NoPropagation  PropagationDirection_PropagationDirectionEnum = 2
	PropagationDirection_RightOnly      PropagationDirection_PropagationDirectionEnum = 3
)

// Enum value maps for PropagationDirection_PropagationDirectionEnum.
var (
	PropagationDirection_PropagationDirectionEnum_name = map[int32]string{
		0: "BothDirections",
		1: "LeftOnly",
		2: "NoPropagation",
		3: "RightOnly",
	}
	PropagationDirection_PropagationDirectionEnum_value = map[string]int32{
		"BothDirections": 0,
		"LeftOnly":       1,
		"NoPropagation":  2,
		"RightOnly":      3,
	}
)

func (x PropagationDirection_PropagationDirectionEnum) Enum() *PropagationDirection_PropagationDirectionEnum {
	p := new(PropagationDirection_PropagationDirectionEnum)
	*p = x
	return p
}

func (x PropagationDirection_PropagationDirectionEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PropagationDirection_PropagationDirectionEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_Guidance_proto_enumTypes[3].Descriptor()
}

func (PropagationDirection_PropagationDirectionEnum) Type() protoreflect.EnumType {
	return &file_Guidance_proto_enumTypes[3]
}

func (x PropagationDirection_PropagationDirectionEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PropagationDirection_PropagationDirectionEnum.Descriptor instead.
func (PropagationDirection_PropagationDirectionEnum) EnumDescriptor() ([]byte, []int) {
	return file_Guidance_proto_rawDescGZIP(), []int{12, 0}
}

type APlus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Point   *Shapes.Shape `protobuf:"bytes,1,opt,name=Point,proto3" json:"Point,omitempty"`
	Heading float64       `protobuf:"fixed64,2,opt,name=Heading,proto3" json:"Heading,omitempty"`
}

func (x *APlus) Reset() {
	*x = APlus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Guidance_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APlus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APlus) ProtoMessage() {}

func (x *APlus) ProtoReflect() protoreflect.Message {
	mi := &file_Guidance_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APlus.ProtoReflect.Descriptor instead.
func (*APlus) Descriptor() ([]byte, []int) {
	return file_Guidance_proto_rawDescGZIP(), []int{0}
}

func (x *APlus) GetPoint() *Shapes.Shape {
	if x != nil {
		return x.Point
	}
	return nil
}

func (x *APlus) GetHeading() float64 {
	if x != nil {
		return x.Heading
	}
	return 0
}

type AbCurve struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumberOfSegments    int64           `protobuf:"varint,1,opt,name=NumberOfSegments,proto3" json:"NumberOfSegments,omitempty"`
	Heading             float64         `protobuf:"fixed64,2,opt,name=Heading,proto3" json:"Heading,omitempty"`
	EastShiftComponent  float64         `protobuf:"fixed64,3,opt,name=EastShiftComponent,proto3" json:"EastShiftComponent,omitempty"`
	NorthShiftComponent float64         `protobuf:"fixed64,4,opt,name=NorthShiftComponent,proto3" json:"NorthShiftComponent,omitempty"`
	Shape               []*Shapes.Shape `protobuf:"bytes,5,rep,name=Shape,proto3" json:"Shape,omitempty"`
}

func (x *AbCurve) Reset() {
	*x = AbCurve{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Guidance_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbCurve) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbCurve) ProtoMessage() {}

func (x *AbCurve) ProtoReflect() protoreflect.Message {
	mi := &file_Guidance_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbCurve.ProtoReflect.Descriptor instead.
func (*AbCurve) Descriptor() ([]byte, []int) {
	return file_Guidance_proto_rawDescGZIP(), []int{1}
}

func (x *AbCurve) GetNumberOfSegments() int64 {
	if x != nil {
		return x.NumberOfSegments
	}
	return 0
}

func (x *AbCurve) GetHeading() float64 {
	if x != nil {
		return x.Heading
	}
	return 0
}

func (x *AbCurve) GetEastShiftComponent() float64 {
	if x != nil {
		return x.EastShiftComponent
	}
	return 0
}

func (x *AbCurve) GetNorthShiftComponent() float64 {
	if x != nil {
		return x.NorthShiftComponent
	}
	return 0
}

func (x *AbCurve) GetShape() []*Shapes.Shape {
	if x != nil {
		return x.Shape
	}
	return nil
}

type AbLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	A                   *Shapes.Shape `protobuf:"bytes,1,opt,name=A,proto3" json:"A,omitempty"`
	B                   *Shapes.Shape `protobuf:"bytes,2,opt,name=B,proto3" json:"B,omitempty"`
	Heading             float64       `protobuf:"fixed64,3,opt,name=Heading,proto3" json:"Heading,omitempty"`
	EastShiftComponent  float64       `protobuf:"fixed64,4,opt,name=EastShiftComponent,proto3" json:"EastShiftComponent,omitempty"`
	NorthShiftComponent float64       `protobuf:"fixed64,5,opt,name=NorthShiftComponent,proto3" json:"NorthShiftComponent,omitempty"`
}

func (x *AbLine) Reset() {
	*x = AbLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Guidance_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbLine) ProtoMessage() {}

func (x *AbLine) ProtoReflect() protoreflect.Message {
	mi := &file_Guidance_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbLine.ProtoReflect.Descriptor instead.
func (*AbLine) Descriptor() ([]byte, []int) {
	return file_Guidance_proto_rawDescGZIP(), []int{2}
}

func (x *AbLine) GetA() *Shapes.Shape {
	if x != nil {
		return x.A
	}
	return nil
}

func (x *AbLine) GetB() *Shapes.Shape {
	if x != nil {
		return x.B
	}
	return nil
}

func (x *AbLine) GetHeading() float64 {
	if x != nil {
		return x.Heading
	}
	return 0
}

func (x *AbLine) GetEastShiftComponent() float64 {
	if x != nil {
		return x.EastShiftComponent
	}
	return 0
}

func (x *AbLine) GetNorthShiftComponent() float64 {
	if x != nil {
		return x.NorthShiftComponent
	}
	return 0
}

type GuidanceAllocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              *Common.CompoundIdentifier `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	GuidanceGroupId int64                      `protobuf:"varint,2,opt,name=GuidanceGroupId,proto3" json:"GuidanceGroupId,omitempty"`
	GuidanceShift   *GuidanceShift             `protobuf:"bytes,3,opt,name=GuidanceShift,proto3" json:"GuidanceShift,omitempty"`
	TimeScopes      []*Common.TimeScope        `protobuf:"bytes,4,rep,name=TimeScopes,proto3" json:"TimeScopes,omitempty"`
}

func (x *GuidanceAllocation) Reset() {
	*x = GuidanceAllocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Guidance_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuidanceAllocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuidanceAllocation) ProtoMessage() {}

func (x *GuidanceAllocation) ProtoReflect() protoreflect.Message {
	mi := &file_Guidance_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuidanceAllocation.ProtoReflect.Descriptor instead.
func (*GuidanceAllocation) Descriptor() ([]byte, []int) {
	return file_Guidance_proto_rawDescGZIP(), []int{3}
}

func (x *GuidanceAllocation) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GuidanceAllocation) GetGuidanceGroupId() int64 {
	if x != nil {
		return x.GuidanceGroupId
	}
	return 0
}

func (x *GuidanceAllocation) GetGuidanceShift() *GuidanceShift {
	if x != nil {
		return x.GuidanceShift
	}
	return nil
}

func (x *GuidanceAllocation) GetTimeScopes() []*Common.TimeScope {
	if x != nil {
		return x.TimeScopes
	}
	return nil
}

type GuidanceExtension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GuidanceExtension) Reset() {
	*x = GuidanceExtension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Guidance_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuidanceExtension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuidanceExtension) ProtoMessage() {}

func (x *GuidanceExtension) ProtoReflect() protoreflect.Message {
	mi := &file_Guidance_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuidanceExtension.ProtoReflect.Descriptor instead.
func (*GuidanceExtension) Descriptor() ([]byte, []int) {
	return file_Guidance_proto_rawDescGZIP(), []int{4}
}

type GuidanceGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 *Common.CompoundIdentifier `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Description        string                     `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	GuidancePatternIds []int64                    `protobuf:"varint,3,rep,packed,name=GuidancePatternIds,proto3" json:"GuidancePatternIds,omitempty"`
	BoundingPolygon    *Shapes.Shape              `protobuf:"bytes,4,opt,name=BoundingPolygon,proto3" json:"BoundingPolygon,omitempty"`
}

func (x *GuidanceGroup) Reset() {
	*x = GuidanceGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Guidance_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuidanceGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuidanceGroup) ProtoMessage() {}

func (x *GuidanceGroup) ProtoReflect() protoreflect.Message {
	mi := &file_Guidance_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuidanceGroup.ProtoReflect.Descriptor instead.
func (*GuidanceGroup) Descriptor() ([]byte, []int) {
	return file_Guidance_proto_rawDescGZIP(), []int{5}
}

func (x *GuidanceGroup) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GuidanceGroup) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GuidanceGroup) GetGuidancePatternIds() []int64 {
	if x != nil {
		return x.GuidancePatternIds
	}
	return nil
}

func (x *GuidanceGroup) GetBoundingPolygon() *Shapes.Shape {
	if x != nil {
		return x.BoundingPolygon
	}
	return nil
}

type GuidancePattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   *Common.CompoundIdentifier                  `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	GuidancePatternType  *GuidancePatternType                        `protobuf:"bytes,2,opt,name=GuidancePatternType,proto3" json:"GuidancePatternType,omitempty"`
	GpsSource            *Common.GpsSource                           `protobuf:"bytes,3,opt,name=GpsSource,proto3" json:"GpsSource,omitempty"`
	OriginalEpsgCode     string                                      `protobuf:"bytes,4,opt,name=OriginalEpsgCode,proto3" json:"OriginalEpsgCode,omitempty"`
	Description          string                                      `protobuf:"bytes,5,opt,name=Description,proto3" json:"Description,omitempty"`
	SwathWidth           *Representations.NumericRepresentationValue `protobuf:"bytes,6,opt,name=SwathWidth,proto3" json:"SwathWidth,omitempty"`
	PropagationDirection *PropagationDirection                       `protobuf:"bytes,7,opt,name=PropagationDirection,proto3" json:"PropagationDirection,omitempty"`
	Extension            *GuidanceExtension                          `protobuf:"bytes,8,opt,name=Extension,proto3" json:"Extension,omitempty"`
	NumbersOfSwathsLeft  int64                                       `protobuf:"varint,9,opt,name=NumbersOfSwathsLeft,proto3" json:"NumbersOfSwathsLeft,omitempty"`
	NumbersOfSwathsRight int64                                       `protobuf:"varint,10,opt,name=NumbersOfSwathsRight,proto3" json:"NumbersOfSwathsRight,omitempty"`
	BoundingPolygon      *Shapes.Shape                               `protobuf:"bytes,11,opt,name=BoundingPolygon,proto3" json:"BoundingPolygon,omitempty"`
	// Types that are assignable to Subtype:
	//
	//	*GuidancePattern_AbCurve
	//	*GuidancePattern_AbLine
	//	*GuidancePattern_MultiAbLine
	//	*GuidancePattern_APlus
	//	*GuidancePattern_PivotGuidancePattern
	//	*GuidancePattern_Spiral
	Subtype isGuidancePattern_Subtype `protobuf_oneof:"subtype"`
}

func (x *GuidancePattern) Reset() {
	*x = GuidancePattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Guidance_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuidancePattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuidancePattern) ProtoMessage() {}

func (x *GuidancePattern) ProtoReflect() protoreflect.Message {
	mi := &file_Guidance_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuidancePattern.ProtoReflect.Descriptor instead.
func (*GuidancePattern) Descriptor() ([]byte, []int) {
	return file_Guidance_proto_rawDescGZIP(), []int{6}
}

func (x *GuidancePattern) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GuidancePattern) GetGuidancePatternType() *GuidancePatternType {
	if x != nil {
		return x.GuidancePatternType
	}
	return nil
}

func (x *GuidancePattern) GetGpsSource() *Common.GpsSource {
	if x != nil {
		return x.GpsSource
	}
	return nil
}

func (x *GuidancePattern) GetOriginalEpsgCode() string {
	if x != nil {
		return x.OriginalEpsgCode
	}
	return ""
}

func (x *GuidancePattern) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GuidancePattern) GetSwathWidth() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.SwathWidth
	}
	return nil
}

func (x *GuidancePattern) GetPropagationDirection() *PropagationDirection {
	if x != nil {
		return x.PropagationDirection
	}
	return nil
}

func (x *GuidancePattern) GetExtension() *GuidanceExtension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *GuidancePattern) GetNumbersOfSwathsLeft() int64 {
	if x != nil {
		return x.NumbersOfSwathsLeft
	}
	return 0
}

func (x *GuidancePattern) GetNumbersOfSwathsRight() int64 {
	if x != nil {
		return x.NumbersOfSwathsRight
	}
	return 0
}

func (x *GuidancePattern) GetBoundingPolygon() *Shapes.Shape {
	if x != nil {
		return x.BoundingPolygon
	}
	return nil
}

func (m *GuidancePattern) GetSubtype() isGuidancePattern_Subtype {
	if m != nil {
		return m.Subtype
	}
	return nil
}

func (x *GuidancePattern) GetAbCurve() *AbCurve {
	if x, ok := x.GetSubtype().(*GuidancePattern_AbCurve); ok {
		return x.AbCurve
	}
	return nil
}

func (x *GuidancePattern) GetAbLine() *AbLine {
	if x, ok := x.GetSubtype().(*GuidancePattern_AbLine); ok {
		return x.AbLine
	}
	return nil
}

func (x *GuidancePattern) GetMultiAbLine() *MultiAbLine {
	if x, ok := x.GetSubtype().(*GuidancePattern_MultiAbLine); ok {
		return x.MultiAbLine
	}
	return nil
}

func (x *GuidancePattern) GetAPlus() *APlus {
	if x, ok := x.GetSubtype().(*GuidancePattern_APlus); ok {
		return x.APlus
	}
	return nil
}

func (x *GuidancePattern) GetPivotGuidancePattern() *PivotGuidancePattern {
	if x, ok := x.GetSubtype().(*GuidancePattern_PivotGuidancePattern); ok {
		return x.PivotGuidancePattern
	}
	return nil
}

func (x *GuidancePattern) GetSpiral() *Spiral {
	if x, ok := x.GetSubtype().(*GuidancePattern_Spiral); ok {
		return x.Spiral
	}
	return nil
}

type isGuidancePattern_Subtype interface {
	isGuidancePattern_Subtype()
}

type GuidancePattern_AbCurve struct {
	AbCurve *AbCurve `protobuf:"bytes,101,opt,name=AbCurve,proto3,oneof"`
}

type GuidancePattern_AbLine struct {
	AbLine *AbLine `protobuf:"bytes,102,opt,name=AbLine,proto3,oneof"`
}

type GuidancePattern_MultiAbLine struct {
	MultiAbLine *MultiAbLine `protobuf:"bytes,103,opt,name=MultiAbLine,proto3,oneof"`
}

type GuidancePattern_APlus struct {
	APlus *APlus `protobuf:"bytes,104,opt,name=APlus,proto3,oneof"`
}

type GuidancePattern_PivotGuidancePattern struct {
	PivotGuidancePattern *PivotGuidancePattern `protobuf:"bytes,105,opt,name=PivotGuidancePattern,proto3,oneof"`
}

type GuidancePattern_Spiral struct {
	Spiral *Spiral `protobuf:"bytes,106,opt,name=Spiral,proto3,oneof"`
}

func (*GuidancePattern_AbCurve) isGuidancePattern_Subtype() {}

func (*GuidancePattern_AbLine) isGuidancePattern_Subtype() {}

func (*GuidancePattern_MultiAbLine) isGuidancePattern_Subtype() {}

func (*GuidancePattern_APlus) isGuidancePattern_Subtype() {}

func (*GuidancePattern_PivotGuidancePattern) isGuidancePattern_Subtype() {}

func (*GuidancePattern_Spiral) isGuidancePattern_Subtype() {}

type GuidancePatternType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GuidancePatternType) Reset() {
	*x = GuidancePatternType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Guidance_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuidancePatternType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuidancePatternType) ProtoMessage() {}

func (x *GuidancePatternType) ProtoReflect() protoreflect.Message {
	mi := &file_Guidance_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuidancePatternType.ProtoReflect.Descriptor instead.
func (*GuidancePatternType) Descriptor() ([]byte, []int) {
	return file_Guidance_proto_rawDescGZIP(), []int{7}
}

type GuidanceShift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuidanceGroupId   int64                                       `protobuf:"varint,1,opt,name=GuidanceGroupId,proto3" json:"GuidanceGroupId,omitempty"`
	GuidancePatterId  int64                                       `protobuf:"varint,2,opt,name=GuidancePatterId,proto3" json:"GuidancePatterId,omitempty"`
	EastShift         *Representations.NumericRepresentationValue `protobuf:"bytes,3,opt,name=EastShift,proto3" json:"EastShift,omitempty"`
	NorthShift        *Representations.NumericRepresentationValue `protobuf:"bytes,4,opt,name=NorthShift,proto3" json:"NorthShift,omitempty"`
	PropagationOffset *Representations.NumericRepresentationValue `protobuf:"bytes,5,opt,name=PropagationOffset,proto3" json:"PropagationOffset,omitempty"`
	TimeScopeIds      []int64                                     `protobuf:"varint,6,rep,packed,name=TimeScopeIds,proto3" json:"TimeScopeIds,omitempty"`
}

func (x *GuidanceShift) Reset() {
	*x = GuidanceShift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Guidance_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuidanceShift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuidanceShift) ProtoMessage() {}

func (x *GuidanceShift) ProtoReflect() protoreflect.Message {
	mi := &file_Guidance_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuidanceShift.ProtoReflect.Descriptor instead.
func (*GuidanceShift) Descriptor() ([]byte, []int) {
	return file_Guidance_proto_rawDescGZIP(), []int{8}
}

func (x *GuidanceShift) GetGuidanceGroupId() int64 {
	if x != nil {
		return x.GuidanceGroupId
	}
	return 0
}

func (x *GuidanceShift) GetGuidancePatterId() int64 {
	if x != nil {
		return x.GuidancePatterId
	}
	return 0
}

func (x *GuidanceShift) GetEastShift() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.EastShift
	}
	return nil
}

func (x *GuidanceShift) GetNorthShift() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.NorthShift
	}
	return nil
}

func (x *GuidanceShift) GetPropagationOffset() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.PropagationOffset
	}
	return nil
}

func (x *GuidanceShift) GetTimeScopeIds() []int64 {
	if x != nil {
		return x.TimeScopeIds
	}
	return nil
}

type MultiAbLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AbLines []*GuidancePattern `protobuf:"bytes,1,rep,name=AbLines,proto3" json:"AbLines,omitempty"`
}

func (x *MultiAbLine) Reset() {
	*x = MultiAbLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Guidance_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiAbLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiAbLine) ProtoMessage() {}

func (x *MultiAbLine) ProtoReflect() protoreflect.Message {
	mi := &file_Guidance_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiAbLine.ProtoReflect.Descriptor instead.
func (*MultiAbLine) Descriptor() ([]byte, []int) {
	return file_Guidance_proto_rawDescGZIP(), []int{9}
}

func (x *MultiAbLine) GetAbLines() []*GuidancePattern {
	if x != nil {
		return x.AbLines
	}
	return nil
}

type PivotGuidanceDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PivotGuidanceDefinition) Reset() {
	*x = PivotGuidanceDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Guidance_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PivotGuidanceDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PivotGuidanceDefinition) ProtoMessage() {}

func (x *PivotGuidanceDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_Guidance_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PivotGuidanceDefinition.ProtoReflect.Descriptor instead.
func (*PivotGuidanceDefinition) Descriptor() ([]byte, []int) {
	return file_Guidance_proto_rawDescGZIP(), []int{10}
}

type PivotGuidancePattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPoint       *Shapes.Shape                               `protobuf:"bytes,1,opt,name=StartPoint,proto3" json:"StartPoint,omitempty"`
	EndPoint         *Shapes.Shape                               `protobuf:"bytes,2,opt,name=EndPoint,proto3" json:"EndPoint,omitempty"`
	Center           *Shapes.Shape                               `protobuf:"bytes,3,opt,name=Center,proto3" json:"Center,omitempty"`
	Radius           *Representations.NumericRepresentationValue `protobuf:"bytes,4,opt,name=Radius,proto3" json:"Radius,omitempty"`
	DefinitionMethod *PivotGuidanceDefinition                    `protobuf:"bytes,5,opt,name=DefinitionMethod,proto3" json:"DefinitionMethod,omitempty"`
}

func (x *PivotGuidancePattern) Reset() {
	*x = PivotGuidancePattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Guidance_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PivotGuidancePattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PivotGuidancePattern) ProtoMessage() {}

func (x *PivotGuidancePattern) ProtoReflect() protoreflect.Message {
	mi := &file_Guidance_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PivotGuidancePattern.ProtoReflect.Descriptor instead.
func (*PivotGuidancePattern) Descriptor() ([]byte, []int) {
	return file_Guidance_proto_rawDescGZIP(), []int{11}
}

func (x *PivotGuidancePattern) GetStartPoint() *Shapes.Shape {
	if x != nil {
		return x.StartPoint
	}
	return nil
}

func (x *PivotGuidancePattern) GetEndPoint() *Shapes.Shape {
	if x != nil {
		return x.EndPoint
	}
	return nil
}

func (x *PivotGuidancePattern) GetCenter() *Shapes.Shape {
	if x != nil {
		return x.Center
	}
	return nil
}

func (x *PivotGuidancePattern) GetRadius() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.Radius
	}
	return nil
}

func (x *PivotGuidancePattern) GetDefinitionMethod() *PivotGuidanceDefinition {
	if x != nil {
		return x.DefinitionMethod
	}
	return nil
}

type PropagationDirection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PropagationDirection) Reset() {
	*x = PropagationDirection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Guidance_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropagationDirection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropagationDirection) ProtoMessage() {}

func (x *PropagationDirection) ProtoReflect() protoreflect.Message {
	mi := &file_Guidance_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropagationDirection.ProtoReflect.Descriptor instead.
func (*PropagationDirection) Descriptor() ([]byte, []int) {
	return file_Guidance_proto_rawDescGZIP(), []int{12}
}

type Spiral struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shape *Shapes.Shape `protobuf:"bytes,1,opt,name=Shape,proto3" json:"Shape,omitempty"`
}

func (x *Spiral) Reset() {
	*x = Spiral{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Guidance_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Spiral) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Spiral) ProtoMessage() {}

func (x *Spiral) ProtoReflect() protoreflect.Message {
	mi := &file_Guidance_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Spiral.ProtoReflect.Descriptor instead.
func (*Spiral) Descriptor() ([]byte, []int) {
	return file_Guidance_proto_rawDescGZIP(), []int{13}
}

func (x *Spiral) GetShape() *Shapes.Shape {
	if x != nil {
		return x.Shape
	}
	return nil
}

var File_Guidance_proto protoreflect.FileDescriptor

var file_Guidance_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x1a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c,
	0x53, 0x68, 0x61, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x52, 0x65,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x4c, 0x0a, 0x05, 0x41, 0x50, 0x6c, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x05,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x41, 0x44,
	0x41, 0x50, 0x54, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65,
	0x52, 0x05, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x22, 0xdc, 0x01, 0x0a, 0x07, 0x41, 0x62, 0x43, 0x75, 0x72, 0x76, 0x65, 0x12, 0x2a, 0x0a,
	0x10, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f,
	0x66, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x48, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x12, 0x45, 0x61, 0x73, 0x74, 0x53, 0x68, 0x69, 0x66, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x12, 0x45, 0x61, 0x73, 0x74, 0x53, 0x68, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x4e, 0x6f, 0x72, 0x74, 0x68, 0x53, 0x68, 0x69, 0x66,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x13, 0x4e, 0x6f, 0x72, 0x74, 0x68, 0x53, 0x68, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x53, 0x68, 0x61, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x53, 0x68, 0x61,
	0x70, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x52, 0x05, 0x53, 0x68, 0x61, 0x70, 0x65,
	0x22, 0xca, 0x01, 0x0a, 0x06, 0x41, 0x62, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x01, 0x41,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x53,
	0x68, 0x61, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x52, 0x01, 0x41, 0x12, 0x21,
	0x0a, 0x01, 0x42, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x41, 0x44, 0x41, 0x50,
	0x54, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x52, 0x01,
	0x42, 0x12, 0x18, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x48, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x12, 0x45,
	0x61, 0x73, 0x74, 0x53, 0x68, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x45, 0x61, 0x73, 0x74, 0x53, 0x68, 0x69,
	0x66, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x4e,
	0x6f, 0x72, 0x74, 0x68, 0x53, 0x68, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x4e, 0x6f, 0x72, 0x74, 0x68, 0x53,
	0x68, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x22, 0xee, 0x01,
	0x0a, 0x12, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x02, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e,
	0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x12, 0x43, 0x0a, 0x0d, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x68, 0x69, 0x66,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e,
	0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x52, 0x0d, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x53, 0x68, 0x69, 0x66, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x41, 0x44, 0x41, 0x50,
	0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x22, 0x60,
	0x0a, 0x11, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x4b, 0x0a, 0x15, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x0e,
	0x46, 0x72, 0x6f, 0x6d, 0x42, 0x6f, 0x74, 0x68, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x46,
	0x72, 0x6f, 0x6d, 0x42, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x03,
	0x22, 0xd2, 0x01, 0x0a, 0x0d, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x02, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e,
	0x63, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x12, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x3d, 0x0a, 0x0f, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x73, 0x2e, 0x53,
	0x68, 0x61, 0x70, 0x65, 0x52, 0x0f, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x22, 0xa2, 0x08, 0x0a, 0x0f, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e,
	0x63, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x13, 0x47,
	0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54,
	0x2e, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e,
	0x63, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x13, 0x47,
	0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x35, 0x0a, 0x09, 0x47, 0x70, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x70, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09,
	0x47, 0x70, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x45, 0x70, 0x73, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x45, 0x70, 0x73,
	0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x0a, 0x53, 0x77, 0x61, 0x74, 0x68,
	0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44,
	0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a,
	0x53, 0x77, 0x61, 0x74, 0x68, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x58, 0x0a, 0x14, 0x50, 0x72,
	0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54,
	0x2e, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14,
	0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x09, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e,
	0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x4f, 0x66, 0x53, 0x77, 0x61, 0x74, 0x68, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x13, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x4f, 0x66, 0x53, 0x77, 0x61,
	0x74, 0x68, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x4f, 0x66, 0x53, 0x77, 0x61, 0x74, 0x68, 0x73, 0x52, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x4f, 0x66,
	0x53, 0x77, 0x61, 0x74, 0x68, 0x73, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3d, 0x0a, 0x0f, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x53, 0x68, 0x61,
	0x70, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x52, 0x0f, 0x42, 0x6f, 0x75, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x07, 0x41, 0x62,
	0x43, 0x75, 0x72, 0x76, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x41, 0x44,
	0x41, 0x50, 0x54, 0x2e, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x41, 0x62, 0x43,
	0x75, 0x72, 0x76, 0x65, 0x48, 0x00, 0x52, 0x07, 0x41, 0x62, 0x43, 0x75, 0x72, 0x76, 0x65, 0x12,
	0x30, 0x0a, 0x06, 0x41, 0x62, 0x4c, 0x69, 0x6e, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x41, 0x62, 0x4c, 0x69, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x06, 0x41, 0x62, 0x4c, 0x69, 0x6e,
	0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x62, 0x4c, 0x69, 0x6e, 0x65,
	0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x47,
	0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x62, 0x4c,
	0x69, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x62, 0x4c, 0x69,
	0x6e, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x41, 0x50, 0x6c, 0x75, 0x73, 0x18, 0x68, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x41, 0x50, 0x6c, 0x75, 0x73, 0x48, 0x00, 0x52, 0x05, 0x41, 0x50, 0x6c, 0x75,
	0x73, 0x12, 0x5a, 0x0a, 0x14, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e,
	0x63, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x47, 0x75,
	0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x30, 0x0a,
	0x06, 0x53, 0x70, 0x69, 0x72, 0x61, 0x6c, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x53,
	0x70, 0x69, 0x72, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x06, 0x53, 0x70, 0x69, 0x72, 0x61, 0x6c, 0x42,
	0x09, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x22, 0x71, 0x0a, 0x13, 0x47, 0x75,
	0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x5a, 0x0a, 0x17, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x09, 0x0a, 0x05,
	0x41, 0x50, 0x6c, 0x75, 0x73, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x62, 0x4c, 0x69, 0x6e,
	0x65, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x62, 0x43, 0x75, 0x72, 0x76, 0x65, 0x10, 0x02,
	0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x10,
	0x03, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x70, 0x69, 0x72, 0x61, 0x6c, 0x10, 0x04, 0x22, 0x8e, 0x03,
	0x0a, 0x0d, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x12,
	0x28, 0x0a, 0x0f, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e,
	0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x47, 0x75, 0x69,
	0x64, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x09, 0x45, 0x61, 0x73, 0x74, 0x53, 0x68, 0x69,
	0x66, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54,
	0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x45, 0x61, 0x73,
	0x74, 0x53, 0x68, 0x69, 0x66, 0x74, 0x12, 0x51, 0x0a, 0x0a, 0x4e, 0x6f, 0x72, 0x74, 0x68, 0x53,
	0x68, 0x69, 0x66, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41,
	0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x4e,
	0x6f, 0x72, 0x74, 0x68, 0x53, 0x68, 0x69, 0x66, 0x74, 0x12, 0x5f, 0x0a, 0x11, 0x50, 0x72, 0x6f,
	0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d,
	0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x0c, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x73, 0x22, 0x48,
	0x0a, 0x0b, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x62, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x39, 0x0a,
	0x07, 0x41, 0x62, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52,
	0x07, 0x41, 0x62, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x17, 0x50, 0x69, 0x76,
	0x6f, 0x74, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x90, 0x01, 0x0a, 0x1b, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x47, 0x75,
	0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x47, 0x75, 0x69,
	0x64, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x45, 0x6e, 0x64, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20,
	0x50, 0x69, 0x76, 0x6f, 0x74, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73,
	0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x47, 0x75, 0x69, 0x64, 0x61,
	0x6e, 0x63, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x65, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x10, 0x02, 0x22, 0xc9, 0x02, 0x0a, 0x14, 0x50, 0x69, 0x76, 0x6f,
	0x74, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x12, 0x33, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x53, 0x68, 0x61,
	0x70, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x45, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e,
	0x53, 0x68, 0x61, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x52, 0x08, 0x45, 0x6e,
	0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x53,
	0x68, 0x61, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x52, 0x06, 0x43, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x06, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65,
	0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x53,
	0x0a, 0x10, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54,
	0x2e, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x47,
	0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x10, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x22, 0x76, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5e, 0x0a, 0x18, 0x50,
	0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x6f, 0x74, 0x68, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4c,
	0x65, 0x66, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x6f, 0x50,
	0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x10, 0x03, 0x22, 0x33, 0x0a, 0x06, 0x53,
	0x70, 0x69, 0x72, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x05, 0x53, 0x68, 0x61, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x53, 0x68, 0x61,
	0x70, 0x65, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x52, 0x05, 0x53, 0x68, 0x61, 0x70, 0x65,
	0x42, 0x2a, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d,
	0x61, 0x6c, 0x74, 0x65, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x65, 0x2f, 0x61, 0x64, 0x61, 0x70, 0x74,
	0x2d, 0x67, 0x6f, 0x2f, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_Guidance_proto_rawDescOnce sync.Once
	file_Guidance_proto_rawDescData = file_Guidance_proto_rawDesc
)

func file_Guidance_proto_rawDescGZIP() []byte {
	file_Guidance_proto_rawDescOnce.Do(func() {
		file_Guidance_proto_rawDescData = protoimpl.X.CompressGZIP(file_Guidance_proto_rawDescData)
	})
	return file_Guidance_proto_rawDescData
}

var file_Guidance_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_Guidance_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_Guidance_proto_goTypes = []interface{}{
	(GuidanceExtension_GuidanceExtensionEnum)(0),             // 0: ADAPT.Guidance.GuidanceExtension.GuidanceExtensionEnum
	(GuidancePatternType_GuidancePatternTypeEnum)(0),         // 1: ADAPT.Guidance.GuidancePatternType.GuidancePatternTypeEnum
	(PivotGuidanceDefinition_PivotGuidanceDefinitionEnum)(0), // 2: ADAPT.Guidance.PivotGuidanceDefinition.PivotGuidanceDefinitionEnum
	(PropagationDirection_PropagationDirectionEnum)(0),       // 3: ADAPT.Guidance.PropagationDirection.PropagationDirectionEnum
	(*APlus)(nil),                                      // 4: ADAPT.Guidance.APlus
	(*AbCurve)(nil),                                    // 5: ADAPT.Guidance.AbCurve
	(*AbLine)(nil),                                     // 6: ADAPT.Guidance.AbLine
	(*GuidanceAllocation)(nil),                         // 7: ADAPT.Guidance.GuidanceAllocation
	(*GuidanceExtension)(nil),                          // 8: ADAPT.Guidance.GuidanceExtension
	(*GuidanceGroup)(nil),                              // 9: ADAPT.Guidance.GuidanceGroup
	(*GuidancePattern)(nil),                            // 10: ADAPT.Guidance.GuidancePattern
	(*GuidancePatternType)(nil),                        // 11: ADAPT.Guidance.GuidancePatternType
	(*GuidanceShift)(nil),                              // 12: ADAPT.Guidance.GuidanceShift
	(*MultiAbLine)(nil),                                // 13: ADAPT.Guidance.MultiAbLine
	(*PivotGuidanceDefinition)(nil),                    // 14: ADAPT.Guidance.PivotGuidanceDefinition
	(*PivotGuidancePattern)(nil),                       // 15: ADAPT.Guidance.PivotGuidancePattern
	(*PropagationDirection)(nil),                       // 16: ADAPT.Guidance.PropagationDirection
	(*Spiral)(nil),                                     // 17: ADAPT.Guidance.Spiral
	(*Shapes.Shape)(nil),                               // 18: ADAPT.Shapes.Shape
	(*Common.CompoundIdentifier)(nil),                  // 19: ADAPT.Common.CompoundIdentifier
	(*Common.TimeScope)(nil),                           // 20: ADAPT.Common.TimeScope
	(*Common.GpsSource)(nil),                           // 21: ADAPT.Common.GpsSource
	(*Representations.NumericRepresentationValue)(nil), // 22: ADAPT.Representations.NumericRepresentationValue
}
var file_Guidance_proto_depIdxs = []int32{
	18, // 0: ADAPT.Guidance.APlus.Point:type_name -> ADAPT.Shapes.Shape
	18, // 1: ADAPT.Guidance.AbCurve.Shape:type_name -> ADAPT.Shapes.Shape
	18, // 2: ADAPT.Guidance.AbLine.A:type_name -> ADAPT.Shapes.Shape
	18, // 3: ADAPT.Guidance.AbLine.B:type_name -> ADAPT.Shapes.Shape
	19, // 4: ADAPT.Guidance.GuidanceAllocation.Id:type_name -> ADAPT.Common.CompoundIdentifier
	12, // 5: ADAPT.Guidance.GuidanceAllocation.GuidanceShift:type_name -> ADAPT.Guidance.GuidanceShift
	20, // 6: ADAPT.Guidance.GuidanceAllocation.TimeScopes:type_name -> ADAPT.Common.TimeScope
	19, // 7: ADAPT.Guidance.GuidanceGroup.Id:type_name -> ADAPT.Common.CompoundIdentifier
	18, // 8: ADAPT.Guidance.GuidanceGroup.BoundingPolygon:type_name -> ADAPT.Shapes.Shape
	19, // 9: ADAPT.Guidance.GuidancePattern.Id:type_name -> ADAPT.Common.CompoundIdentifier
	11, // 10: ADAPT.Guidance.GuidancePattern.GuidancePatternType:type_name -> ADAPT.Guidance.GuidancePatternType
	21, // 11: ADAPT.Guidance.GuidancePattern.GpsSource:type_name -> ADAPT.Common.GpsSource
	22, // 12: ADAPT.Guidance.GuidancePattern.SwathWidth:type_name -> ADAPT.Representations.NumericRepresentationValue
	16, // 13: ADAPT.Guidance.GuidancePattern.PropagationDirection:type_name -> ADAPT.Guidance.PropagationDirection
	8,  // 14: ADAPT.Guidance.GuidancePattern.Extension:type_name -> ADAPT.Guidance.GuidanceExtension
	18, // 15: ADAPT.Guidance.GuidancePattern.BoundingPolygon:type_name -> ADAPT.Shapes.Shape
	5,  // 16: ADAPT.Guidance.GuidancePattern.AbCurve:type_name -> ADAPT.Guidance.AbCurve
	6,  // 17: ADAPT.Guidance.GuidancePattern.AbLine:type_name -> ADAPT.Guidance.AbLine
	13, // 18: ADAPT.Guidance.GuidancePattern.MultiAbLine:type_name -> ADAPT.Guidance.MultiAbLine
	4,  // 19: ADAPT.Guidance.GuidancePattern.APlus:type_name -> ADAPT.Guidance.APlus
	15, // 20: ADAPT.Guidance.GuidancePattern.PivotGuidancePattern:type_name -> ADAPT.Guidance.PivotGuidancePattern
	17, // 21: ADAPT.Guidance.GuidancePattern.Spiral:type_name -> ADAPT.Guidance.Spiral
	22, // 22: ADAPT.Guidance.GuidanceShift.EastShift:type_name -> ADAPT.Representations.NumericRepresentationValue
	22, // 23: ADAPT.Guidance.GuidanceShift.NorthShift:type_name -> ADAPT.Representations.NumericRepresentationValue
	22, // 24: ADAPT.Guidance.GuidanceShift.PropagationOffset:type_name -> ADAPT.Representations.NumericRepresentationValue
	10, // 25: ADAPT.Guidance.MultiAbLine.AbLines:type_name -> ADAPT.Guidance.GuidancePattern
	18, // 26: ADAPT.Guidance.PivotGuidancePattern.StartPoint:type_name -> ADAPT.Shapes.Shape
	18, // 27: ADAPT.Guidance.PivotGuidancePattern.EndPoint:type_name -> ADAPT.Shapes.Shape
	18, // 28: ADAPT.Guidance.PivotGuidancePattern.Center:type_name -> ADAPT.Shapes.Shape
	22, // 29: ADAPT.Guidance.PivotGuidancePattern.Radius:type_name -> ADAPT.Representations.NumericRepresentationValue
	14, // 30: ADAPT.Guidance.PivotGuidancePattern.DefinitionMethod:type_name -> ADAPT.Guidance.PivotGuidanceDefinition
	18, // 31: ADAPT.Guidance.Spiral.Shape:type_name -> ADAPT.Shapes.Shape
	32, // [32:32] is the sub-list for method output_type
	32, // [32:32] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_Guidance_proto_init() }
func file_Guidance_proto_init() {
	if File_Guidance_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_Guidance_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APlus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Guidance_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbCurve); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Guidance_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Guidance_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuidanceAllocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Guidance_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuidanceExtension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Guidance_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuidanceGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Guidance_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuidancePattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Guidance_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuidancePatternType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Guidance_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuidanceShift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Guidance_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiAbLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Guidance_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PivotGuidanceDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Guidance_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PivotGuidancePattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Guidance_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropagationDirection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Guidance_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Spiral); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_Guidance_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*GuidancePattern_AbCurve)(nil),
		(*GuidancePattern_AbLine)(nil),
		(*GuidancePattern_MultiAbLine)(nil),
		(*GuidancePattern_APlus)(nil),
		(*GuidancePattern_PivotGuidancePattern)(nil),
		(*GuidancePattern_Spiral)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Guidance_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Guidance_proto_goTypes,
		DependencyIndexes: file_Guidance_proto_depIdxs,
		EnumInfos:         file_Guidance_proto_enumTypes,
		MessageInfos:      file_Guidance_proto_msgTypes,
	}.Build()
	File_Guidance_proto = out.File
	file_Guidance_proto_rawDesc = nil
	file_Guidance_proto_goTypes = nil
	file_Guidance_proto_depIdxs = nil
}
