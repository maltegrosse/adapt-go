// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.19.6
// source: Equipment.proto

package Equipment

import (
	Common "github.com/maltegrosse/adapt-go/Common"
	Notes "github.com/maltegrosse/adapt-go/Notes"
	Representations "github.com/maltegrosse/adapt-go/Representations"
	Shapes "github.com/maltegrosse/adapt-go/Shapes"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConnectorType_ConnectorTypeEnum int32

const (
	ConnectorType_Unkown                           ConnectorType_ConnectorTypeEnum = 0
	ConnectorType_ISO64893TractorDrawbar           ConnectorType_ConnectorTypeEnum = 1
	ConnectorType_ISO730ThreePointHitchSemiMounted ConnectorType_ConnectorTypeEnum = 2
	ConnectorType_ISO730ThreePointHitchMounted     ConnectorType_ConnectorTypeEnum = 3
	ConnectorType_ISO64891HitchHook                ConnectorType_ConnectorTypeEnum = 4
	ConnectorType_ISO64892ClevisCoupling40         ConnectorType_ConnectorTypeEnum = 5
	ConnectorType_ISO64894PitonTypeCoupling        ConnectorType_ConnectorTypeEnum = 6
	ConnectorType_ISO56922PivotWagonHitch          ConnectorType_ConnectorTypeEnum = 7
	ConnectorType_ISO24347BallTypeHitch            ConnectorType_ConnectorTypeEnum = 8
	ConnectorType_ChassisMountedSelfPropelled      ConnectorType_ConnectorTypeEnum = 9
)

// Enum value maps for ConnectorType_ConnectorTypeEnum.
var (
	ConnectorType_ConnectorTypeEnum_name = map[int32]string{
		0: "Unkown",
		1: "ISO64893TractorDrawbar",
		2: "ISO730ThreePointHitchSemiMounted",
		3: "ISO730ThreePointHitchMounted",
		4: "ISO64891HitchHook",
		5: "ISO64892ClevisCoupling40",
		6: "ISO64894PitonTypeCoupling",
		7: "ISO56922PivotWagonHitch",
		8: "ISO24347BallTypeHitch",
		9: "ChassisMountedSelfPropelled",
	}
	ConnectorType_ConnectorTypeEnum_value = map[string]int32{
		"Unkown":                           0,
		"ISO64893TractorDrawbar":           1,
		"ISO730ThreePointHitchSemiMounted": 2,
		"ISO730ThreePointHitchMounted":     3,
		"ISO64891HitchHook":                4,
		"ISO64892ClevisCoupling40":         5,
		"ISO64894PitonTypeCoupling":        6,
		"ISO56922PivotWagonHitch":          7,
		"ISO24347BallTypeHitch":            8,
		"ChassisMountedSelfPropelled":      9,
	}
)

func (x ConnectorType_ConnectorTypeEnum) Enum() *ConnectorType_ConnectorTypeEnum {
	p := new(ConnectorType_ConnectorTypeEnum)
	*p = x
	return p
}

func (x ConnectorType_ConnectorTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectorType_ConnectorTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_Equipment_proto_enumTypes[0].Descriptor()
}

func (ConnectorType_ConnectorTypeEnum) Type() protoreflect.EnumType {
	return &file_Equipment_proto_enumTypes[0]
}

func (x ConnectorType_ConnectorTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectorType_ConnectorTypeEnum.Descriptor instead.
func (ConnectorType_ConnectorTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_Equipment_proto_rawDescGZIP(), []int{1, 0}
}

type CornerArmType_CornerArmTypeEnum int32

const (
	CornerArmType_Leading  CornerArmType_CornerArmTypeEnum = 0
	CornerArmType_Trailing CornerArmType_CornerArmTypeEnum = 1
)

// Enum value maps for CornerArmType_CornerArmTypeEnum.
var (
	CornerArmType_CornerArmTypeEnum_name = map[int32]string{
		0: "Leading",
		1: "Trailing",
	}
	CornerArmType_CornerArmTypeEnum_value = map[string]int32{
		"Leading":  0,
		"Trailing": 1,
	}
)

func (x CornerArmType_CornerArmTypeEnum) Enum() *CornerArmType_CornerArmTypeEnum {
	p := new(CornerArmType_CornerArmTypeEnum)
	*p = x
	return p
}

func (x CornerArmType_CornerArmTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CornerArmType_CornerArmTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_Equipment_proto_enumTypes[1].Descriptor()
}

func (CornerArmType_CornerArmTypeEnum) Type() protoreflect.EnumType {
	return &file_Equipment_proto_enumTypes[1]
}

func (x CornerArmType_CornerArmTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CornerArmType_CornerArmTypeEnum.Descriptor instead.
func (CornerArmType_CornerArmTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_Equipment_proto_rawDescGZIP(), []int{2, 0}
}

type DeviceElementType_DeviceElementTypeEnum int32

const (
	DeviceElementType_Machine    DeviceElementType_DeviceElementTypeEnum = 0
	DeviceElementType_Implement  DeviceElementType_DeviceElementTypeEnum = 1
	DeviceElementType_Sensor     DeviceElementType_DeviceElementTypeEnum = 2
	DeviceElementType_Bin        DeviceElementType_DeviceElementTypeEnum = 3
	DeviceElementType_Section    DeviceElementType_DeviceElementTypeEnum = 4
	DeviceElementType_Unit       DeviceElementType_DeviceElementTypeEnum = 5
	DeviceElementType_Function   DeviceElementType_DeviceElementTypeEnum = 6
	DeviceElementType_IrrSystem  DeviceElementType_DeviceElementTypeEnum = 7 // A mobile or fixed irrigation system such as a center pivot, linear, traveling gun, solid set, etc.
	DeviceElementType_IrrSection DeviceElementType_DeviceElementTypeEnum = 8 // A section of an IrrSystem. Different enough from a regular section to merit its own DeviceElementConfiguration
	DeviceElementType_Endgun     DeviceElementType_DeviceElementTypeEnum = 9 // A device attached to an irrigation system that projects water beyond it.
)

// Enum value maps for DeviceElementType_DeviceElementTypeEnum.
var (
	DeviceElementType_DeviceElementTypeEnum_name = map[int32]string{
		0: "Machine",
		1: "Implement",
		2: "Sensor",
		3: "Bin",
		4: "Section",
		5: "Unit",
		6: "Function",
		7: "IrrSystem",
		8: "IrrSection",
		9: "Endgun",
	}
	DeviceElementType_DeviceElementTypeEnum_value = map[string]int32{
		"Machine":    0,
		"Implement":  1,
		"Sensor":     2,
		"Bin":        3,
		"Section":    4,
		"Unit":       5,
		"Function":   6,
		"IrrSystem":  7,
		"IrrSection": 8,
		"Endgun":     9,
	}
)

func (x DeviceElementType_DeviceElementTypeEnum) Enum() *DeviceElementType_DeviceElementTypeEnum {
	p := new(DeviceElementType_DeviceElementTypeEnum)
	*p = x
	return p
}

func (x DeviceElementType_DeviceElementTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceElementType_DeviceElementTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_Equipment_proto_enumTypes[2].Descriptor()
}

func (DeviceElementType_DeviceElementTypeEnum) Type() protoreflect.EnumType {
	return &file_Equipment_proto_enumTypes[2]
}

func (x DeviceElementType_DeviceElementTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceElementType_DeviceElementTypeEnum.Descriptor instead.
func (DeviceElementType_DeviceElementTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_Equipment_proto_rawDescGZIP(), []int{5, 0}
}

type IrrSystemType_IrrSystemTypeEnum int32

const (
	IrrSystemType_Pivot        IrrSystemType_IrrSystemTypeEnum = 0
	IrrSystemType_Linear       IrrSystemType_IrrSystemTypeEnum = 1
	IrrSystemType_FixedZone    IrrSystemType_IrrSystemTypeEnum = 2
	IrrSystemType_TravelingGun IrrSystemType_IrrSystemTypeEnum = 3
	IrrSystemType_SetMove      IrrSystemType_IrrSystemTypeEnum = 4
)

// Enum value maps for IrrSystemType_IrrSystemTypeEnum.
var (
	IrrSystemType_IrrSystemTypeEnum_name = map[int32]string{
		0: "Pivot",
		1: "Linear",
		2: "FixedZone",
		3: "TravelingGun",
		4: "SetMove",
	}
	IrrSystemType_IrrSystemTypeEnum_value = map[string]int32{
		"Pivot":        0,
		"Linear":       1,
		"FixedZone":    2,
		"TravelingGun": 3,
		"SetMove":      4,
	}
)

func (x IrrSystemType_IrrSystemTypeEnum) Enum() *IrrSystemType_IrrSystemTypeEnum {
	p := new(IrrSystemType_IrrSystemTypeEnum)
	*p = x
	return p
}

func (x IrrSystemType_IrrSystemTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IrrSystemType_IrrSystemTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_Equipment_proto_enumTypes[3].Descriptor()
}

func (IrrSystemType_IrrSystemTypeEnum) Type() protoreflect.EnumType {
	return &file_Equipment_proto_enumTypes[3]
}

func (x IrrSystemType_IrrSystemTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IrrSystemType_IrrSystemTypeEnum.Descriptor instead.
func (IrrSystemType_IrrSystemTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_Equipment_proto_rawDescGZIP(), []int{6, 0}
}

type HitchType_HitchTypeEnum int32

const (
	HitchType_Unkown                           HitchType_HitchTypeEnum = 0
	HitchType_ISO64893TractorDrawbar           HitchType_HitchTypeEnum = 1
	HitchType_ISO730ThreePointHitchSemiMounted HitchType_HitchTypeEnum = 2
	HitchType_ISO730ThreePointHitchMounted     HitchType_HitchTypeEnum = 3
	HitchType_ISO64891HitchHook                HitchType_HitchTypeEnum = 4
	HitchType_ISO64892ClevisCoupling40         HitchType_HitchTypeEnum = 5
	HitchType_ISO64894PitonTypeCoupling        HitchType_HitchTypeEnum = 6
	HitchType_ISO56922PivotWagonHitch          HitchType_HitchTypeEnum = 7
	HitchType_ISO24347BallTypeHitch            HitchType_HitchTypeEnum = 8
)

// Enum value maps for HitchType_HitchTypeEnum.
var (
	HitchType_HitchTypeEnum_name = map[int32]string{
		0: "Unkown",
		1: "ISO64893TractorDrawbar",
		2: "ISO730ThreePointHitchSemiMounted",
		3: "ISO730ThreePointHitchMounted",
		4: "ISO64891HitchHook",
		5: "ISO64892ClevisCoupling40",
		6: "ISO64894PitonTypeCoupling",
		7: "ISO56922PivotWagonHitch",
		8: "ISO24347BallTypeHitch",
	}
	HitchType_HitchTypeEnum_value = map[string]int32{
		"Unkown":                           0,
		"ISO64893TractorDrawbar":           1,
		"ISO730ThreePointHitchSemiMounted": 2,
		"ISO730ThreePointHitchMounted":     3,
		"ISO64891HitchHook":                4,
		"ISO64892ClevisCoupling40":         5,
		"ISO64894PitonTypeCoupling":        6,
		"ISO56922PivotWagonHitch":          7,
		"ISO24347BallTypeHitch":            8,
	}
)

func (x HitchType_HitchTypeEnum) Enum() *HitchType_HitchTypeEnum {
	p := new(HitchType_HitchTypeEnum)
	*p = x
	return p
}

func (x HitchType_HitchTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HitchType_HitchTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_Equipment_proto_enumTypes[4].Descriptor()
}

func (HitchType_HitchTypeEnum) Type() protoreflect.EnumType {
	return &file_Equipment_proto_enumTypes[4]
}

func (x HitchType_HitchTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HitchType_HitchTypeEnum.Descriptor instead.
func (HitchType_HitchTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_Equipment_proto_rawDescGZIP(), []int{16, 0}
}

type InstallationDisplacement_InstallationDisplacementEnum int32

const (
	InstallationDisplacement_MeanSeaLevel  InstallationDisplacement_InstallationDisplacementEnum = 0 // Height / depth is specified relative to mean seal level
	InstallationDisplacement_SoilSurface   InstallationDisplacement_InstallationDisplacementEnum = 1 // Height / depth is specified relative to the soil surface
	InstallationDisplacement_CropCanopyTop InstallationDisplacement_InstallationDisplacementEnum = 2 // Height / depth is specified relative to the top of the crop canopy
	InstallationDisplacement_Logger        InstallationDisplacement_InstallationDisplacementEnum = 3 // Height / depth is specified relative to the position of the data logger
)

// Enum value maps for InstallationDisplacement_InstallationDisplacementEnum.
var (
	InstallationDisplacement_InstallationDisplacementEnum_name = map[int32]string{
		0: "MeanSeaLevel",
		1: "SoilSurface",
		2: "CropCanopyTop",
		3: "Logger",
	}
	InstallationDisplacement_InstallationDisplacementEnum_value = map[string]int32{
		"MeanSeaLevel":  0,
		"SoilSurface":   1,
		"CropCanopyTop": 2,
		"Logger":        3,
	}
)

func (x InstallationDisplacement_InstallationDisplacementEnum) Enum() *InstallationDisplacement_InstallationDisplacementEnum {
	p := new(InstallationDisplacement_InstallationDisplacementEnum)
	*p = x
	return p
}

func (x InstallationDisplacement_InstallationDisplacementEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstallationDisplacement_InstallationDisplacementEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_Equipment_proto_enumTypes[5].Descriptor()
}

func (InstallationDisplacement_InstallationDisplacementEnum) Type() protoreflect.EnumType {
	return &file_Equipment_proto_enumTypes[5]
}

func (x InstallationDisplacement_InstallationDisplacementEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstallationDisplacement_InstallationDisplacementEnum.Descriptor instead.
func (InstallationDisplacement_InstallationDisplacementEnum) EnumDescriptor() ([]byte, []int) {
	return file_Equipment_proto_rawDescGZIP(), []int{18, 0}
}

type IrrErrorCode_IrrErrorCodeEnum int32

const (
	IrrErrorCode_Communication IrrErrorCode_IrrErrorCodeEnum = 0
	IrrErrorCode_LowPressure   IrrErrorCode_IrrErrorCodeEnum = 1
	IrrErrorCode_Unspecified   IrrErrorCode_IrrErrorCodeEnum = 2
)

// Enum value maps for IrrErrorCode_IrrErrorCodeEnum.
var (
	IrrErrorCode_IrrErrorCodeEnum_name = map[int32]string{
		0: "Communication",
		1: "LowPressure",
		2: "Unspecified",
	}
	IrrErrorCode_IrrErrorCodeEnum_value = map[string]int32{
		"Communication": 0,
		"LowPressure":   1,
		"Unspecified":   2,
	}
)

func (x IrrErrorCode_IrrErrorCodeEnum) Enum() *IrrErrorCode_IrrErrorCodeEnum {
	p := new(IrrErrorCode_IrrErrorCodeEnum)
	*p = x
	return p
}

func (x IrrErrorCode_IrrErrorCodeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IrrErrorCode_IrrErrorCodeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_Equipment_proto_enumTypes[6].Descriptor()
}

func (IrrErrorCode_IrrErrorCodeEnum) Type() protoreflect.EnumType {
	return &file_Equipment_proto_enumTypes[6]
}

func (x IrrErrorCode_IrrErrorCodeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IrrErrorCode_IrrErrorCodeEnum.Descriptor instead.
func (IrrErrorCode_IrrErrorCodeEnum) EnumDescriptor() ([]byte, []int) {
	return file_Equipment_proto_rawDescGZIP(), []int{19, 0}
}

type IrrFlowDataSource_IrrFlowDataSourceEnum int32

const (
	IrrFlowDataSource_FlowMeter IrrFlowDataSource_IrrFlowDataSourceEnum = 0 // Flow data is being reported by a flow meter
	IrrFlowDataSource_HourMeter IrrFlowDataSource_IrrFlowDataSourceEnum = 1 //  Flow data estimated by multiplying time by a constant
	IrrFlowDataSource_Unknown   IrrFlowDataSource_IrrFlowDataSourceEnum = 2 // Flow data not reported, or source unknown
)

// Enum value maps for IrrFlowDataSource_IrrFlowDataSourceEnum.
var (
	IrrFlowDataSource_IrrFlowDataSourceEnum_name = map[int32]string{
		0: "FlowMeter",
		1: "HourMeter",
		2: "Unknown",
	}
	IrrFlowDataSource_IrrFlowDataSourceEnum_value = map[string]int32{
		"FlowMeter": 0,
		"HourMeter": 1,
		"Unknown":   2,
	}
)

func (x IrrFlowDataSource_IrrFlowDataSourceEnum) Enum() *IrrFlowDataSource_IrrFlowDataSourceEnum {
	p := new(IrrFlowDataSource_IrrFlowDataSourceEnum)
	*p = x
	return p
}

func (x IrrFlowDataSource_IrrFlowDataSourceEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IrrFlowDataSource_IrrFlowDataSourceEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_Equipment_proto_enumTypes[7].Descriptor()
}

func (IrrFlowDataSource_IrrFlowDataSourceEnum) Type() protoreflect.EnumType {
	return &file_Equipment_proto_enumTypes[7]
}

func (x IrrFlowDataSource_IrrFlowDataSourceEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IrrFlowDataSource_IrrFlowDataSourceEnum.Descriptor instead.
func (IrrFlowDataSource_IrrFlowDataSourceEnum) EnumDescriptor() ([]byte, []int) {
	return file_Equipment_proto_rawDescGZIP(), []int{20, 0}
}

type IrrFlowTag_IrrFlowTagEnum int32

const (
	IrrFlowTag_Chemigating IrrFlowTag_IrrFlowTagEnum = 0
	IrrFlowTag_Fertigating IrrFlowTag_IrrFlowTagEnum = 1
)

// Enum value maps for IrrFlowTag_IrrFlowTagEnum.
var (
	IrrFlowTag_IrrFlowTagEnum_name = map[int32]string{
		0: "Chemigating",
		1: "Fertigating",
	}
	IrrFlowTag_IrrFlowTagEnum_value = map[string]int32{
		"Chemigating": 0,
		"Fertigating": 1,
	}
)

func (x IrrFlowTag_IrrFlowTagEnum) Enum() *IrrFlowTag_IrrFlowTagEnum {
	p := new(IrrFlowTag_IrrFlowTagEnum)
	*p = x
	return p
}

func (x IrrFlowTag_IrrFlowTagEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IrrFlowTag_IrrFlowTagEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_Equipment_proto_enumTypes[8].Descriptor()
}

func (IrrFlowTag_IrrFlowTagEnum) Type() protoreflect.EnumType {
	return &file_Equipment_proto_enumTypes[8]
}

func (x IrrFlowTag_IrrFlowTagEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IrrFlowTag_IrrFlowTagEnum.Descriptor instead.
func (IrrFlowTag_IrrFlowTagEnum) EnumDescriptor() ([]byte, []int) {
	return file_Equipment_proto_rawDescGZIP(), []int{21, 0}
}

type IrrPressureLocation_IrrPressureLocationEnum int32

const (
	IrrPressureLocation_AtPump         IrrPressureLocation_IrrPressureLocationEnum = 0
	IrrPressureLocation_AtBaseOfSystem IrrPressureLocation_IrrPressureLocationEnum = 1
	IrrPressureLocation_AtEndOfSystem  IrrPressureLocation_IrrPressureLocationEnum = 2
	IrrPressureLocation_Unknown        IrrPressureLocation_IrrPressureLocationEnum = 3
)

// Enum value maps for IrrPressureLocation_IrrPressureLocationEnum.
var (
	IrrPressureLocation_IrrPressureLocationEnum_name = map[int32]string{
		0: "AtPump",
		1: "AtBaseOfSystem",
		2: "AtEndOfSystem",
		3: "Unknown",
	}
	IrrPressureLocation_IrrPressureLocationEnum_value = map[string]int32{
		"AtPump":         0,
		"AtBaseOfSystem": 1,
		"AtEndOfSystem":  2,
		"Unknown":        3,
	}
)

func (x IrrPressureLocation_IrrPressureLocationEnum) Enum() *IrrPressureLocation_IrrPressureLocationEnum {
	p := new(IrrPressureLocation_IrrPressureLocationEnum)
	*p = x
	return p
}

func (x IrrPressureLocation_IrrPressureLocationEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IrrPressureLocation_IrrPressureLocationEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_Equipment_proto_enumTypes[9].Descriptor()
}

func (IrrPressureLocation_IrrPressureLocationEnum) Type() protoreflect.EnumType {
	return &file_Equipment_proto_enumTypes[9]
}

func (x IrrPressureLocation_IrrPressureLocationEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IrrPressureLocation_IrrPressureLocationEnum.Descriptor instead.
func (IrrPressureLocation_IrrPressureLocationEnum) EnumDescriptor() ([]byte, []int) {
	return file_Equipment_proto_rawDescGZIP(), []int{22, 0}
}

type IrrSectionType_IrrSectionTypeEnum int32

const (
	IrrSectionType_Span       IrrSectionType_IrrSectionTypeEnum = 0
	IrrSectionType_Endboom    IrrSectionType_IrrSectionTypeEnum = 1
	IrrSectionType_EndGun     IrrSectionType_IrrSectionTypeEnum = 2
	IrrSectionType_Corner     IrrSectionType_IrrSectionTypeEnum = 3
	IrrSectionType_WrapBender IrrSectionType_IrrSectionTypeEnum = 4
	IrrSectionType_Fixed      IrrSectionType_IrrSectionTypeEnum = 5
	IrrSectionType_Generic    IrrSectionType_IrrSectionTypeEnum = 6
)

// Enum value maps for IrrSectionType_IrrSectionTypeEnum.
var (
	IrrSectionType_IrrSectionTypeEnum_name = map[int32]string{
		0: "Span",
		1: "Endboom",
		2: "EndGun",
		3: "Corner",
		4: "WrapBender",
		5: "Fixed",
		6: "Generic",
	}
	IrrSectionType_IrrSectionTypeEnum_value = map[string]int32{
		"Span":       0,
		"Endboom":    1,
		"EndGun":     2,
		"Corner":     3,
		"WrapBender": 4,
		"Fixed":      5,
		"Generic":    6,
	}
)

func (x IrrSectionType_IrrSectionTypeEnum) Enum() *IrrSectionType_IrrSectionTypeEnum {
	p := new(IrrSectionType_IrrSectionTypeEnum)
	*p = x
	return p
}

func (x IrrSectionType_IrrSectionTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IrrSectionType_IrrSectionTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_Equipment_proto_enumTypes[10].Descriptor()
}

func (IrrSectionType_IrrSectionTypeEnum) Type() protoreflect.EnumType {
	return &file_Equipment_proto_enumTypes[10]
}

func (x IrrSectionType_IrrSectionTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IrrSectionType_IrrSectionTypeEnum.Descriptor instead.
func (IrrSectionType_IrrSectionTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_Equipment_proto_rawDescGZIP(), []int{24, 0}
}

type OriginAxleLocation_OriginAxleLocationEnum int32

const (
	OriginAxleLocation_Front OriginAxleLocation_OriginAxleLocationEnum = 0
	OriginAxleLocation_Rear  OriginAxleLocation_OriginAxleLocationEnum = 1
)

// Enum value maps for OriginAxleLocation_OriginAxleLocationEnum.
var (
	OriginAxleLocation_OriginAxleLocationEnum_name = map[int32]string{
		0: "Front",
		1: "Rear",
	}
	OriginAxleLocation_OriginAxleLocationEnum_value = map[string]int32{
		"Front": 0,
		"Rear":  1,
	}
)

func (x OriginAxleLocation_OriginAxleLocationEnum) Enum() *OriginAxleLocation_OriginAxleLocationEnum {
	p := new(OriginAxleLocation_OriginAxleLocationEnum)
	*p = x
	return p
}

func (x OriginAxleLocation_OriginAxleLocationEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OriginAxleLocation_OriginAxleLocationEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_Equipment_proto_enumTypes[11].Descriptor()
}

func (OriginAxleLocation_OriginAxleLocationEnum) Type() protoreflect.EnumType {
	return &file_Equipment_proto_enumTypes[11]
}

func (x OriginAxleLocation_OriginAxleLocationEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OriginAxleLocation_OriginAxleLocationEnum.Descriptor instead.
func (OriginAxleLocation_OriginAxleLocationEnum) EnumDescriptor() ([]byte, []int) {
	return file_Equipment_proto_rawDescGZIP(), []int{28, 0}
}

type TelemetryMedium_TelemetryMediumEnum int32

const (
	TelemetryMedium_Radio         TelemetryMedium_TelemetryMediumEnum = 0 // The device uses a radio transmitter to send/receive data.
	TelemetryMedium_Satellite     TelemetryMedium_TelemetryMediumEnum = 1 // The device uses a satellite system to send/receive data.
	TelemetryMedium_Hardwired     TelemetryMedium_TelemetryMediumEnum = 2 // The device uses a physical connection (e.g., current loop, I2C, etc.) to send/receive data.
	TelemetryMedium_CellularRadio TelemetryMedium_TelemetryMediumEnum = 3 // The device uses cellular telephony to send/receive data.
	TelemetryMedium_Other         TelemetryMedium_TelemetryMediumEnum = 4 // The device uses an option not described above to send/receive data.
)

// Enum value maps for TelemetryMedium_TelemetryMediumEnum.
var (
	TelemetryMedium_TelemetryMediumEnum_name = map[int32]string{
		0: "Radio",
		1: "Satellite",
		2: "Hardwired",
		3: "CellularRadio",
		4: "Other",
	}
	TelemetryMedium_TelemetryMediumEnum_value = map[string]int32{
		"Radio":         0,
		"Satellite":     1,
		"Hardwired":     2,
		"CellularRadio": 3,
		"Other":         4,
	}
)

func (x TelemetryMedium_TelemetryMediumEnum) Enum() *TelemetryMedium_TelemetryMediumEnum {
	p := new(TelemetryMedium_TelemetryMediumEnum)
	*p = x
	return p
}

func (x TelemetryMedium_TelemetryMediumEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TelemetryMedium_TelemetryMediumEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_Equipment_proto_enumTypes[12].Descriptor()
}

func (TelemetryMedium_TelemetryMediumEnum) Type() protoreflect.EnumType {
	return &file_Equipment_proto_enumTypes[12]
}

func (x TelemetryMedium_TelemetryMediumEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TelemetryMedium_TelemetryMediumEnum.Descriptor instead.
func (TelemetryMedium_TelemetryMediumEnum) EnumDescriptor() ([]byte, []int) {
	return file_Equipment_proto_rawDescGZIP(), []int{31, 0}
}

type TimeDataSource_TimeDataSourceEnum int32

const (
	TimeDataSource_GPSOnEvent                TimeDataSource_TimeDataSourceEnum = 0 // The timestamp is created using GPS data, when the event happens. (Most accurate)
	TimeDataSource_DeviceClockOnEvent        TimeDataSource_TimeDataSourceEnum = 1 // The timestamp is created using data from a realtime clock on the controller, panel, or device, when the event happens.
	TimeDataSource_ServerclockOnTransmission TimeDataSource_TimeDataSourceEnum = 2 // The timestamp is created using data from the server receiving the event data.
	TimeDataSource_DeviceClockOnTransmission TimeDataSource_TimeDataSourceEnum = 3 // The timestamp is created using data from a realtime clock on the controller, panel or device, when the event data is transmitted.
	TimeDataSource_ManualInput               TimeDataSource_TimeDataSourceEnum = 4 // The timestamp is input manually by an operator, asynchronously to the creation or transmission of the event.
	TimeDataSource_Unknown                   TimeDataSource_TimeDataSourceEnum = 5 // The origin of timestamp data is unknown.
)

// Enum value maps for TimeDataSource_TimeDataSourceEnum.
var (
	TimeDataSource_TimeDataSourceEnum_name = map[int32]string{
		0: "GPSOnEvent",
		1: "DeviceClockOnEvent",
		2: "ServerclockOnTransmission",
		3: "DeviceClockOnTransmission",
		4: "ManualInput",
		5: "Unknown",
	}
	TimeDataSource_TimeDataSourceEnum_value = map[string]int32{
		"GPSOnEvent":                0,
		"DeviceClockOnEvent":        1,
		"ServerclockOnTransmission": 2,
		"DeviceClockOnTransmission": 3,
		"ManualInput":               4,
		"Unknown":                   5,
	}
)

func (x TimeDataSource_TimeDataSourceEnum) Enum() *TimeDataSource_TimeDataSourceEnum {
	p := new(TimeDataSource_TimeDataSourceEnum)
	*p = x
	return p
}

func (x TimeDataSource_TimeDataSourceEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeDataSource_TimeDataSourceEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_Equipment_proto_enumTypes[13].Descriptor()
}

func (TimeDataSource_TimeDataSourceEnum) Type() protoreflect.EnumType {
	return &file_Equipment_proto_enumTypes[13]
}

func (x TimeDataSource_TimeDataSourceEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeDataSource_TimeDataSourceEnum.Descriptor instead.
func (TimeDataSource_TimeDataSourceEnum) EnumDescriptor() ([]byte, []int) {
	return file_Equipment_proto_rawDescGZIP(), []int{32, 0}
}

type Connector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                           *Common.CompoundIdentifier `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	DeviceElementConfigurationId int64                      `protobuf:"varint,2,opt,name=DeviceElementConfigurationId,proto3" json:"DeviceElementConfigurationId,omitempty"`
	HitchPointId                 int64                      `protobuf:"varint,3,opt,name=HitchPointId,proto3" json:"HitchPointId,omitempty"`
}

func (x *Connector) Reset() {
	*x = Connector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Equipment_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Connector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connector) ProtoMessage() {}

func (x *Connector) ProtoReflect() protoreflect.Message {
	mi := &file_Equipment_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connector.ProtoReflect.Descriptor instead.
func (*Connector) Descriptor() ([]byte, []int) {
	return file_Equipment_proto_rawDescGZIP(), []int{0}
}

func (x *Connector) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Connector) GetDeviceElementConfigurationId() int64 {
	if x != nil {
		return x.DeviceElementConfigurationId
	}
	return 0
}

func (x *Connector) GetHitchPointId() int64 {
	if x != nil {
		return x.HitchPointId
	}
	return 0
}

type ConnectorType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConnectorType) Reset() {
	*x = ConnectorType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Equipment_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectorType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectorType) ProtoMessage() {}

func (x *ConnectorType) ProtoReflect() protoreflect.Message {
	mi := &file_Equipment_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectorType.ProtoReflect.Descriptor instead.
func (*ConnectorType) Descriptor() ([]byte, []int) {
	return file_Equipment_proto_rawDescGZIP(), []int{1}
}

type CornerArmType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CornerArmType) Reset() {
	*x = CornerArmType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Equipment_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CornerArmType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CornerArmType) ProtoMessage() {}

func (x *CornerArmType) ProtoReflect() protoreflect.Message {
	mi := &file_Equipment_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CornerArmType.ProtoReflect.Descriptor instead.
func (*CornerArmType) Descriptor() ([]byte, []int) {
	return file_Equipment_proto_rawDescGZIP(), []int{2}
}

type DeviceElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   *Common.CompoundIdentifier       `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Description          string                           `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	SerialNumber         string                           `protobuf:"bytes,3,opt,name=SerialNumber,proto3" json:"SerialNumber,omitempty"`
	ManufacturerId       int64                            `protobuf:"varint,4,opt,name=ManufacturerId,proto3" json:"ManufacturerId,omitempty"`
	BrandId              int64                            `protobuf:"varint,5,opt,name=BrandId,proto3" json:"BrandId,omitempty"`
	SeriesId             int64                            `protobuf:"varint,6,opt,name=SeriesId,proto3" json:"SeriesId,omitempty"`
	ContextItems         []*Common.ContextItem            `protobuf:"bytes,7,rep,name=ContextItems,proto3" json:"ContextItems,omitempty"`
	DeviceClassification *Representations.EnumeratedValue `protobuf:"bytes,8,opt,name=DeviceClassification,proto3" json:"DeviceClassification,omitempty"`
	DeviceModelId        int64                            `protobuf:"varint,9,opt,name=DeviceModelId,proto3" json:"DeviceModelId,omitempty"`
	DeviceElementType    *DeviceElementType               `protobuf:"bytes,10,opt,name=DeviceElementType,proto3" json:"DeviceElementType,omitempty"`
	ParentDeviceId       int64                            `protobuf:"varint,11,opt,name=ParentDeviceId,proto3" json:"ParentDeviceId,omitempty"`
}

func (x *DeviceElement) Reset() {
	*x = DeviceElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Equipment_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceElement) ProtoMessage() {}

func (x *DeviceElement) ProtoReflect() protoreflect.Message {
	mi := &file_Equipment_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceElement.ProtoReflect.Descriptor instead.
func (*DeviceElement) Descriptor() ([]byte, []int) {
	return file_Equipment_proto_rawDescGZIP(), []int{3}
}

func (x *DeviceElement) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceElement) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DeviceElement) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *DeviceElement) GetManufacturerId() int64 {
	if x != nil {
		return x.ManufacturerId
	}
	return 0
}

func (x *DeviceElement) GetBrandId() int64 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

func (x *DeviceElement) GetSeriesId() int64 {
	if x != nil {
		return x.SeriesId
	}
	return 0
}

func (x *DeviceElement) GetContextItems() []*Common.ContextItem {
	if x != nil {
		return x.ContextItems
	}
	return nil
}

func (x *DeviceElement) GetDeviceClassification() *Representations.EnumeratedValue {
	if x != nil {
		return x.DeviceClassification
	}
	return nil
}

func (x *DeviceElement) GetDeviceModelId() int64 {
	if x != nil {
		return x.DeviceModelId
	}
	return 0
}

func (x *DeviceElement) GetDeviceElementType() *DeviceElementType {
	if x != nil {
		return x.DeviceElementType
	}
	return nil
}

func (x *DeviceElement) GetParentDeviceId() int64 {
	if x != nil {
		return x.ParentDeviceId
	}
	return 0
}

type DeviceElementConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              *Common.CompoundIdentifier                    `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	DeviceElementId int64                                         `protobuf:"varint,2,opt,name=DeviceElementId,proto3" json:"DeviceElementId,omitempty"`
	Description     string                                        `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	TimeScopes      []*Common.TimeScope                           `protobuf:"bytes,4,rep,name=TimeScopes,proto3" json:"TimeScopes,omitempty"`
	Offsets         []*Representations.NumericRepresentationValue `protobuf:"bytes,5,rep,name=Offsets,proto3" json:"Offsets,omitempty"`
	// Types that are assignable to Subtype:
	//
	//	*DeviceElementConfiguration_ImplementConfiguration
	//	*DeviceElementConfiguration_MachineConfiguration
	//	*DeviceElementConfiguration_SectionConfiguration
	//	*DeviceElementConfiguration_IrrSectionConfiguration
	//	*DeviceElementConfiguration_EndgunConfiguration
	//	*DeviceElementConfiguration_IrrSystemConfiguration
	Subtype isDeviceElementConfiguration_Subtype `protobuf_oneof:"subtype"`
}

func (x *DeviceElementConfiguration) Reset() {
	*x = DeviceElementConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Equipment_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceElementConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceElementConfiguration) ProtoMessage() {}

func (x *DeviceElementConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_Equipment_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceElementConfiguration.ProtoReflect.Descriptor instead.
func (*DeviceElementConfiguration) Descriptor() ([]byte, []int) {
	return file_Equipment_proto_rawDescGZIP(), []int{4}
}

func (x *DeviceElementConfiguration) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceElementConfiguration) GetDeviceElementId() int64 {
	if x != nil {
		return x.DeviceElementId
	}
	return 0
}

func (x *DeviceElementConfiguration) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DeviceElementConfiguration) GetTimeScopes() []*Common.TimeScope {
	if x != nil {
		return x.TimeScopes
	}
	return nil
}

func (x *DeviceElementConfiguration) GetOffsets() []*Representations.NumericRepresentationValue {
	if x != nil {
		return x.Offsets
	}
	return nil
}

func (m *DeviceElementConfiguration) GetSubtype() isDeviceElementConfiguration_Subtype {
	if m != nil {
		return m.Subtype
	}
	return nil
}

func (x *DeviceElementConfiguration) GetImplementConfiguration() *ImplementConfiguration {
	if x, ok := x.GetSubtype().(*DeviceElementConfiguration_ImplementConfiguration); ok {
		return x.ImplementConfiguration
	}
	return nil
}

func (x *DeviceElementConfiguration) GetMachineConfiguration() *MachineConfiguration {
	if x, ok := x.GetSubtype().(*DeviceElementConfiguration_MachineConfiguration); ok {
		return x.MachineConfiguration
	}
	return nil
}

func (x *DeviceElementConfiguration) GetSectionConfiguration() *SectionConfiguration {
	if x, ok := x.GetSubtype().(*DeviceElementConfiguration_SectionConfiguration); ok {
		return x.SectionConfiguration
	}
	return nil
}

func (x *DeviceElementConfiguration) GetIrrSectionConfiguration() *IrrSectionConfiguration {
	if x, ok := x.GetSubtype().(*DeviceElementConfiguration_IrrSectionConfiguration); ok {
		return x.IrrSectionConfiguration
	}
	return nil
}

func (x *DeviceElementConfiguration) GetEndgunConfiguration() *EndgunConfiguration {
	if x, ok := x.GetSubtype().(*DeviceElementConfiguration_EndgunConfiguration); ok {
		return x.EndgunConfiguration
	}
	return nil
}

func (x *DeviceElementConfiguration) GetIrrSystemConfiguration() *IrrSystemConfiguration {
	if x, ok := x.GetSubtype().(*DeviceElementConfiguration_IrrSystemConfiguration); ok {
		return x.IrrSystemConfiguration
	}
	return nil
}

type isDeviceElementConfiguration_Subtype interface {
	isDeviceElementConfiguration_Subtype()
}

type DeviceElementConfiguration_ImplementConfiguration struct {
	ImplementConfiguration *ImplementConfiguration `protobuf:"bytes,101,opt,name=ImplementConfiguration,proto3,oneof"`
}

type DeviceElementConfiguration_MachineConfiguration struct {
	MachineConfiguration *MachineConfiguration `protobuf:"bytes,102,opt,name=MachineConfiguration,proto3,oneof"`
}

type DeviceElementConfiguration_SectionConfiguration struct {
	SectionConfiguration *SectionConfiguration `protobuf:"bytes,103,opt,name=SectionConfiguration,proto3,oneof"`
}

type DeviceElementConfiguration_IrrSectionConfiguration struct {
	IrrSectionConfiguration *IrrSectionConfiguration `protobuf:"bytes,104,opt,name=IrrSectionConfiguration,proto3,oneof"`
}

type DeviceElementConfiguration_EndgunConfiguration struct {
	EndgunConfiguration *EndgunConfiguration `protobuf:"bytes,105,opt,name=EndgunConfiguration,proto3,oneof"`
}

type DeviceElementConfiguration_IrrSystemConfiguration struct {
	IrrSystemConfiguration *IrrSystemConfiguration `protobuf:"bytes,106,opt,name=IrrSystemConfiguration,proto3,oneof"`
}

func (*DeviceElementConfiguration_ImplementConfiguration) isDeviceElementConfiguration_Subtype() {}

func (*DeviceElementConfiguration_MachineConfiguration) isDeviceElementConfiguration_Subtype() {}

func (*DeviceElementConfiguration_SectionConfiguration) isDeviceElementConfiguration_Subtype() {}

func (*DeviceElementConfiguration_IrrSectionConfiguration) isDeviceElementConfiguration_Subtype() {}

func (*DeviceElementConfiguration_EndgunConfiguration) isDeviceElementConfiguration_Subtype() {}

func (*DeviceElementConfiguration_IrrSystemConfiguration) isDeviceElementConfiguration_Subtype() {}

type DeviceElementType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *DeviceElementType) Reset() {
	*x = DeviceElementType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Equipment_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceElementType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceElementType) ProtoMessage() {}

func (x *DeviceElementType) ProtoReflect() protoreflect.Message {
	mi := &file_Equipment_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceElementType.ProtoReflect.Descriptor instead.
func (*DeviceElementType) Descriptor() ([]byte, []int) {
	return file_Equipment_proto_rawDescGZIP(), []int{5}
}

func (x *DeviceElementType) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type IrrSystemType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IrrSystemType) Reset() {
	*x = IrrSystemType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Equipment_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrrSystemType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrrSystemType) ProtoMessage() {}

func (x *IrrSystemType) ProtoReflect() protoreflect.Message {
	mi := &file_Equipment_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrrSystemType.ProtoReflect.Descriptor instead.
func (*IrrSystemType) Descriptor() ([]byte, []int) {
	return file_Equipment_proto_rawDescGZIP(), []int{6}
}

type DeviceElementUse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     *Common.CompoundIdentifier                  `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	DeviceConfigurationId  int64                                       `protobuf:"varint,2,opt,name=DeviceConfigurationId,proto3" json:"DeviceConfigurationId,omitempty"`
	OperationDataId        int64                                       `protobuf:"varint,3,opt,name=OperationDataId,proto3" json:"OperationDataId,omitempty"`
	Depth                  int64                                       `protobuf:"varint,4,opt,name=Depth,proto3" json:"Depth,omitempty"`
	Order                  int64                                       `protobuf:"varint,5,opt,name=Order,proto3" json:"Order,omitempty"`
	TotalDistanceTravelled *Representations.NumericRepresentationValue `protobuf:"bytes,6,opt,name=TotalDistanceTravelled,proto3" json:"TotalDistanceTravelled,omitempty"`
	TotalElapsedTime       *Representations.NumericRepresentationValue `protobuf:"bytes,7,opt,name=TotalElapsedTime,proto3" json:"TotalElapsedTime,omitempty"`
}

func (x *DeviceElementUse) Reset() {
	*x = DeviceElementUse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Equipment_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceElementUse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceElementUse) ProtoMessage() {}

func (x *DeviceElementUse) ProtoReflect() protoreflect.Message {
	mi := &file_Equipment_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceElementUse.ProtoReflect.Descriptor instead.
func (*DeviceElementUse) Descriptor() ([]byte, []int) {
	return file_Equipment_proto_rawDescGZIP(), []int{7}
}

func (x *DeviceElementUse) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceElementUse) GetDeviceConfigurationId() int64 {
	if x != nil {
		return x.DeviceConfigurationId
	}
	return 0
}

func (x *DeviceElementUse) GetOperationDataId() int64 {
	if x != nil {
		return x.OperationDataId
	}
	return 0
}

func (x *DeviceElementUse) GetDepth() int64 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *DeviceElementUse) GetOrder() int64 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *DeviceElementUse) GetTotalDistanceTravelled() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.TotalDistanceTravelled
	}
	return nil
}

func (x *DeviceElementUse) GetTotalElapsedTime() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.TotalElapsedTime
	}
	return nil
}

type DeviceModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *Common.CompoundIdentifier `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Description string                     `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	SeriesId    int64                      `protobuf:"varint,3,opt,name=SeriesId,proto3" json:"SeriesId,omitempty"`
	BrandId     int64                      `protobuf:"varint,4,opt,name=BrandId,proto3" json:"BrandId,omitempty"`
}

func (x *DeviceModel) Reset() {
	*x = DeviceModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Equipment_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceModel) ProtoMessage() {}

func (x *DeviceModel) ProtoReflect() protoreflect.Message {
	mi := &file_Equipment_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceModel.ProtoReflect.Descriptor instead.
func (*DeviceModel) Descriptor() ([]byte, []int) {
	return file_Equipment_proto_rawDescGZIP(), []int{8}
}

func (x *DeviceModel) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceModel) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DeviceModel) GetSeriesId() int64 {
	if x != nil {
		return x.SeriesId
	}
	return 0
}

func (x *DeviceModel) GetBrandId() int64 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

type DeviceSeries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           *Common.CompoundIdentifier `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Description  string                     `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	BrandId      int64                      `protobuf:"varint,3,opt,name=BrandId,proto3" json:"BrandId,omitempty"`
	ContextItems []*Common.ContextItem      `protobuf:"bytes,4,rep,name=ContextItems,proto3" json:"ContextItems,omitempty"`
}

func (x *DeviceSeries) Reset() {
	*x = DeviceSeries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Equipment_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceSeries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceSeries) ProtoMessage() {}

func (x *DeviceSeries) ProtoReflect() protoreflect.Message {
	mi := &file_Equipment_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceSeries.ProtoReflect.Descriptor instead.
func (*DeviceSeries) Descriptor() ([]byte, []int) {
	return file_Equipment_proto_rawDescGZIP(), []int{9}
}

func (x *DeviceSeries) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceSeries) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DeviceSeries) GetBrandId() int64 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

func (x *DeviceSeries) GetContextItems() []*Common.ContextItem {
	if x != nil {
		return x.ContextItems
	}
	return nil
}

type EndgunConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NominalValues *EndgunTableEntry `protobuf:"bytes,1,opt,name=NominalValues,proto3" json:"NominalValues,omitempty"`
	TabularValues *EndgunTable      `protobuf:"bytes,2,opt,name=TabularValues,proto3" json:"TabularValues,omitempty"`
}

func (x *EndgunConfiguration) Reset() {
	*x = EndgunConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Equipment_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndgunConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndgunConfiguration) ProtoMessage() {}

func (x *EndgunConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_Equipment_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndgunConfiguration.ProtoReflect.Descriptor instead.
func (*EndgunConfiguration) Descriptor() ([]byte, []int) {
	return file_Equipment_proto_rawDescGZIP(), []int{10}
}

func (x *EndgunConfiguration) GetNominalValues() *EndgunTableEntry {
	if x != nil {
		return x.NominalValues
	}
	return nil
}

func (x *EndgunConfiguration) GetTabularValues() *EndgunTable {
	if x != nil {
		return x.TabularValues
	}
	return nil
}

type EndgunTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableEntries []*EndgunTableEntry `protobuf:"bytes,1,rep,name=TableEntries,proto3" json:"TableEntries,omitempty"`
}

func (x *EndgunTable) Reset() {
	*x = EndgunTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Equipment_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndgunTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndgunTable) ProtoMessage() {}

func (x *EndgunTable) ProtoReflect() protoreflect.Message {
	mi := &file_Equipment_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndgunTable.ProtoReflect.Descriptor instead.
func (*EndgunTable) Descriptor() ([]byte, []int) {
	return file_Equipment_proto_rawDescGZIP(), []int{11}
}

func (x *EndgunTable) GetTableEntries() []*EndgunTableEntry {
	if x != nil {
		return x.TableEntries
	}
	return nil
}

type EndgunTableEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pressure   *Representations.NumericRepresentationValue `protobuf:"bytes,1,opt,name=Pressure,proto3" json:"Pressure,omitempty"`
	FlowValue  *Representations.NumericRepresentationValue `protobuf:"bytes,2,opt,name=FlowValue,proto3" json:"FlowValue,omitempty"`
	ThrowValue *Representations.NumericRepresentationValue `protobuf:"bytes,3,opt,name=ThrowValue,proto3" json:"ThrowValue,omitempty"`
}

func (x *EndgunTableEntry) Reset() {
	*x = EndgunTableEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Equipment_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndgunTableEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndgunTableEntry) ProtoMessage() {}

func (x *EndgunTableEntry) ProtoReflect() protoreflect.Message {
	mi := &file_Equipment_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndgunTableEntry.ProtoReflect.Descriptor instead.
func (*EndgunTableEntry) Descriptor() ([]byte, []int) {
	return file_Equipment_proto_rawDescGZIP(), []int{12}
}

func (x *EndgunTableEntry) GetPressure() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.Pressure
	}
	return nil
}

func (x *EndgunTableEntry) GetFlowValue() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.FlowValue
	}
	return nil
}

func (x *EndgunTableEntry) GetThrowValue() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.ThrowValue
	}
	return nil
}

type EquipmentConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           *Common.CompoundIdentifier `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Description  string                     `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	Connector1Id int64                      `protobuf:"varint,3,opt,name=Connector1Id,proto3" json:"Connector1Id,omitempty"`
	Connector2Id int64                      `protobuf:"varint,4,opt,name=Connector2Id,proto3" json:"Connector2Id,omitempty"`
}

func (x *EquipmentConfiguration) Reset() {
	*x = EquipmentConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Equipment_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipmentConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipmentConfiguration) ProtoMessage() {}

func (x *EquipmentConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_Equipment_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipmentConfiguration.ProtoReflect.Descriptor instead.
func (*EquipmentConfiguration) Descriptor() ([]byte, []int) {
	return file_Equipment_proto_rawDescGZIP(), []int{13}
}

func (x *EquipmentConfiguration) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EquipmentConfiguration) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *EquipmentConfiguration) GetConnector1Id() int64 {
	if x != nil {
		return x.Connector1Id
	}
	return 0
}

func (x *EquipmentConfiguration) GetConnector2Id() int64 {
	if x != nil {
		return x.Connector2Id
	}
	return 0
}

type EquipmentConfigurationGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      *Common.CompoundIdentifier `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Description             string                     `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	EquipmentConfigurations []*EquipmentConfiguration  `protobuf:"bytes,3,rep,name=EquipmentConfigurations,proto3" json:"EquipmentConfigurations,omitempty"`
	TimeScopes              []*Common.TimeScope        `protobuf:"bytes,4,rep,name=TimeScopes,proto3" json:"TimeScopes,omitempty"`
}

func (x *EquipmentConfigurationGroup) Reset() {
	*x = EquipmentConfigurationGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Equipment_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipmentConfigurationGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipmentConfigurationGroup) ProtoMessage() {}

func (x *EquipmentConfigurationGroup) ProtoReflect() protoreflect.Message {
	mi := &file_Equipment_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipmentConfigurationGroup.ProtoReflect.Descriptor instead.
func (*EquipmentConfigurationGroup) Descriptor() ([]byte, []int) {
	return file_Equipment_proto_rawDescGZIP(), []int{14}
}

func (x *EquipmentConfigurationGroup) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *EquipmentConfigurationGroup) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *EquipmentConfigurationGroup) GetEquipmentConfigurations() []*EquipmentConfiguration {
	if x != nil {
		return x.EquipmentConfigurations
	}
	return nil
}

func (x *EquipmentConfigurationGroup) GetTimeScopes() []*Common.TimeScope {
	if x != nil {
		return x.TimeScopes
	}
	return nil
}

type HitchPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *Common.CompoundIdentifier `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	HitchTypeEnum  *HitchType                 `protobuf:"bytes,2,opt,name=HitchTypeEnum,proto3" json:"HitchTypeEnum,omitempty"`
	ReferencePoint *ReferencePoint            `protobuf:"bytes,3,opt,name=ReferencePoint,proto3" json:"ReferencePoint,omitempty"`
}

func (x *HitchPoint) Reset() {
	*x = HitchPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Equipment_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HitchPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HitchPoint) ProtoMessage() {}

func (x *HitchPoint) ProtoReflect() protoreflect.Message {
	mi := &file_Equipment_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HitchPoint.ProtoReflect.Descriptor instead.
func (*HitchPoint) Descriptor() ([]byte, []int) {
	return file_Equipment_proto_rawDescGZIP(), []int{15}
}

func (x *HitchPoint) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *HitchPoint) GetHitchTypeEnum() *HitchType {
	if x != nil {
		return x.HitchTypeEnum
	}
	return nil
}

func (x *HitchPoint) GetReferencePoint() *ReferencePoint {
	if x != nil {
		return x.ReferencePoint
	}
	return nil
}

type HitchType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HitchType) Reset() {
	*x = HitchType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Equipment_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HitchType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HitchType) ProtoMessage() {}

func (x *HitchType) ProtoReflect() protoreflect.Message {
	mi := &file_Equipment_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HitchType.ProtoReflect.Descriptor instead.
func (*HitchType) Descriptor() ([]byte, []int) {
	return file_Equipment_proto_rawDescGZIP(), []int{16}
}

type ImplementConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Width                      *Representations.NumericRepresentationValue `protobuf:"bytes,1,opt,name=Width,proto3" json:"Width,omitempty"`
	TrackSpacing               *Representations.NumericRepresentationValue `protobuf:"bytes,2,opt,name=TrackSpacing,proto3" json:"TrackSpacing,omitempty"`
	PhysicalWidth              *Representations.NumericRepresentationValue `protobuf:"bytes,3,opt,name=PhysicalWidth,proto3" json:"PhysicalWidth,omitempty"`
	InGroundTurnRadius         *Representations.NumericRepresentationValue `protobuf:"bytes,4,opt,name=InGroundTurnRadius,proto3" json:"InGroundTurnRadius,omitempty"`
	ImplementLength            *Representations.NumericRepresentationValue `protobuf:"bytes,5,opt,name=ImplementLength,proto3" json:"ImplementLength,omitempty"`
	VerticalCuttingEdgeZOffset *Representations.NumericRepresentationValue `protobuf:"bytes,6,opt,name=VerticalCuttingEdgeZOffset,proto3" json:"VerticalCuttingEdgeZOffset,omitempty"`
	GPSReceiverZOffset         *Representations.NumericRepresentationValue `protobuf:"bytes,7,opt,name=GPSReceiverZOffset,proto3" json:"GPSReceiverZOffset,omitempty"`
	YOffset                    *Representations.NumericRepresentationValue `protobuf:"bytes,8,opt,name=YOffset,proto3" json:"YOffset,omitempty"`
	ControlPoint               *ReferencePoint                             `protobuf:"bytes,9,opt,name=ControlPoint,proto3" json:"ControlPoint,omitempty"`
}

func (x *ImplementConfiguration) Reset() {
	*x = ImplementConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Equipment_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImplementConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImplementConfiguration) ProtoMessage() {}

func (x *ImplementConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_Equipment_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImplementConfiguration.ProtoReflect.Descriptor instead.
func (*ImplementConfiguration) Descriptor() ([]byte, []int) {
	return file_Equipment_proto_rawDescGZIP(), []int{17}
}

func (x *ImplementConfiguration) GetWidth() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.Width
	}
	return nil
}

func (x *ImplementConfiguration) GetTrackSpacing() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.TrackSpacing
	}
	return nil
}

func (x *ImplementConfiguration) GetPhysicalWidth() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.PhysicalWidth
	}
	return nil
}

func (x *ImplementConfiguration) GetInGroundTurnRadius() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.InGroundTurnRadius
	}
	return nil
}

func (x *ImplementConfiguration) GetImplementLength() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.ImplementLength
	}
	return nil
}

func (x *ImplementConfiguration) GetVerticalCuttingEdgeZOffset() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.VerticalCuttingEdgeZOffset
	}
	return nil
}

func (x *ImplementConfiguration) GetGPSReceiverZOffset() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.GPSReceiverZOffset
	}
	return nil
}

func (x *ImplementConfiguration) GetYOffset() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.YOffset
	}
	return nil
}

func (x *ImplementConfiguration) GetControlPoint() *ReferencePoint {
	if x != nil {
		return x.ControlPoint
	}
	return nil
}

type InstallationDisplacement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InstallationDisplacement) Reset() {
	*x = InstallationDisplacement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Equipment_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallationDisplacement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallationDisplacement) ProtoMessage() {}

func (x *InstallationDisplacement) ProtoReflect() protoreflect.Message {
	mi := &file_Equipment_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallationDisplacement.ProtoReflect.Descriptor instead.
func (*InstallationDisplacement) Descriptor() ([]byte, []int) {
	return file_Equipment_proto_rawDescGZIP(), []int{18}
}

type IrrErrorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IrrErrorCode) Reset() {
	*x = IrrErrorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Equipment_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrrErrorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrrErrorCode) ProtoMessage() {}

func (x *IrrErrorCode) ProtoReflect() protoreflect.Message {
	mi := &file_Equipment_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrrErrorCode.ProtoReflect.Descriptor instead.
func (*IrrErrorCode) Descriptor() ([]byte, []int) {
	return file_Equipment_proto_rawDescGZIP(), []int{19}
}

type IrrFlowDataSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IrrFlowDataSource) Reset() {
	*x = IrrFlowDataSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Equipment_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrrFlowDataSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrrFlowDataSource) ProtoMessage() {}

func (x *IrrFlowDataSource) ProtoReflect() protoreflect.Message {
	mi := &file_Equipment_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrrFlowDataSource.ProtoReflect.Descriptor instead.
func (*IrrFlowDataSource) Descriptor() ([]byte, []int) {
	return file_Equipment_proto_rawDescGZIP(), []int{20}
}

type IrrFlowTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IrrFlowTag) Reset() {
	*x = IrrFlowTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Equipment_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrrFlowTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrrFlowTag) ProtoMessage() {}

func (x *IrrFlowTag) ProtoReflect() protoreflect.Message {
	mi := &file_Equipment_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrrFlowTag.ProtoReflect.Descriptor instead.
func (*IrrFlowTag) Descriptor() ([]byte, []int) {
	return file_Equipment_proto_rawDescGZIP(), []int{21}
}

type IrrPressureLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IrrPressureLocation) Reset() {
	*x = IrrPressureLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Equipment_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrrPressureLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrrPressureLocation) ProtoMessage() {}

func (x *IrrPressureLocation) ProtoReflect() protoreflect.Message {
	mi := &file_Equipment_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrrPressureLocation.ProtoReflect.Descriptor instead.
func (*IrrPressureLocation) Descriptor() ([]byte, []int) {
	return file_Equipment_proto_rawDescGZIP(), []int{22}
}

type IrrSectionConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SectionType       *IrrSectionType                             `protobuf:"bytes,1,opt,name=SectionType,proto3" json:"SectionType,omitempty"`
	InnerDistance     *Representations.NumericRepresentationValue `protobuf:"bytes,2,opt,name=InnerDistance,proto3" json:"InnerDistance,omitempty"`
	OuterDistance     *Representations.NumericRepresentationValue `protobuf:"bytes,3,opt,name=OuterDistance,proto3" json:"OuterDistance,omitempty"`
	SpatialFootprint  *Shapes.MultiPolygon                        `protobuf:"bytes,4,opt,name=SpatialFootprint,proto3" json:"SpatialFootprint,omitempty"`
	NominalEfficiency *Representations.NumericRepresentationValue `protobuf:"bytes,5,opt,name=NominalEfficiency,proto3" json:"NominalEfficiency,omitempty"`
}

func (x *IrrSectionConfiguration) Reset() {
	*x = IrrSectionConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Equipment_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrrSectionConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrrSectionConfiguration) ProtoMessage() {}

func (x *IrrSectionConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_Equipment_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrrSectionConfiguration.ProtoReflect.Descriptor instead.
func (*IrrSectionConfiguration) Descriptor() ([]byte, []int) {
	return file_Equipment_proto_rawDescGZIP(), []int{23}
}

func (x *IrrSectionConfiguration) GetSectionType() *IrrSectionType {
	if x != nil {
		return x.SectionType
	}
	return nil
}

func (x *IrrSectionConfiguration) GetInnerDistance() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.InnerDistance
	}
	return nil
}

func (x *IrrSectionConfiguration) GetOuterDistance() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.OuterDistance
	}
	return nil
}

func (x *IrrSectionConfiguration) GetSpatialFootprint() *Shapes.MultiPolygon {
	if x != nil {
		return x.SpatialFootprint
	}
	return nil
}

func (x *IrrSectionConfiguration) GetNominalEfficiency() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.NominalEfficiency
	}
	return nil
}

type IrrSectionType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IrrSectionType) Reset() {
	*x = IrrSectionType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Equipment_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrrSectionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrrSectionType) ProtoMessage() {}

func (x *IrrSectionType) ProtoReflect() protoreflect.Message {
	mi := &file_Equipment_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrrSectionType.ProtoReflect.Descriptor instead.
func (*IrrSectionType) Descriptor() ([]byte, []int) {
	return file_Equipment_proto_rawDescGZIP(), []int{24}
}

type IrrSystemModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SysType *IrrSystemType `protobuf:"bytes,1,opt,name=SysType,proto3" json:"SysType,omitempty"`
}

func (x *IrrSystemModel) Reset() {
	*x = IrrSystemModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Equipment_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrrSystemModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrrSystemModel) ProtoMessage() {}

func (x *IrrSystemModel) ProtoReflect() protoreflect.Message {
	mi := &file_Equipment_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrrSystemModel.ProtoReflect.Descriptor instead.
func (*IrrSystemModel) Descriptor() ([]byte, []int) {
	return file_Equipment_proto_rawDescGZIP(), []int{25}
}

func (x *IrrSystemModel) GetSysType() *IrrSystemType {
	if x != nil {
		return x.SysType
	}
	return nil
}

type IrrSystemConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SystemPosition          *Shapes.Point                               `protobuf:"bytes,1,opt,name=SystemPosition,proto3" json:"SystemPosition,omitempty"`
	GrowerId                int64                                       `protobuf:"varint,2,opt,name=GrowerId,proto3" json:"GrowerId,omitempty"`
	FarmId                  int64                                       `protobuf:"varint,3,opt,name=FarmId,proto3" json:"FarmId,omitempty"`
	FieldId                 int64                                       `protobuf:"varint,4,opt,name=FieldId,proto3" json:"FieldId,omitempty"`
	CropZoneId              int64                                       `protobuf:"varint,5,opt,name=CropZoneId,proto3" json:"CropZoneId,omitempty"`
	SectionConfigurationIds []int64                                     `protobuf:"varint,6,rep,packed,name=SectionConfigurationIds,proto3" json:"SectionConfigurationIds,omitempty"`
	SpatialFootprint        *Shapes.MultiPolygon                        `protobuf:"bytes,7,opt,name=SpatialFootprint,proto3" json:"SpatialFootprint,omitempty"`
	GuidancePath            *Shapes.LineString                          `protobuf:"bytes,8,opt,name=GuidancePath,proto3" json:"GuidancePath,omitempty"`
	CornerArmType           *CornerArmType                              `protobuf:"bytes,9,opt,name=CornerArmType,proto3" json:"CornerArmType,omitempty"`
	FlowDataPedigree        *IrrFlowDataSource                          `protobuf:"bytes,10,opt,name=FlowDataPedigree,proto3" json:"FlowDataPedigree,omitempty"`
	PositionDataPedigree    *Common.GpsSource                           `protobuf:"bytes,11,opt,name=PositionDataPedigree,proto3" json:"PositionDataPedigree,omitempty"`
	TimeDataPedigree        *TimeDataSource                             `protobuf:"bytes,12,opt,name=TimeDataPedigree,proto3" json:"TimeDataPedigree,omitempty"`
	SystemLength            *Representations.NumericRepresentationValue `protobuf:"bytes,13,opt,name=SystemLength,proto3" json:"SystemLength,omitempty"`
	EndgunConfigurationIds  []int64                                     `protobuf:"varint,14,rep,packed,name=EndgunConfigurationIds,proto3" json:"EndgunConfigurationIds,omitempty"`
	NominalPressure         *Representations.NumericRepresentationValue `protobuf:"bytes,15,opt,name=NominalPressure,proto3" json:"NominalPressure,omitempty"`
	PressureLocation        *IrrPressureLocation                        `protobuf:"bytes,16,opt,name=PressureLocation,proto3" json:"PressureLocation,omitempty"`
	NominalEfficiency       *Representations.NumericRepresentationValue `protobuf:"bytes,17,opt,name=NominalEfficiency,proto3" json:"NominalEfficiency,omitempty"`
	NominalFlow             *Representations.NumericRepresentationValue `protobuf:"bytes,18,opt,name=NominalFlow,proto3" json:"NominalFlow,omitempty"`
	NominalFullCircleTime   *Representations.NumericRepresentationValue `protobuf:"bytes,19,opt,name=NominalFullCircleTime,proto3" json:"NominalFullCircleTime,omitempty"`
	BearingOffset           *Representations.NumericRepresentationValue `protobuf:"bytes,20,opt,name=BearingOffset,proto3" json:"BearingOffset,omitempty"`
	Notes                   []*Notes.Note                               `protobuf:"bytes,21,rep,name=Notes,proto3" json:"Notes,omitempty"`
	ContextItems            []*Common.ContextItem                       `protobuf:"bytes,22,rep,name=ContextItems,proto3" json:"ContextItems,omitempty"`
}

func (x *IrrSystemConfiguration) Reset() {
	*x = IrrSystemConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Equipment_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrrSystemConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrrSystemConfiguration) ProtoMessage() {}

func (x *IrrSystemConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_Equipment_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrrSystemConfiguration.ProtoReflect.Descriptor instead.
func (*IrrSystemConfiguration) Descriptor() ([]byte, []int) {
	return file_Equipment_proto_rawDescGZIP(), []int{26}
}

func (x *IrrSystemConfiguration) GetSystemPosition() *Shapes.Point {
	if x != nil {
		return x.SystemPosition
	}
	return nil
}

func (x *IrrSystemConfiguration) GetGrowerId() int64 {
	if x != nil {
		return x.GrowerId
	}
	return 0
}

func (x *IrrSystemConfiguration) GetFarmId() int64 {
	if x != nil {
		return x.FarmId
	}
	return 0
}

func (x *IrrSystemConfiguration) GetFieldId() int64 {
	if x != nil {
		return x.FieldId
	}
	return 0
}

func (x *IrrSystemConfiguration) GetCropZoneId() int64 {
	if x != nil {
		return x.CropZoneId
	}
	return 0
}

func (x *IrrSystemConfiguration) GetSectionConfigurationIds() []int64 {
	if x != nil {
		return x.SectionConfigurationIds
	}
	return nil
}

func (x *IrrSystemConfiguration) GetSpatialFootprint() *Shapes.MultiPolygon {
	if x != nil {
		return x.SpatialFootprint
	}
	return nil
}

func (x *IrrSystemConfiguration) GetGuidancePath() *Shapes.LineString {
	if x != nil {
		return x.GuidancePath
	}
	return nil
}

func (x *IrrSystemConfiguration) GetCornerArmType() *CornerArmType {
	if x != nil {
		return x.CornerArmType
	}
	return nil
}

func (x *IrrSystemConfiguration) GetFlowDataPedigree() *IrrFlowDataSource {
	if x != nil {
		return x.FlowDataPedigree
	}
	return nil
}

func (x *IrrSystemConfiguration) GetPositionDataPedigree() *Common.GpsSource {
	if x != nil {
		return x.PositionDataPedigree
	}
	return nil
}

func (x *IrrSystemConfiguration) GetTimeDataPedigree() *TimeDataSource {
	if x != nil {
		return x.TimeDataPedigree
	}
	return nil
}

func (x *IrrSystemConfiguration) GetSystemLength() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.SystemLength
	}
	return nil
}

func (x *IrrSystemConfiguration) GetEndgunConfigurationIds() []int64 {
	if x != nil {
		return x.EndgunConfigurationIds
	}
	return nil
}

func (x *IrrSystemConfiguration) GetNominalPressure() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.NominalPressure
	}
	return nil
}

func (x *IrrSystemConfiguration) GetPressureLocation() *IrrPressureLocation {
	if x != nil {
		return x.PressureLocation
	}
	return nil
}

func (x *IrrSystemConfiguration) GetNominalEfficiency() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.NominalEfficiency
	}
	return nil
}

func (x *IrrSystemConfiguration) GetNominalFlow() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.NominalFlow
	}
	return nil
}

func (x *IrrSystemConfiguration) GetNominalFullCircleTime() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.NominalFullCircleTime
	}
	return nil
}

func (x *IrrSystemConfiguration) GetBearingOffset() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.BearingOffset
	}
	return nil
}

func (x *IrrSystemConfiguration) GetNotes() []*Notes.Note {
	if x != nil {
		return x.Notes
	}
	return nil
}

func (x *IrrSystemConfiguration) GetContextItems() []*Common.ContextItem {
	if x != nil {
		return x.ContextItems
	}
	return nil
}

type MachineConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GpsReceiverXOffset *Representations.NumericRepresentationValue `protobuf:"bytes,1,opt,name=GpsReceiverXOffset,proto3" json:"GpsReceiverXOffset,omitempty"`
	GpsReceiverYOffset *Representations.NumericRepresentationValue `protobuf:"bytes,2,opt,name=GpsReceiverYOffset,proto3" json:"GpsReceiverYOffset,omitempty"`
	GpsReceiverZOffset *Representations.NumericRepresentationValue `protobuf:"bytes,3,opt,name=GpsReceiverZOffset,proto3" json:"GpsReceiverZOffset,omitempty"`
	OriginAxleLocation *OriginAxleLocation                         `protobuf:"bytes,4,opt,name=OriginAxleLocation,proto3" json:"OriginAxleLocation,omitempty"`
}

func (x *MachineConfiguration) Reset() {
	*x = MachineConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Equipment_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineConfiguration) ProtoMessage() {}

func (x *MachineConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_Equipment_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineConfiguration.ProtoReflect.Descriptor instead.
func (*MachineConfiguration) Descriptor() ([]byte, []int) {
	return file_Equipment_proto_rawDescGZIP(), []int{27}
}

func (x *MachineConfiguration) GetGpsReceiverXOffset() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.GpsReceiverXOffset
	}
	return nil
}

func (x *MachineConfiguration) GetGpsReceiverYOffset() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.GpsReceiverYOffset
	}
	return nil
}

func (x *MachineConfiguration) GetGpsReceiverZOffset() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.GpsReceiverZOffset
	}
	return nil
}

func (x *MachineConfiguration) GetOriginAxleLocation() *OriginAxleLocation {
	if x != nil {
		return x.OriginAxleLocation
	}
	return nil
}

type OriginAxleLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OriginAxleLocation) Reset() {
	*x = OriginAxleLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Equipment_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OriginAxleLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OriginAxleLocation) ProtoMessage() {}

func (x *OriginAxleLocation) ProtoReflect() protoreflect.Message {
	mi := &file_Equipment_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OriginAxleLocation.ProtoReflect.Descriptor instead.
func (*OriginAxleLocation) Descriptor() ([]byte, []int) {
	return file_Equipment_proto_rawDescGZIP(), []int{28}
}

type ReferencePoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      *Common.CompoundIdentifier                  `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	XOffset *Representations.NumericRepresentationValue `protobuf:"bytes,2,opt,name=XOffset,proto3" json:"XOffset,omitempty"`
	YOffset *Representations.NumericRepresentationValue `protobuf:"bytes,3,opt,name=YOffset,proto3" json:"YOffset,omitempty"`
	ZOffset *Representations.NumericRepresentationValue `protobuf:"bytes,4,opt,name=ZOffset,proto3" json:"ZOffset,omitempty"`
}

func (x *ReferencePoint) Reset() {
	*x = ReferencePoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Equipment_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferencePoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferencePoint) ProtoMessage() {}

func (x *ReferencePoint) ProtoReflect() protoreflect.Message {
	mi := &file_Equipment_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferencePoint.ProtoReflect.Descriptor instead.
func (*ReferencePoint) Descriptor() ([]byte, []int) {
	return file_Equipment_proto_rawDescGZIP(), []int{29}
}

func (x *ReferencePoint) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ReferencePoint) GetXOffset() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.XOffset
	}
	return nil
}

func (x *ReferencePoint) GetYOffset() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.YOffset
	}
	return nil
}

func (x *ReferencePoint) GetZOffset() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.ZOffset
	}
	return nil
}

type SectionConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SectionWidth  *Representations.NumericRepresentationValue `protobuf:"bytes,1,opt,name=SectionWidth,proto3" json:"SectionWidth,omitempty"`
	LateralOffset *Representations.NumericRepresentationValue `protobuf:"bytes,2,opt,name=LateralOffset,proto3" json:"LateralOffset,omitempty"`
	InlineOffset  *Representations.NumericRepresentationValue `protobuf:"bytes,3,opt,name=InlineOffset,proto3" json:"InlineOffset,omitempty"`
}

func (x *SectionConfiguration) Reset() {
	*x = SectionConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Equipment_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SectionConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SectionConfiguration) ProtoMessage() {}

func (x *SectionConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_Equipment_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SectionConfiguration.ProtoReflect.Descriptor instead.
func (*SectionConfiguration) Descriptor() ([]byte, []int) {
	return file_Equipment_proto_rawDescGZIP(), []int{30}
}

func (x *SectionConfiguration) GetSectionWidth() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.SectionWidth
	}
	return nil
}

func (x *SectionConfiguration) GetLateralOffset() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.LateralOffset
	}
	return nil
}

func (x *SectionConfiguration) GetInlineOffset() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.InlineOffset
	}
	return nil
}

type TelemetryMedium struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TelemetryMedium) Reset() {
	*x = TelemetryMedium{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Equipment_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetryMedium) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryMedium) ProtoMessage() {}

func (x *TelemetryMedium) ProtoReflect() protoreflect.Message {
	mi := &file_Equipment_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryMedium.ProtoReflect.Descriptor instead.
func (*TelemetryMedium) Descriptor() ([]byte, []int) {
	return file_Equipment_proto_rawDescGZIP(), []int{31}
}

type TimeDataSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TimeDataSource) Reset() {
	*x = TimeDataSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Equipment_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeDataSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeDataSource) ProtoMessage() {}

func (x *TimeDataSource) ProtoReflect() protoreflect.Message {
	mi := &file_Equipment_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeDataSource.ProtoReflect.Descriptor instead.
func (*TimeDataSource) Descriptor() ([]byte, []int) {
	return file_Equipment_proto_rawDescGZIP(), []int{32}
}

var File_Equipment_proto protoreflect.FileDescriptor

var file_Equipment_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0f, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x1a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x15, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x53, 0x68, 0x61, 0x70, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xa5, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x41,
	0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x42, 0x0a, 0x1c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x48, 0x69, 0x74, 0x63, 0x68, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x48, 0x69,
	0x74, 0x63, 0x68, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xc2, 0x02, 0x0a, 0x0d, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb0, 0x02, 0x0a,
	0x11, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e,
	0x75, 0x6d, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x6e, 0x6b, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x1a,
	0x0a, 0x16, 0x49, 0x53, 0x4f, 0x36, 0x34, 0x38, 0x39, 0x33, 0x54, 0x72, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x44, 0x72, 0x61, 0x77, 0x62, 0x61, 0x72, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x53,
	0x4f, 0x37, 0x33, 0x30, 0x54, 0x68, 0x72, 0x65, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x69,
	0x74, 0x63, 0x68, 0x53, 0x65, 0x6d, 0x69, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x10, 0x02,
	0x12, 0x20, 0x0a, 0x1c, 0x49, 0x53, 0x4f, 0x37, 0x33, 0x30, 0x54, 0x68, 0x72, 0x65, 0x65, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x48, 0x69, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64,
	0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x53, 0x4f, 0x36, 0x34, 0x38, 0x39, 0x31, 0x48, 0x69,
	0x74, 0x63, 0x68, 0x48, 0x6f, 0x6f, 0x6b, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x53, 0x4f,
	0x36, 0x34, 0x38, 0x39, 0x32, 0x43, 0x6c, 0x65, 0x76, 0x69, 0x73, 0x43, 0x6f, 0x75, 0x70, 0x6c,
	0x69, 0x6e, 0x67, 0x34, 0x30, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x53, 0x4f, 0x36, 0x34,
	0x38, 0x39, 0x34, 0x50, 0x69, 0x74, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x70,
	0x6c, 0x69, 0x6e, 0x67, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x53, 0x4f, 0x35, 0x36, 0x39,
	0x32, 0x32, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x57, 0x61, 0x67, 0x6f, 0x6e, 0x48, 0x69, 0x74, 0x63,
	0x68, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x53, 0x4f, 0x32, 0x34, 0x33, 0x34, 0x37, 0x42,
	0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x48, 0x69, 0x74, 0x63, 0x68, 0x10, 0x08, 0x12, 0x1f,
	0x0a, 0x1b, 0x43, 0x68, 0x61, 0x73, 0x73, 0x69, 0x73, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64,
	0x53, 0x65, 0x6c, 0x66, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x10, 0x09, 0x22,
	0x3f, 0x0a, 0x0d, 0x43, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x41, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x2e, 0x0a, 0x11, 0x43, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x41, 0x72, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x10, 0x01,
	0x22, 0xa0, 0x04, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x02, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x61,
	0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x5a, 0x0a, 0x14, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x11, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x22, 0xeb, 0x06, 0x0a, 0x1a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x02, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x37, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x0a, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x07, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41,
	0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x12, 0x61, 0x0a, 0x16, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x16, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x14, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x14, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x14, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x67,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x53,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x17, 0x49, 0x72, 0x72, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x68,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x45, 0x71, 0x75,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x72, 0x72, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x17, 0x49, 0x72, 0x72, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x13, 0x45, 0x6e, 0x64,
	0x67, 0x75, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x6e, 0x64, 0x67, 0x75, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x13,
	0x45, 0x6e, 0x64, 0x67, 0x75, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x16, 0x49, 0x72, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x6a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x72, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x16,
	0x49, 0x72, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70,
	0x65, 0x22, 0xc4, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x98, 0x01,
	0x0a, 0x15, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x10, 0x02, 0x12,
	0x07, 0x0a, 0x03, 0x42, 0x69, 0x6e, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x10, 0x05, 0x12,
	0x0c, 0x0a, 0x08, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x06, 0x12, 0x0d, 0x0a,
	0x09, 0x49, 0x72, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a,
	0x49, 0x72, 0x72, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06,
	0x45, 0x6e, 0x64, 0x67, 0x75, 0x6e, 0x10, 0x09, 0x22, 0x69, 0x0a, 0x0d, 0x49, 0x72, 0x72, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x22, 0x58, 0x0a, 0x11, 0x49, 0x72, 0x72,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x09,
	0x0a, 0x05, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x69, 0x6e,
	0x65, 0x61, 0x72, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x69, 0x78, 0x65, 0x64, 0x5a, 0x6f,
	0x6e, 0x65, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x69, 0x6e,
	0x67, 0x47, 0x75, 0x6e, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x4d, 0x6f, 0x76,
	0x65, 0x10, 0x04, 0x22, 0x9a, 0x03, 0x0a, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x44, 0x65,
	0x70, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x44, 0x65, 0x70, 0x74, 0x68,
	0x12, 0x14, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x69, 0x0a, 0x16, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x6c, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52,
	0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e,
	0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x6c, 0x65,
	0x64, 0x12, 0x5d, 0x0a, 0x10, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6c, 0x61, 0x70, 0x73, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44,
	0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x97, 0x01, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x41,
	0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x22, 0xbb, 0x01, 0x0a, 0x0c, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x13, 0x45, 0x6e, 0x64,
	0x67, 0x75, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x47, 0x0a, 0x0d, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x6e, 0x64, 0x67, 0x75, 0x6e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x4e, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0d, 0x54, 0x61, 0x62,
	0x75, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x45, 0x6e, 0x64, 0x67, 0x75, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0d,
	0x54, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x54, 0x0a,
	0x0b, 0x45, 0x6e, 0x64, 0x67, 0x75, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x45, 0x0a, 0x0c,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x6e, 0x64, 0x67, 0x75, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x22, 0x85, 0x02, 0x0a, 0x10, 0x45, 0x6e, 0x64, 0x67, 0x75, 0x6e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x4d, 0x0a, 0x08, 0x50, 0x72, 0x65, 0x73,
	0x73, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41,
	0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x50,
	0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x4f, 0x0a, 0x09, 0x46, 0x6c, 0x6f, 0x77, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41,
	0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x46,
	0x6c, 0x6f, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x51, 0x0a, 0x0a, 0x54, 0x68, 0x72, 0x6f,
	0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41,
	0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0a, 0x54, 0x68, 0x72, 0x6f, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb4, 0x01, 0x0a, 0x16,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x02, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x31, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x31, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32,
	0x49, 0x64, 0x22, 0x8d, 0x02, 0x0a, 0x1b, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x02, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x17, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x17, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x73, 0x22, 0xc9, 0x01, 0x0a, 0x0a, 0x48, 0x69, 0x74, 0x63, 0x68, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x02, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0d, 0x48, 0x69, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x45, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x41, 0x44, 0x41,
	0x50, 0x54, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x69, 0x74,
	0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x48, 0x69, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x47, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x99,
	0x02, 0x0a, 0x09, 0x48, 0x69, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x22, 0x8b, 0x02, 0x0a,
	0x0d, 0x48, 0x69, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0a,
	0x0a, 0x06, 0x55, 0x6e, 0x6b, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x53,
	0x4f, 0x36, 0x34, 0x38, 0x39, 0x33, 0x54, 0x72, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x72, 0x61,
	0x77, 0x62, 0x61, 0x72, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x53, 0x4f, 0x37, 0x33, 0x30,
	0x54, 0x68, 0x72, 0x65, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x69, 0x74, 0x63, 0x68, 0x53,
	0x65, 0x6d, 0x69, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c,
	0x49, 0x53, 0x4f, 0x37, 0x33, 0x30, 0x54, 0x68, 0x72, 0x65, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x48, 0x69, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x10, 0x03, 0x12, 0x15,
	0x0a, 0x11, 0x49, 0x53, 0x4f, 0x36, 0x34, 0x38, 0x39, 0x31, 0x48, 0x69, 0x74, 0x63, 0x68, 0x48,
	0x6f, 0x6f, 0x6b, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x53, 0x4f, 0x36, 0x34, 0x38, 0x39,
	0x32, 0x43, 0x6c, 0x65, 0x76, 0x69, 0x73, 0x43, 0x6f, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x34,
	0x30, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x53, 0x4f, 0x36, 0x34, 0x38, 0x39, 0x34, 0x50,
	0x69, 0x74, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x67,
	0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x53, 0x4f, 0x35, 0x36, 0x39, 0x32, 0x32, 0x50, 0x69,
	0x76, 0x6f, 0x74, 0x57, 0x61, 0x67, 0x6f, 0x6e, 0x48, 0x69, 0x74, 0x63, 0x68, 0x10, 0x07, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x53, 0x4f, 0x32, 0x34, 0x33, 0x34, 0x37, 0x42, 0x61, 0x6c, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x69, 0x74, 0x63, 0x68, 0x10, 0x08, 0x22, 0xb9, 0x06, 0x0a, 0x16, 0x49,
	0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d,
	0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x55,
	0x0a, 0x0c, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d,
	0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x53, 0x70,
	0x61, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x57, 0x0a, 0x0d, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61,
	0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41,
	0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0d, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x61,
	0x0a, 0x12, 0x49, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x75, 0x72, 0x6e, 0x52, 0x61,
	0x64, 0x69, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41,
	0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x49,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x75, 0x72, 0x6e, 0x52, 0x61, 0x64, 0x69, 0x75,
	0x73, 0x12, 0x5b, 0x0a, 0x0f, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41,
	0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x49,
	0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x71,
	0x0a, 0x1a, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x75, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x45, 0x64, 0x67, 0x65, 0x5a, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72,
	0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x43,
	0x75, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x64, 0x67, 0x65, 0x5a, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x61, 0x0a, 0x12, 0x47, 0x50, 0x53, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x5a, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x12, 0x47, 0x50, 0x53, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5a, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x4b, 0x0a, 0x07, 0x59, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75,
	0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x59, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x43, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x7c, 0x0a, 0x18, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0x60, 0x0a, 0x1c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e,
	0x75, 0x6d, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x65, 0x61, 0x6e, 0x53, 0x65, 0x61, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x6f, 0x69, 0x6c, 0x53, 0x75, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x72, 0x6f, 0x70, 0x43, 0x61, 0x6e,
	0x6f, 0x70, 0x79, 0x54, 0x6f, 0x70, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x67,
	0x65, 0x72, 0x10, 0x03, 0x22, 0x57, 0x0a, 0x0c, 0x49, 0x72, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x47, 0x0a, 0x10, 0x49, 0x72, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4c,
	0x6f, 0x77, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b,
	0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x02, 0x22, 0x57, 0x0a,
	0x11, 0x49, 0x72, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x22, 0x42, 0x0a, 0x15, 0x49, 0x72, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0d, 0x0a, 0x09, 0x46,
	0x6c, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x6f,
	0x75, 0x72, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x02, 0x22, 0x40, 0x0a, 0x0a, 0x49, 0x72, 0x72, 0x46, 0x6c, 0x6f,
	0x77, 0x54, 0x61, 0x67, 0x22, 0x32, 0x0a, 0x0e, 0x49, 0x72, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x54,
	0x61, 0x67, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x68, 0x65, 0x6d, 0x69, 0x67,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x65, 0x72, 0x74, 0x69,
	0x67, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x22, 0x70, 0x0a, 0x13, 0x49, 0x72, 0x72, 0x50,
	0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x59, 0x0a, 0x17, 0x49, 0x72, 0x72, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x74,
	0x50, 0x75, 0x6d, 0x70, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x74, 0x42, 0x61, 0x73, 0x65,
	0x4f, 0x66, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x74,
	0x45, 0x6e, 0x64, 0x4f, 0x66, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x10, 0x02, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x03, 0x22, 0xb7, 0x03, 0x0a, 0x17, 0x49,
	0x72, 0x72, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0b, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x41, 0x44,
	0x41, 0x50, 0x54, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x72,
	0x72, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x53, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x57, 0x0a, 0x0d, 0x49, 0x6e, 0x6e,
	0x65, 0x72, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63,
	0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0d, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x57, 0x0a, 0x0d, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x44, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41, 0x50,
	0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x4f, 0x75,
	0x74, 0x65, 0x72, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x10, 0x53,
	0x70, 0x61, 0x74, 0x69, 0x61, 0x6c, 0x46, 0x6f, 0x6f, 0x74, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x53, 0x68,
	0x61, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f,
	0x6e, 0x52, 0x10, 0x53, 0x70, 0x61, 0x74, 0x69, 0x61, 0x6c, 0x46, 0x6f, 0x6f, 0x74, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x12, 0x5f, 0x0a, 0x11, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x45, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x11, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x45, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x65, 0x6e, 0x63, 0x79, 0x22, 0x7d, 0x0a, 0x0e, 0x49, 0x72, 0x72, 0x53, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x6b, 0x0a, 0x12, 0x49, 0x72, 0x72, 0x53, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x08, 0x0a, 0x04,
	0x53, 0x70, 0x61, 0x6e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x62, 0x6f, 0x6f,
	0x6d, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x6e, 0x64, 0x47, 0x75, 0x6e, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x43, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x57,
	0x72, 0x61, 0x70, 0x42, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69,
	0x63, 0x10, 0x06, 0x22, 0x4a, 0x0a, 0x0e, 0x49, 0x72, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x38, 0x0a, 0x07, 0x53, 0x79, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x45,
	0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x72, 0x72, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x53, 0x79, 0x73, 0x54, 0x79, 0x70, 0x65, 0x22,
	0xd1, 0x0b, 0x0a, 0x16, 0x49, 0x72, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65,
	0x73, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x72, 0x6f, 0x77, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x47, 0x72, 0x6f, 0x77, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x61, 0x72, 0x6d, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x46, 0x61, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e,
	0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x72, 0x6f, 0x70, 0x5a,
	0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x17, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12,
	0x46, 0x0a, 0x10, 0x53, 0x70, 0x61, 0x74, 0x69, 0x61, 0x6c, 0x46, 0x6f, 0x6f, 0x74, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x41, 0x44, 0x41, 0x50,
	0x54, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x6f,
	0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x52, 0x10, 0x53, 0x70, 0x61, 0x74, 0x69, 0x61, 0x6c, 0x46, 0x6f,
	0x6f, 0x74, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x0c, 0x47, 0x75, 0x69, 0x64, 0x61,
	0x6e, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x6e,
	0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x44, 0x0a, 0x0d, 0x43, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x41,
	0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x41,
	0x44, 0x41, 0x50, 0x54, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x6f, 0x72, 0x6e, 0x65, 0x72, 0x41, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x43, 0x6f,
	0x72, 0x6e, 0x65, 0x72, 0x41, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x10, 0x46,
	0x6c, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x50, 0x65, 0x64, 0x69, 0x67, 0x72, 0x65, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x72, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x10, 0x46, 0x6c, 0x6f, 0x77, 0x44,
	0x61, 0x74, 0x61, 0x50, 0x65, 0x64, 0x69, 0x67, 0x72, 0x65, 0x65, 0x12, 0x4b, 0x0a, 0x14, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x65, 0x64, 0x69, 0x67,
	0x72, 0x65, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x41, 0x44, 0x41, 0x50,
	0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x70, 0x73, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x14, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x50, 0x65, 0x64, 0x69, 0x67, 0x72, 0x65, 0x65, 0x12, 0x4b, 0x0a, 0x10, 0x54, 0x69, 0x6d, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x50, 0x65, 0x64, 0x69, 0x67, 0x72, 0x65, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x10, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x50, 0x65, 0x64,
	0x69, 0x67, 0x72, 0x65, 0x65, 0x12, 0x55, 0x0a, 0x0c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44,
	0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x36, 0x0a, 0x16,
	0x45, 0x6e, 0x64, 0x67, 0x75, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x03, 0x52, 0x16, 0x45, 0x6e,
	0x64, 0x67, 0x75, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x73, 0x12, 0x5b, 0x0a, 0x0f, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x50,
	0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0f, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72,
	0x65, 0x12, 0x50, 0x0a, 0x10, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x41, 0x44,
	0x41, 0x50, 0x54, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x72,
	0x72, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x10, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x11, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x45, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x11, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x45, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x53, 0x0a, 0x0b, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x46,
	0x6c, 0x6f, 0x77, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41, 0x50,
	0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x4e, 0x6f,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x67, 0x0a, 0x15, 0x4e, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54,
	0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x4e, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x57, 0x0a, 0x0d, 0x42, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41, 0x50,
	0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x42, 0x65,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x4e,
	0x6f, 0x74, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x41, 0x44, 0x41,
	0x50, 0x54, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x05, 0x4e,
	0x6f, 0x74, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x41, 0x44, 0x41,
	0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0x94, 0x03, 0x0a, 0x14, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x12,
	0x47, 0x70, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x58, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54,
	0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x47, 0x70, 0x73,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x58, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x61, 0x0a, 0x12, 0x47, 0x70, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x59, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44,
	0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12,
	0x47, 0x70, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x59, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x61, 0x0a, 0x12, 0x47, 0x70, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x5a, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x12, 0x47, 0x70, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5a, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x53, 0x0a, 0x12, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x41,
	0x78, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x41, 0x78, 0x6c, 0x65, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x41, 0x78,
	0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x43, 0x0a, 0x12, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x41, 0x78, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x2d, 0x0a, 0x16, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x41, 0x78, 0x6c, 0x65, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x72,
	0x6f, 0x6e, 0x74, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x65, 0x61, 0x72, 0x10, 0x01, 0x22,
	0xa9, 0x02, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x02, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x07, 0x58, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75,
	0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x58, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x4b, 0x0a, 0x07, 0x59, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72,
	0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x59, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x4b,
	0x0a, 0x07, 0x5a, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52,
	0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x07, 0x5a, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x9d, 0x02, 0x0a, 0x14,
	0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41,
	0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x53,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x57, 0x0a, 0x0d, 0x4c,
	0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72,
	0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x4c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x55, 0x0a, 0x0c, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41,
	0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x49,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x6f, 0x0a, 0x0f, 0x54,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x22, 0x5c,
	0x0a, 0x13, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x75,
	0x6d, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x10, 0x01, 0x12,
	0x0d, 0x0a, 0x09, 0x48, 0x61, 0x72, 0x64, 0x77, 0x69, 0x72, 0x65, 0x64, 0x10, 0x02, 0x12, 0x11,
	0x0a, 0x0d, 0x43, 0x65, 0x6c, 0x6c, 0x75, 0x6c, 0x61, 0x72, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x10,
	0x03, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x10, 0x04, 0x22, 0xab, 0x01, 0x0a,
	0x0e, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22,
	0x98, 0x01, 0x0a, 0x12, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x50, 0x53, 0x4f, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x4f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x01, 0x12, 0x1d,
	0x0a, 0x19, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x4f, 0x6e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x1d, 0x0a,
	0x19, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x4f, 0x6e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b,
	0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x10, 0x04, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x05, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x61, 0x6c, 0x74, 0x65, 0x67, 0x72,
	0x6f, 0x73, 0x73, 0x65, 0x2f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x2d, 0x67, 0x6f, 0x2f, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_Equipment_proto_rawDescOnce sync.Once
	file_Equipment_proto_rawDescData = file_Equipment_proto_rawDesc
)

func file_Equipment_proto_rawDescGZIP() []byte {
	file_Equipment_proto_rawDescOnce.Do(func() {
		file_Equipment_proto_rawDescData = protoimpl.X.CompressGZIP(file_Equipment_proto_rawDescData)
	})
	return file_Equipment_proto_rawDescData
}

var file_Equipment_proto_enumTypes = make([]protoimpl.EnumInfo, 14)
var file_Equipment_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_Equipment_proto_goTypes = []interface{}{
	(ConnectorType_ConnectorTypeEnum)(0),                       // 0: ADAPT.Equipment.ConnectorType.ConnectorTypeEnum
	(CornerArmType_CornerArmTypeEnum)(0),                       // 1: ADAPT.Equipment.CornerArmType.CornerArmTypeEnum
	(DeviceElementType_DeviceElementTypeEnum)(0),               // 2: ADAPT.Equipment.DeviceElementType.DeviceElementTypeEnum
	(IrrSystemType_IrrSystemTypeEnum)(0),                       // 3: ADAPT.Equipment.IrrSystemType.IrrSystemTypeEnum
	(HitchType_HitchTypeEnum)(0),                               // 4: ADAPT.Equipment.HitchType.HitchTypeEnum
	(InstallationDisplacement_InstallationDisplacementEnum)(0), // 5: ADAPT.Equipment.InstallationDisplacement.InstallationDisplacementEnum
	(IrrErrorCode_IrrErrorCodeEnum)(0),                         // 6: ADAPT.Equipment.IrrErrorCode.IrrErrorCodeEnum
	(IrrFlowDataSource_IrrFlowDataSourceEnum)(0),               // 7: ADAPT.Equipment.IrrFlowDataSource.IrrFlowDataSourceEnum
	(IrrFlowTag_IrrFlowTagEnum)(0),                             // 8: ADAPT.Equipment.IrrFlowTag.IrrFlowTagEnum
	(IrrPressureLocation_IrrPressureLocationEnum)(0),           // 9: ADAPT.Equipment.IrrPressureLocation.IrrPressureLocationEnum
	(IrrSectionType_IrrSectionTypeEnum)(0),                     // 10: ADAPT.Equipment.IrrSectionType.IrrSectionTypeEnum
	(OriginAxleLocation_OriginAxleLocationEnum)(0),             // 11: ADAPT.Equipment.OriginAxleLocation.OriginAxleLocationEnum
	(TelemetryMedium_TelemetryMediumEnum)(0),                   // 12: ADAPT.Equipment.TelemetryMedium.TelemetryMediumEnum
	(TimeDataSource_TimeDataSourceEnum)(0),                     // 13: ADAPT.Equipment.TimeDataSource.TimeDataSourceEnum
	(*Connector)(nil),                                          // 14: ADAPT.Equipment.Connector
	(*ConnectorType)(nil),                                      // 15: ADAPT.Equipment.ConnectorType
	(*CornerArmType)(nil),                                      // 16: ADAPT.Equipment.CornerArmType
	(*DeviceElement)(nil),                                      // 17: ADAPT.Equipment.DeviceElement
	(*DeviceElementConfiguration)(nil),                         // 18: ADAPT.Equipment.DeviceElementConfiguration
	(*DeviceElementType)(nil),                                  // 19: ADAPT.Equipment.DeviceElementType
	(*IrrSystemType)(nil),                                      // 20: ADAPT.Equipment.IrrSystemType
	(*DeviceElementUse)(nil),                                   // 21: ADAPT.Equipment.DeviceElementUse
	(*DeviceModel)(nil),                                        // 22: ADAPT.Equipment.DeviceModel
	(*DeviceSeries)(nil),                                       // 23: ADAPT.Equipment.DeviceSeries
	(*EndgunConfiguration)(nil),                                // 24: ADAPT.Equipment.EndgunConfiguration
	(*EndgunTable)(nil),                                        // 25: ADAPT.Equipment.EndgunTable
	(*EndgunTableEntry)(nil),                                   // 26: ADAPT.Equipment.EndgunTableEntry
	(*EquipmentConfiguration)(nil),                             // 27: ADAPT.Equipment.EquipmentConfiguration
	(*EquipmentConfigurationGroup)(nil),                        // 28: ADAPT.Equipment.EquipmentConfigurationGroup
	(*HitchPoint)(nil),                                         // 29: ADAPT.Equipment.HitchPoint
	(*HitchType)(nil),                                          // 30: ADAPT.Equipment.HitchType
	(*ImplementConfiguration)(nil),                             // 31: ADAPT.Equipment.ImplementConfiguration
	(*InstallationDisplacement)(nil),                           // 32: ADAPT.Equipment.InstallationDisplacement
	(*IrrErrorCode)(nil),                                       // 33: ADAPT.Equipment.IrrErrorCode
	(*IrrFlowDataSource)(nil),                                  // 34: ADAPT.Equipment.IrrFlowDataSource
	(*IrrFlowTag)(nil),                                         // 35: ADAPT.Equipment.IrrFlowTag
	(*IrrPressureLocation)(nil),                                // 36: ADAPT.Equipment.IrrPressureLocation
	(*IrrSectionConfiguration)(nil),                            // 37: ADAPT.Equipment.IrrSectionConfiguration
	(*IrrSectionType)(nil),                                     // 38: ADAPT.Equipment.IrrSectionType
	(*IrrSystemModel)(nil),                                     // 39: ADAPT.Equipment.IrrSystemModel
	(*IrrSystemConfiguration)(nil),                             // 40: ADAPT.Equipment.IrrSystemConfiguration
	(*MachineConfiguration)(nil),                               // 41: ADAPT.Equipment.MachineConfiguration
	(*OriginAxleLocation)(nil),                                 // 42: ADAPT.Equipment.OriginAxleLocation
	(*ReferencePoint)(nil),                                     // 43: ADAPT.Equipment.ReferencePoint
	(*SectionConfiguration)(nil),                               // 44: ADAPT.Equipment.SectionConfiguration
	(*TelemetryMedium)(nil),                                    // 45: ADAPT.Equipment.TelemetryMedium
	(*TimeDataSource)(nil),                                     // 46: ADAPT.Equipment.TimeDataSource
	(*Common.CompoundIdentifier)(nil),                          // 47: ADAPT.Common.CompoundIdentifier
	(*Common.ContextItem)(nil),                                 // 48: ADAPT.Common.ContextItem
	(*Representations.EnumeratedValue)(nil),                    // 49: ADAPT.Representations.EnumeratedValue
	(*Common.TimeScope)(nil),                                   // 50: ADAPT.Common.TimeScope
	(*Representations.NumericRepresentationValue)(nil),         // 51: ADAPT.Representations.NumericRepresentationValue
	(*Shapes.MultiPolygon)(nil),                                // 52: ADAPT.Shapes.MultiPolygon
	(*Shapes.Point)(nil),                                       // 53: ADAPT.Shapes.Point
	(*Shapes.LineString)(nil),                                  // 54: ADAPT.Shapes.LineString
	(*Common.GpsSource)(nil),                                   // 55: ADAPT.Common.GpsSource
	(*Notes.Note)(nil),                                         // 56: ADAPT.Notes.Note
}
var file_Equipment_proto_depIdxs = []int32{
	47, // 0: ADAPT.Equipment.Connector.Id:type_name -> ADAPT.Common.CompoundIdentifier
	47, // 1: ADAPT.Equipment.DeviceElement.Id:type_name -> ADAPT.Common.CompoundIdentifier
	48, // 2: ADAPT.Equipment.DeviceElement.ContextItems:type_name -> ADAPT.Common.ContextItem
	49, // 3: ADAPT.Equipment.DeviceElement.DeviceClassification:type_name -> ADAPT.Representations.EnumeratedValue
	19, // 4: ADAPT.Equipment.DeviceElement.DeviceElementType:type_name -> ADAPT.Equipment.DeviceElementType
	47, // 5: ADAPT.Equipment.DeviceElementConfiguration.Id:type_name -> ADAPT.Common.CompoundIdentifier
	50, // 6: ADAPT.Equipment.DeviceElementConfiguration.TimeScopes:type_name -> ADAPT.Common.TimeScope
	51, // 7: ADAPT.Equipment.DeviceElementConfiguration.Offsets:type_name -> ADAPT.Representations.NumericRepresentationValue
	31, // 8: ADAPT.Equipment.DeviceElementConfiguration.ImplementConfiguration:type_name -> ADAPT.Equipment.ImplementConfiguration
	41, // 9: ADAPT.Equipment.DeviceElementConfiguration.MachineConfiguration:type_name -> ADAPT.Equipment.MachineConfiguration
	44, // 10: ADAPT.Equipment.DeviceElementConfiguration.SectionConfiguration:type_name -> ADAPT.Equipment.SectionConfiguration
	37, // 11: ADAPT.Equipment.DeviceElementConfiguration.IrrSectionConfiguration:type_name -> ADAPT.Equipment.IrrSectionConfiguration
	24, // 12: ADAPT.Equipment.DeviceElementConfiguration.EndgunConfiguration:type_name -> ADAPT.Equipment.EndgunConfiguration
	40, // 13: ADAPT.Equipment.DeviceElementConfiguration.IrrSystemConfiguration:type_name -> ADAPT.Equipment.IrrSystemConfiguration
	47, // 14: ADAPT.Equipment.DeviceElementUse.Id:type_name -> ADAPT.Common.CompoundIdentifier
	51, // 15: ADAPT.Equipment.DeviceElementUse.TotalDistanceTravelled:type_name -> ADAPT.Representations.NumericRepresentationValue
	51, // 16: ADAPT.Equipment.DeviceElementUse.TotalElapsedTime:type_name -> ADAPT.Representations.NumericRepresentationValue
	47, // 17: ADAPT.Equipment.DeviceModel.Id:type_name -> ADAPT.Common.CompoundIdentifier
	47, // 18: ADAPT.Equipment.DeviceSeries.Id:type_name -> ADAPT.Common.CompoundIdentifier
	48, // 19: ADAPT.Equipment.DeviceSeries.ContextItems:type_name -> ADAPT.Common.ContextItem
	26, // 20: ADAPT.Equipment.EndgunConfiguration.NominalValues:type_name -> ADAPT.Equipment.EndgunTableEntry
	25, // 21: ADAPT.Equipment.EndgunConfiguration.TabularValues:type_name -> ADAPT.Equipment.EndgunTable
	26, // 22: ADAPT.Equipment.EndgunTable.TableEntries:type_name -> ADAPT.Equipment.EndgunTableEntry
	51, // 23: ADAPT.Equipment.EndgunTableEntry.Pressure:type_name -> ADAPT.Representations.NumericRepresentationValue
	51, // 24: ADAPT.Equipment.EndgunTableEntry.FlowValue:type_name -> ADAPT.Representations.NumericRepresentationValue
	51, // 25: ADAPT.Equipment.EndgunTableEntry.ThrowValue:type_name -> ADAPT.Representations.NumericRepresentationValue
	47, // 26: ADAPT.Equipment.EquipmentConfiguration.Id:type_name -> ADAPT.Common.CompoundIdentifier
	47, // 27: ADAPT.Equipment.EquipmentConfigurationGroup.Id:type_name -> ADAPT.Common.CompoundIdentifier
	27, // 28: ADAPT.Equipment.EquipmentConfigurationGroup.EquipmentConfigurations:type_name -> ADAPT.Equipment.EquipmentConfiguration
	50, // 29: ADAPT.Equipment.EquipmentConfigurationGroup.TimeScopes:type_name -> ADAPT.Common.TimeScope
	47, // 30: ADAPT.Equipment.HitchPoint.Id:type_name -> ADAPT.Common.CompoundIdentifier
	30, // 31: ADAPT.Equipment.HitchPoint.HitchTypeEnum:type_name -> ADAPT.Equipment.HitchType
	43, // 32: ADAPT.Equipment.HitchPoint.ReferencePoint:type_name -> ADAPT.Equipment.ReferencePoint
	51, // 33: ADAPT.Equipment.ImplementConfiguration.Width:type_name -> ADAPT.Representations.NumericRepresentationValue
	51, // 34: ADAPT.Equipment.ImplementConfiguration.TrackSpacing:type_name -> ADAPT.Representations.NumericRepresentationValue
	51, // 35: ADAPT.Equipment.ImplementConfiguration.PhysicalWidth:type_name -> ADAPT.Representations.NumericRepresentationValue
	51, // 36: ADAPT.Equipment.ImplementConfiguration.InGroundTurnRadius:type_name -> ADAPT.Representations.NumericRepresentationValue
	51, // 37: ADAPT.Equipment.ImplementConfiguration.ImplementLength:type_name -> ADAPT.Representations.NumericRepresentationValue
	51, // 38: ADAPT.Equipment.ImplementConfiguration.VerticalCuttingEdgeZOffset:type_name -> ADAPT.Representations.NumericRepresentationValue
	51, // 39: ADAPT.Equipment.ImplementConfiguration.GPSReceiverZOffset:type_name -> ADAPT.Representations.NumericRepresentationValue
	51, // 40: ADAPT.Equipment.ImplementConfiguration.YOffset:type_name -> ADAPT.Representations.NumericRepresentationValue
	43, // 41: ADAPT.Equipment.ImplementConfiguration.ControlPoint:type_name -> ADAPT.Equipment.ReferencePoint
	38, // 42: ADAPT.Equipment.IrrSectionConfiguration.SectionType:type_name -> ADAPT.Equipment.IrrSectionType
	51, // 43: ADAPT.Equipment.IrrSectionConfiguration.InnerDistance:type_name -> ADAPT.Representations.NumericRepresentationValue
	51, // 44: ADAPT.Equipment.IrrSectionConfiguration.OuterDistance:type_name -> ADAPT.Representations.NumericRepresentationValue
	52, // 45: ADAPT.Equipment.IrrSectionConfiguration.SpatialFootprint:type_name -> ADAPT.Shapes.MultiPolygon
	51, // 46: ADAPT.Equipment.IrrSectionConfiguration.NominalEfficiency:type_name -> ADAPT.Representations.NumericRepresentationValue
	20, // 47: ADAPT.Equipment.IrrSystemModel.SysType:type_name -> ADAPT.Equipment.IrrSystemType
	53, // 48: ADAPT.Equipment.IrrSystemConfiguration.SystemPosition:type_name -> ADAPT.Shapes.Point
	52, // 49: ADAPT.Equipment.IrrSystemConfiguration.SpatialFootprint:type_name -> ADAPT.Shapes.MultiPolygon
	54, // 50: ADAPT.Equipment.IrrSystemConfiguration.GuidancePath:type_name -> ADAPT.Shapes.LineString
	16, // 51: ADAPT.Equipment.IrrSystemConfiguration.CornerArmType:type_name -> ADAPT.Equipment.CornerArmType
	34, // 52: ADAPT.Equipment.IrrSystemConfiguration.FlowDataPedigree:type_name -> ADAPT.Equipment.IrrFlowDataSource
	55, // 53: ADAPT.Equipment.IrrSystemConfiguration.PositionDataPedigree:type_name -> ADAPT.Common.GpsSource
	46, // 54: ADAPT.Equipment.IrrSystemConfiguration.TimeDataPedigree:type_name -> ADAPT.Equipment.TimeDataSource
	51, // 55: ADAPT.Equipment.IrrSystemConfiguration.SystemLength:type_name -> ADAPT.Representations.NumericRepresentationValue
	51, // 56: ADAPT.Equipment.IrrSystemConfiguration.NominalPressure:type_name -> ADAPT.Representations.NumericRepresentationValue
	36, // 57: ADAPT.Equipment.IrrSystemConfiguration.PressureLocation:type_name -> ADAPT.Equipment.IrrPressureLocation
	51, // 58: ADAPT.Equipment.IrrSystemConfiguration.NominalEfficiency:type_name -> ADAPT.Representations.NumericRepresentationValue
	51, // 59: ADAPT.Equipment.IrrSystemConfiguration.NominalFlow:type_name -> ADAPT.Representations.NumericRepresentationValue
	51, // 60: ADAPT.Equipment.IrrSystemConfiguration.NominalFullCircleTime:type_name -> ADAPT.Representations.NumericRepresentationValue
	51, // 61: ADAPT.Equipment.IrrSystemConfiguration.BearingOffset:type_name -> ADAPT.Representations.NumericRepresentationValue
	56, // 62: ADAPT.Equipment.IrrSystemConfiguration.Notes:type_name -> ADAPT.Notes.Note
	48, // 63: ADAPT.Equipment.IrrSystemConfiguration.ContextItems:type_name -> ADAPT.Common.ContextItem
	51, // 64: ADAPT.Equipment.MachineConfiguration.GpsReceiverXOffset:type_name -> ADAPT.Representations.NumericRepresentationValue
	51, // 65: ADAPT.Equipment.MachineConfiguration.GpsReceiverYOffset:type_name -> ADAPT.Representations.NumericRepresentationValue
	51, // 66: ADAPT.Equipment.MachineConfiguration.GpsReceiverZOffset:type_name -> ADAPT.Representations.NumericRepresentationValue
	42, // 67: ADAPT.Equipment.MachineConfiguration.OriginAxleLocation:type_name -> ADAPT.Equipment.OriginAxleLocation
	47, // 68: ADAPT.Equipment.ReferencePoint.Id:type_name -> ADAPT.Common.CompoundIdentifier
	51, // 69: ADAPT.Equipment.ReferencePoint.XOffset:type_name -> ADAPT.Representations.NumericRepresentationValue
	51, // 70: ADAPT.Equipment.ReferencePoint.YOffset:type_name -> ADAPT.Representations.NumericRepresentationValue
	51, // 71: ADAPT.Equipment.ReferencePoint.ZOffset:type_name -> ADAPT.Representations.NumericRepresentationValue
	51, // 72: ADAPT.Equipment.SectionConfiguration.SectionWidth:type_name -> ADAPT.Representations.NumericRepresentationValue
	51, // 73: ADAPT.Equipment.SectionConfiguration.LateralOffset:type_name -> ADAPT.Representations.NumericRepresentationValue
	51, // 74: ADAPT.Equipment.SectionConfiguration.InlineOffset:type_name -> ADAPT.Representations.NumericRepresentationValue
	75, // [75:75] is the sub-list for method output_type
	75, // [75:75] is the sub-list for method input_type
	75, // [75:75] is the sub-list for extension type_name
	75, // [75:75] is the sub-list for extension extendee
	0,  // [0:75] is the sub-list for field type_name
}

func init() { file_Equipment_proto_init() }
func file_Equipment_proto_init() {
	if File_Equipment_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_Equipment_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Connector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Equipment_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectorType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Equipment_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CornerArmType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Equipment_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Equipment_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceElementConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Equipment_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceElementType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Equipment_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrrSystemType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Equipment_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceElementUse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Equipment_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Equipment_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceSeries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Equipment_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndgunConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Equipment_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndgunTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Equipment_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndgunTableEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Equipment_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipmentConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Equipment_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipmentConfigurationGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Equipment_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HitchPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Equipment_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HitchType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Equipment_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImplementConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Equipment_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstallationDisplacement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Equipment_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrrErrorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Equipment_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrrFlowDataSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Equipment_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrrFlowTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Equipment_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrrPressureLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Equipment_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrrSectionConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Equipment_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrrSectionType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Equipment_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrrSystemModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Equipment_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrrSystemConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Equipment_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Equipment_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OriginAxleLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Equipment_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferencePoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Equipment_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SectionConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Equipment_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetryMedium); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Equipment_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeDataSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_Equipment_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*DeviceElementConfiguration_ImplementConfiguration)(nil),
		(*DeviceElementConfiguration_MachineConfiguration)(nil),
		(*DeviceElementConfiguration_SectionConfiguration)(nil),
		(*DeviceElementConfiguration_IrrSectionConfiguration)(nil),
		(*DeviceElementConfiguration_EndgunConfiguration)(nil),
		(*DeviceElementConfiguration_IrrSystemConfiguration)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Equipment_proto_rawDesc,
			NumEnums:      14,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Equipment_proto_goTypes,
		DependencyIndexes: file_Equipment_proto_depIdxs,
		EnumInfos:         file_Equipment_proto_enumTypes,
		MessageInfos:      file_Equipment_proto_msgTypes,
	}.Build()
	File_Equipment_proto = out.File
	file_Equipment_proto_rawDesc = nil
	file_Equipment_proto_goTypes = nil
	file_Equipment_proto_depIdxs = nil
}
