// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.19.6
// source: ReferenceLayers.proto

package ReferenceLayers

import (
	Common "github.com/maltegrosse/adapt-go/Common"
	Representations "github.com/maltegrosse/adapt-go/Representations"
	Shapes "github.com/maltegrosse/adapt-go/Shapes"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReferenceLayerType_ReferenceLayerTypeEnum int32

const (
	ReferenceLayerType_BackgroundImage ReferenceLayerType_ReferenceLayerTypeEnum = 0
	ReferenceLayerType_CommonLandUnit  ReferenceLayerType_ReferenceLayerTypeEnum = 1
	ReferenceLayerType_ElevationMap    ReferenceLayerType_ReferenceLayerTypeEnum = 2
	ReferenceLayerType_ManagementZone  ReferenceLayerType_ReferenceLayerTypeEnum = 3
	ReferenceLayerType_Obstacles       ReferenceLayerType_ReferenceLayerTypeEnum = 4
	ReferenceLayerType_ProfitMap       ReferenceLayerType_ReferenceLayerTypeEnum = 5
	ReferenceLayerType_SoilTypeMap     ReferenceLayerType_ReferenceLayerTypeEnum = 6
	ReferenceLayerType_VarietyLocator  ReferenceLayerType_ReferenceLayerTypeEnum = 7
)

// Enum value maps for ReferenceLayerType_ReferenceLayerTypeEnum.
var (
	ReferenceLayerType_ReferenceLayerTypeEnum_name = map[int32]string{
		0: "BackgroundImage",
		1: "CommonLandUnit",
		2: "ElevationMap",
		3: "ManagementZone",
		4: "Obstacles",
		5: "ProfitMap",
		6: "SoilTypeMap",
		7: "VarietyLocator",
	}
	ReferenceLayerType_ReferenceLayerTypeEnum_value = map[string]int32{
		"BackgroundImage": 0,
		"CommonLandUnit":  1,
		"ElevationMap":    2,
		"ManagementZone":  3,
		"Obstacles":       4,
		"ProfitMap":       5,
		"SoilTypeMap":     6,
		"VarietyLocator":  7,
	}
)

func (x ReferenceLayerType_ReferenceLayerTypeEnum) Enum() *ReferenceLayerType_ReferenceLayerTypeEnum {
	p := new(ReferenceLayerType_ReferenceLayerTypeEnum)
	*p = x
	return p
}

func (x ReferenceLayerType_ReferenceLayerTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReferenceLayerType_ReferenceLayerTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_ReferenceLayers_proto_enumTypes[0].Descriptor()
}

func (ReferenceLayerType_ReferenceLayerTypeEnum) Type() protoreflect.EnumType {
	return &file_ReferenceLayers_proto_enumTypes[0]
}

func (x ReferenceLayerType_ReferenceLayerTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReferenceLayerType_ReferenceLayerTypeEnum.Descriptor instead.
func (ReferenceLayerType_ReferenceLayerTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_ReferenceLayers_proto_rawDescGZIP(), []int{6, 0}
}

type RasterData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Representation *Representations.Representation `protobuf:"bytes,1,opt,name=Representation,proto3" json:"Representation,omitempty"`
	// Types that are assignable to Subtype:
	//
	//	*RasterData_RasterDataEnumeratedRepresentation
	//	*RasterData_RasterDataNumericRepresentation
	//	*RasterData_RasterDataStringRepresentation
	Subtype isRasterData_Subtype `protobuf_oneof:"subtype"`
}

func (x *RasterData) Reset() {
	*x = RasterData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ReferenceLayers_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RasterData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RasterData) ProtoMessage() {}

func (x *RasterData) ProtoReflect() protoreflect.Message {
	mi := &file_ReferenceLayers_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RasterData.ProtoReflect.Descriptor instead.
func (*RasterData) Descriptor() ([]byte, []int) {
	return file_ReferenceLayers_proto_rawDescGZIP(), []int{0}
}

func (x *RasterData) GetRepresentation() *Representations.Representation {
	if x != nil {
		return x.Representation
	}
	return nil
}

func (m *RasterData) GetSubtype() isRasterData_Subtype {
	if m != nil {
		return m.Subtype
	}
	return nil
}

func (x *RasterData) GetRasterDataEnumeratedRepresentation() *RasterDataEnumeratedRepresentation {
	if x, ok := x.GetSubtype().(*RasterData_RasterDataEnumeratedRepresentation); ok {
		return x.RasterDataEnumeratedRepresentation
	}
	return nil
}

func (x *RasterData) GetRasterDataNumericRepresentation() *RasterDataNumericRepresentation {
	if x, ok := x.GetSubtype().(*RasterData_RasterDataNumericRepresentation); ok {
		return x.RasterDataNumericRepresentation
	}
	return nil
}

func (x *RasterData) GetRasterDataStringRepresentation() *RasterDataStringRepresentation {
	if x, ok := x.GetSubtype().(*RasterData_RasterDataStringRepresentation); ok {
		return x.RasterDataStringRepresentation
	}
	return nil
}

type isRasterData_Subtype interface {
	isRasterData_Subtype()
}

type RasterData_RasterDataEnumeratedRepresentation struct {
	RasterDataEnumeratedRepresentation *RasterDataEnumeratedRepresentation `protobuf:"bytes,101,opt,name=RasterDataEnumeratedRepresentation,proto3,oneof"`
}

type RasterData_RasterDataNumericRepresentation struct {
	RasterDataNumericRepresentation *RasterDataNumericRepresentation `protobuf:"bytes,102,opt,name=RasterDataNumericRepresentation,proto3,oneof"`
}

type RasterData_RasterDataStringRepresentation struct {
	RasterDataStringRepresentation *RasterDataStringRepresentation `protobuf:"bytes,103,opt,name=RasterDataStringRepresentation,proto3,oneof"`
}

func (*RasterData_RasterDataEnumeratedRepresentation) isRasterData_Subtype() {}

func (*RasterData_RasterDataNumericRepresentation) isRasterData_Subtype() {}

func (*RasterData_RasterDataStringRepresentation) isRasterData_Subtype() {}

type RasterDataEnumeratedRepresentation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*Representations.EnumeratedValue `protobuf:"bytes,1,rep,name=Values,proto3" json:"Values,omitempty"`
}

func (x *RasterDataEnumeratedRepresentation) Reset() {
	*x = RasterDataEnumeratedRepresentation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ReferenceLayers_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RasterDataEnumeratedRepresentation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RasterDataEnumeratedRepresentation) ProtoMessage() {}

func (x *RasterDataEnumeratedRepresentation) ProtoReflect() protoreflect.Message {
	mi := &file_ReferenceLayers_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RasterDataEnumeratedRepresentation.ProtoReflect.Descriptor instead.
func (*RasterDataEnumeratedRepresentation) Descriptor() ([]byte, []int) {
	return file_ReferenceLayers_proto_rawDescGZIP(), []int{1}
}

func (x *RasterDataEnumeratedRepresentation) GetValues() []*Representations.EnumeratedValue {
	if x != nil {
		return x.Values
	}
	return nil
}

type RasterDataNumericRepresentation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*Representations.NumericRepresentationValue `protobuf:"bytes,1,rep,name=Values,proto3" json:"Values,omitempty"`
}

func (x *RasterDataNumericRepresentation) Reset() {
	*x = RasterDataNumericRepresentation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ReferenceLayers_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RasterDataNumericRepresentation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RasterDataNumericRepresentation) ProtoMessage() {}

func (x *RasterDataNumericRepresentation) ProtoReflect() protoreflect.Message {
	mi := &file_ReferenceLayers_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RasterDataNumericRepresentation.ProtoReflect.Descriptor instead.
func (*RasterDataNumericRepresentation) Descriptor() ([]byte, []int) {
	return file_ReferenceLayers_proto_rawDescGZIP(), []int{2}
}

func (x *RasterDataNumericRepresentation) GetValues() []*Representations.NumericRepresentationValue {
	if x != nil {
		return x.Values
	}
	return nil
}

type RasterDataStringRepresentation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*Representations.StringValue `protobuf:"bytes,1,rep,name=Values,proto3" json:"Values,omitempty"`
}

func (x *RasterDataStringRepresentation) Reset() {
	*x = RasterDataStringRepresentation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ReferenceLayers_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RasterDataStringRepresentation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RasterDataStringRepresentation) ProtoMessage() {}

func (x *RasterDataStringRepresentation) ProtoReflect() protoreflect.Message {
	mi := &file_ReferenceLayers_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RasterDataStringRepresentation.ProtoReflect.Descriptor instead.
func (*RasterDataStringRepresentation) Descriptor() ([]byte, []int) {
	return file_ReferenceLayers_proto_rawDescGZIP(), []int{3}
}

func (x *RasterDataStringRepresentation) GetValues() []*Representations.StringValue {
	if x != nil {
		return x.Values
	}
	return nil
}

type ReferenceLayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              *Common.CompoundIdentifier `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Description     string                     `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	LayerType       *ReferenceLayerType        `protobuf:"bytes,3,opt,name=LayerType,proto3" json:"LayerType,omitempty"`
	TimeScopes      []*Common.TimeScope        `protobuf:"bytes,4,rep,name=TimeScopes,proto3" json:"TimeScopes,omitempty"`
	BoundingPolygon *Shapes.Polygon            `protobuf:"bytes,5,opt,name=BoundingPolygon,proto3" json:"BoundingPolygon,omitempty"`
	ContextItems    []*Common.ContextItem      `protobuf:"bytes,6,rep,name=ContextItems,proto3" json:"ContextItems,omitempty"`
	FieldIds        []int64                    `protobuf:"varint,7,rep,packed,name=FieldIds,proto3" json:"FieldIds,omitempty"`
	CropZoneIds     []int64                    `protobuf:"varint,8,rep,packed,name=CropZoneIds,proto3" json:"CropZoneIds,omitempty"`
	// Types that are assignable to Subtype:
	//
	//	*ReferenceLayer_RasterReferenceLayer
	//	*ReferenceLayer_ShapeReferenceLayer
	Subtype isReferenceLayer_Subtype `protobuf_oneof:"subtype"`
}

func (x *ReferenceLayer) Reset() {
	*x = ReferenceLayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ReferenceLayers_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceLayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceLayer) ProtoMessage() {}

func (x *ReferenceLayer) ProtoReflect() protoreflect.Message {
	mi := &file_ReferenceLayers_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceLayer.ProtoReflect.Descriptor instead.
func (*ReferenceLayer) Descriptor() ([]byte, []int) {
	return file_ReferenceLayers_proto_rawDescGZIP(), []int{4}
}

func (x *ReferenceLayer) GetId() *Common.CompoundIdentifier {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ReferenceLayer) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ReferenceLayer) GetLayerType() *ReferenceLayerType {
	if x != nil {
		return x.LayerType
	}
	return nil
}

func (x *ReferenceLayer) GetTimeScopes() []*Common.TimeScope {
	if x != nil {
		return x.TimeScopes
	}
	return nil
}

func (x *ReferenceLayer) GetBoundingPolygon() *Shapes.Polygon {
	if x != nil {
		return x.BoundingPolygon
	}
	return nil
}

func (x *ReferenceLayer) GetContextItems() []*Common.ContextItem {
	if x != nil {
		return x.ContextItems
	}
	return nil
}

func (x *ReferenceLayer) GetFieldIds() []int64 {
	if x != nil {
		return x.FieldIds
	}
	return nil
}

func (x *ReferenceLayer) GetCropZoneIds() []int64 {
	if x != nil {
		return x.CropZoneIds
	}
	return nil
}

func (m *ReferenceLayer) GetSubtype() isReferenceLayer_Subtype {
	if m != nil {
		return m.Subtype
	}
	return nil
}

func (x *ReferenceLayer) GetRasterReferenceLayer() *RasterReferenceLayer {
	if x, ok := x.GetSubtype().(*ReferenceLayer_RasterReferenceLayer); ok {
		return x.RasterReferenceLayer
	}
	return nil
}

func (x *ReferenceLayer) GetShapeReferenceLayer() *ShapeReferenceLayer {
	if x, ok := x.GetSubtype().(*ReferenceLayer_ShapeReferenceLayer); ok {
		return x.ShapeReferenceLayer
	}
	return nil
}

type isReferenceLayer_Subtype interface {
	isReferenceLayer_Subtype()
}

type ReferenceLayer_RasterReferenceLayer struct {
	RasterReferenceLayer *RasterReferenceLayer `protobuf:"bytes,101,opt,name=RasterReferenceLayer,proto3,oneof"`
}

type ReferenceLayer_ShapeReferenceLayer struct {
	ShapeReferenceLayer *ShapeReferenceLayer `protobuf:"bytes,102,opt,name=ShapeReferenceLayer,proto3,oneof"`
}

func (*ReferenceLayer_RasterReferenceLayer) isReferenceLayer_Subtype() {}

func (*ReferenceLayer_ShapeReferenceLayer) isReferenceLayer_Subtype() {}

type RasterReferenceLayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Origin      *Shapes.Shape                               `protobuf:"bytes,1,opt,name=Origin,proto3" json:"Origin,omitempty"`
	RowCount    int64                                       `protobuf:"varint,2,opt,name=RowCount,proto3" json:"RowCount,omitempty"`
	ColumnCount int64                                       `protobuf:"varint,3,opt,name=ColumnCount,proto3" json:"ColumnCount,omitempty"`
	CellWidth   *Representations.NumericRepresentationValue `protobuf:"bytes,4,opt,name=CellWidth,proto3" json:"CellWidth,omitempty"`
	CellHeight  *Representations.NumericRepresentationValue `protobuf:"bytes,5,opt,name=CellHeight,proto3" json:"CellHeight,omitempty"`
	RasterData  []*RasterData                               `protobuf:"bytes,6,rep,name=RasterData,proto3" json:"RasterData,omitempty"`
}

func (x *RasterReferenceLayer) Reset() {
	*x = RasterReferenceLayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ReferenceLayers_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RasterReferenceLayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RasterReferenceLayer) ProtoMessage() {}

func (x *RasterReferenceLayer) ProtoReflect() protoreflect.Message {
	mi := &file_ReferenceLayers_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RasterReferenceLayer.ProtoReflect.Descriptor instead.
func (*RasterReferenceLayer) Descriptor() ([]byte, []int) {
	return file_ReferenceLayers_proto_rawDescGZIP(), []int{5}
}

func (x *RasterReferenceLayer) GetOrigin() *Shapes.Shape {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *RasterReferenceLayer) GetRowCount() int64 {
	if x != nil {
		return x.RowCount
	}
	return 0
}

func (x *RasterReferenceLayer) GetColumnCount() int64 {
	if x != nil {
		return x.ColumnCount
	}
	return 0
}

func (x *RasterReferenceLayer) GetCellWidth() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.CellWidth
	}
	return nil
}

func (x *RasterReferenceLayer) GetCellHeight() *Representations.NumericRepresentationValue {
	if x != nil {
		return x.CellHeight
	}
	return nil
}

func (x *RasterReferenceLayer) GetRasterData() []*RasterData {
	if x != nil {
		return x.RasterData
	}
	return nil
}

type ReferenceLayerType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReferenceLayerType) Reset() {
	*x = ReferenceLayerType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ReferenceLayers_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceLayerType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceLayerType) ProtoMessage() {}

func (x *ReferenceLayerType) ProtoReflect() protoreflect.Message {
	mi := &file_ReferenceLayers_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceLayerType.ProtoReflect.Descriptor instead.
func (*ReferenceLayerType) Descriptor() ([]byte, []int) {
	return file_ReferenceLayers_proto_rawDescGZIP(), []int{6}
}

type ShapeLookup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shape            *Shapes.Shape     `protobuf:"bytes,1,opt,name=Shape,proto3" json:"Shape,omitempty"`
	SpatialAttribute *SpatialAttribute `protobuf:"bytes,2,opt,name=SpatialAttribute,proto3" json:"SpatialAttribute,omitempty"`
}

func (x *ShapeLookup) Reset() {
	*x = ShapeLookup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ReferenceLayers_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShapeLookup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShapeLookup) ProtoMessage() {}

func (x *ShapeLookup) ProtoReflect() protoreflect.Message {
	mi := &file_ReferenceLayers_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShapeLookup.ProtoReflect.Descriptor instead.
func (*ShapeLookup) Descriptor() ([]byte, []int) {
	return file_ReferenceLayers_proto_rawDescGZIP(), []int{7}
}

func (x *ShapeLookup) GetShape() *Shapes.Shape {
	if x != nil {
		return x.Shape
	}
	return nil
}

func (x *ShapeLookup) GetSpatialAttribute() *SpatialAttribute {
	if x != nil {
		return x.SpatialAttribute
	}
	return nil
}

type SpatialAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*Representations.RepresentationValue `protobuf:"bytes,1,rep,name=Values,proto3" json:"Values,omitempty"`
}

func (x *SpatialAttribute) Reset() {
	*x = SpatialAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ReferenceLayers_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpatialAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpatialAttribute) ProtoMessage() {}

func (x *SpatialAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_ReferenceLayers_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpatialAttribute.ProtoReflect.Descriptor instead.
func (*SpatialAttribute) Descriptor() ([]byte, []int) {
	return file_ReferenceLayers_proto_rawDescGZIP(), []int{8}
}

func (x *SpatialAttribute) GetValues() []*Representations.RepresentationValue {
	if x != nil {
		return x.Values
	}
	return nil
}

type ShapeReferenceLayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShapeLookups []*ShapeLookup `protobuf:"bytes,1,rep,name=ShapeLookups,proto3" json:"ShapeLookups,omitempty"`
}

func (x *ShapeReferenceLayer) Reset() {
	*x = ShapeReferenceLayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ReferenceLayers_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShapeReferenceLayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShapeReferenceLayer) ProtoMessage() {}

func (x *ShapeReferenceLayer) ProtoReflect() protoreflect.Message {
	mi := &file_ReferenceLayers_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShapeReferenceLayer.ProtoReflect.Descriptor instead.
func (*ShapeReferenceLayer) Descriptor() ([]byte, []int) {
	return file_ReferenceLayers_proto_rawDescGZIP(), []int{9}
}

func (x *ShapeReferenceLayer) GetShapeLookups() []*ShapeLookup {
	if x != nil {
		return x.ShapeLookups
	}
	return nil
}

var File_ReferenceLayers_proto protoreflect.FileDescriptor

var file_ReferenceLayers_proto_rawDesc = []byte{
	0x0a, 0x15, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x1a, 0x0c,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x52, 0x65,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x53, 0x68, 0x61, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xfa, 0x03, 0x0a, 0x0a, 0x52, 0x61, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x4d, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54,
	0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x8b, 0x01, 0x0a, 0x22, 0x52, 0x61, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x41,
	0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x61, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x22, 0x52, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x82, 0x01,
	0x0a, 0x1f, 0x52, 0x61, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x75, 0x6d, 0x65,
	0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x2e,
	0x52, 0x61, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69,
	0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x1f, 0x52, 0x61, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x75, 0x6d,
	0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x7f, 0x0a, 0x1e, 0x52, 0x61, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x41, 0x44, 0x41,
	0x50, 0x54, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x2e, 0x52, 0x61, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x1e, 0x52, 0x61, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x22, 0x64,
	0x0a, 0x22, 0x52, 0x61, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x75, 0x6d,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x22, 0x6c, 0x0a, 0x1f, 0x52, 0x61, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e,
	0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x22, 0x5c, 0x0a, 0x1e, 0x52, 0x61, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x22, 0xf2, 0x04, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x02, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x09, 0x4c, 0x61, 0x79, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x41, 0x44, 0x41,
	0x50, 0x54, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x79, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x37, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x0a, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0f, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65,
	0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x52, 0x0f, 0x42, 0x6f, 0x75, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0c, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x49, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x49, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x72, 0x6f, 0x70, 0x5a, 0x6f, 0x6e,
	0x65, 0x49, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x43, 0x72, 0x6f, 0x70,
	0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x73, 0x12, 0x61, 0x0a, 0x14, 0x52, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x18,
	0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x79,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x14, 0x52, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x5e, 0x0a, 0x13, 0x53, 0x68,
	0x61, 0x70, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x79, 0x65,
	0x72, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x2e,
	0x53, 0x68, 0x61, 0x70, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x48, 0x00, 0x52, 0x13, 0x53, 0x68, 0x61, 0x70, 0x65, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x73, 0x75,
	0x62, 0x74, 0x79, 0x70, 0x65, 0x22, 0xe8, 0x02, 0x0a, 0x14, 0x52, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x2b,
	0x0a, 0x06, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x68,
	0x61, 0x70, 0x65, 0x52, 0x06, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x52,
	0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x52,
	0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x09, 0x43, 0x65, 0x6c,
	0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x41,
	0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x09, 0x43, 0x65, 0x6c, 0x6c, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x51, 0x0a, 0x0a, 0x43, 0x65,
	0x6c, 0x6c, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0a, 0x43, 0x65, 0x6c, 0x6c, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x41, 0x0a,
	0x0a, 0x52, 0x61, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x2e, 0x52, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x52, 0x61, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x22, 0xc1, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e,
	0x75, 0x6d, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x4c, 0x61, 0x6e, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x45,
	0x6c, 0x65, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x10, 0x02, 0x12, 0x12, 0x0a,
	0x0e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x10,
	0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x62, 0x73, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x73, 0x10, 0x04,
	0x12, 0x0d, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x4d, 0x61, 0x70, 0x10, 0x05, 0x12,
	0x0f, 0x0a, 0x0b, 0x53, 0x6f, 0x69, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x10, 0x06,
	0x12, 0x12, 0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x10, 0x07, 0x22, 0x8d, 0x01, 0x0a, 0x0b, 0x53, 0x68, 0x61, 0x70, 0x65, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x12, 0x29, 0x0a, 0x05, 0x53, 0x68, 0x61, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54, 0x2e, 0x53, 0x68, 0x61, 0x70,
	0x65, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x52, 0x05, 0x53, 0x68, 0x61, 0x70, 0x65, 0x12,
	0x53, 0x0a, 0x10, 0x53, 0x70, 0x61, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x41, 0x44, 0x41, 0x50,
	0x54, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x2e, 0x53, 0x70, 0x61, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x52, 0x10, 0x53, 0x70, 0x61, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x22, 0x56, 0x0a, 0x10, 0x53, 0x70, 0x61, 0x74, 0x69, 0x61, 0x6c, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x41, 0x44, 0x41, 0x50, 0x54,
	0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x5d, 0x0a, 0x13,
	0x53, 0x68, 0x61, 0x70, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x61,
	0x79, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x0c, 0x53, 0x68, 0x61, 0x70, 0x65, 0x4c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x41, 0x44, 0x41, 0x50,
	0x54, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x0c, 0x53,
	0x68, 0x61, 0x70, 0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x73, 0x42, 0x31, 0x5a, 0x2f, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x61, 0x6c, 0x74, 0x65, 0x67,
	0x72, 0x6f, 0x73, 0x73, 0x65, 0x2f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x2d, 0x67, 0x6f, 0x2f, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ReferenceLayers_proto_rawDescOnce sync.Once
	file_ReferenceLayers_proto_rawDescData = file_ReferenceLayers_proto_rawDesc
)

func file_ReferenceLayers_proto_rawDescGZIP() []byte {
	file_ReferenceLayers_proto_rawDescOnce.Do(func() {
		file_ReferenceLayers_proto_rawDescData = protoimpl.X.CompressGZIP(file_ReferenceLayers_proto_rawDescData)
	})
	return file_ReferenceLayers_proto_rawDescData
}

var file_ReferenceLayers_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_ReferenceLayers_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_ReferenceLayers_proto_goTypes = []interface{}{
	(ReferenceLayerType_ReferenceLayerTypeEnum)(0), // 0: ADAPT.ReferenceLayers.ReferenceLayerType.ReferenceLayerTypeEnum
	(*RasterData)(nil),                                 // 1: ADAPT.ReferenceLayers.RasterData
	(*RasterDataEnumeratedRepresentation)(nil),         // 2: ADAPT.ReferenceLayers.RasterDataEnumeratedRepresentation
	(*RasterDataNumericRepresentation)(nil),            // 3: ADAPT.ReferenceLayers.RasterDataNumericRepresentation
	(*RasterDataStringRepresentation)(nil),             // 4: ADAPT.ReferenceLayers.RasterDataStringRepresentation
	(*ReferenceLayer)(nil),                             // 5: ADAPT.ReferenceLayers.ReferenceLayer
	(*RasterReferenceLayer)(nil),                       // 6: ADAPT.ReferenceLayers.RasterReferenceLayer
	(*ReferenceLayerType)(nil),                         // 7: ADAPT.ReferenceLayers.ReferenceLayerType
	(*ShapeLookup)(nil),                                // 8: ADAPT.ReferenceLayers.ShapeLookup
	(*SpatialAttribute)(nil),                           // 9: ADAPT.ReferenceLayers.SpatialAttribute
	(*ShapeReferenceLayer)(nil),                        // 10: ADAPT.ReferenceLayers.ShapeReferenceLayer
	(*Representations.Representation)(nil),             // 11: ADAPT.Representations.Representation
	(*Representations.EnumeratedValue)(nil),            // 12: ADAPT.Representations.EnumeratedValue
	(*Representations.NumericRepresentationValue)(nil), // 13: ADAPT.Representations.NumericRepresentationValue
	(*Representations.StringValue)(nil),                // 14: ADAPT.Representations.StringValue
	(*Common.CompoundIdentifier)(nil),                  // 15: ADAPT.Common.CompoundIdentifier
	(*Common.TimeScope)(nil),                           // 16: ADAPT.Common.TimeScope
	(*Shapes.Polygon)(nil),                             // 17: ADAPT.Shapes.Polygon
	(*Common.ContextItem)(nil),                         // 18: ADAPT.Common.ContextItem
	(*Shapes.Shape)(nil),                               // 19: ADAPT.Shapes.Shape
	(*Representations.RepresentationValue)(nil),        // 20: ADAPT.Representations.RepresentationValue
}
var file_ReferenceLayers_proto_depIdxs = []int32{
	11, // 0: ADAPT.ReferenceLayers.RasterData.Representation:type_name -> ADAPT.Representations.Representation
	2,  // 1: ADAPT.ReferenceLayers.RasterData.RasterDataEnumeratedRepresentation:type_name -> ADAPT.ReferenceLayers.RasterDataEnumeratedRepresentation
	3,  // 2: ADAPT.ReferenceLayers.RasterData.RasterDataNumericRepresentation:type_name -> ADAPT.ReferenceLayers.RasterDataNumericRepresentation
	4,  // 3: ADAPT.ReferenceLayers.RasterData.RasterDataStringRepresentation:type_name -> ADAPT.ReferenceLayers.RasterDataStringRepresentation
	12, // 4: ADAPT.ReferenceLayers.RasterDataEnumeratedRepresentation.Values:type_name -> ADAPT.Representations.EnumeratedValue
	13, // 5: ADAPT.ReferenceLayers.RasterDataNumericRepresentation.Values:type_name -> ADAPT.Representations.NumericRepresentationValue
	14, // 6: ADAPT.ReferenceLayers.RasterDataStringRepresentation.Values:type_name -> ADAPT.Representations.StringValue
	15, // 7: ADAPT.ReferenceLayers.ReferenceLayer.Id:type_name -> ADAPT.Common.CompoundIdentifier
	7,  // 8: ADAPT.ReferenceLayers.ReferenceLayer.LayerType:type_name -> ADAPT.ReferenceLayers.ReferenceLayerType
	16, // 9: ADAPT.ReferenceLayers.ReferenceLayer.TimeScopes:type_name -> ADAPT.Common.TimeScope
	17, // 10: ADAPT.ReferenceLayers.ReferenceLayer.BoundingPolygon:type_name -> ADAPT.Shapes.Polygon
	18, // 11: ADAPT.ReferenceLayers.ReferenceLayer.ContextItems:type_name -> ADAPT.Common.ContextItem
	6,  // 12: ADAPT.ReferenceLayers.ReferenceLayer.RasterReferenceLayer:type_name -> ADAPT.ReferenceLayers.RasterReferenceLayer
	10, // 13: ADAPT.ReferenceLayers.ReferenceLayer.ShapeReferenceLayer:type_name -> ADAPT.ReferenceLayers.ShapeReferenceLayer
	19, // 14: ADAPT.ReferenceLayers.RasterReferenceLayer.Origin:type_name -> ADAPT.Shapes.Shape
	13, // 15: ADAPT.ReferenceLayers.RasterReferenceLayer.CellWidth:type_name -> ADAPT.Representations.NumericRepresentationValue
	13, // 16: ADAPT.ReferenceLayers.RasterReferenceLayer.CellHeight:type_name -> ADAPT.Representations.NumericRepresentationValue
	1,  // 17: ADAPT.ReferenceLayers.RasterReferenceLayer.RasterData:type_name -> ADAPT.ReferenceLayers.RasterData
	19, // 18: ADAPT.ReferenceLayers.ShapeLookup.Shape:type_name -> ADAPT.Shapes.Shape
	9,  // 19: ADAPT.ReferenceLayers.ShapeLookup.SpatialAttribute:type_name -> ADAPT.ReferenceLayers.SpatialAttribute
	20, // 20: ADAPT.ReferenceLayers.SpatialAttribute.Values:type_name -> ADAPT.Representations.RepresentationValue
	8,  // 21: ADAPT.ReferenceLayers.ShapeReferenceLayer.ShapeLookups:type_name -> ADAPT.ReferenceLayers.ShapeLookup
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_ReferenceLayers_proto_init() }
func file_ReferenceLayers_proto_init() {
	if File_ReferenceLayers_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ReferenceLayers_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RasterData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ReferenceLayers_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RasterDataEnumeratedRepresentation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ReferenceLayers_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RasterDataNumericRepresentation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ReferenceLayers_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RasterDataStringRepresentation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ReferenceLayers_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceLayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ReferenceLayers_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RasterReferenceLayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ReferenceLayers_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceLayerType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ReferenceLayers_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShapeLookup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ReferenceLayers_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpatialAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ReferenceLayers_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShapeReferenceLayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ReferenceLayers_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*RasterData_RasterDataEnumeratedRepresentation)(nil),
		(*RasterData_RasterDataNumericRepresentation)(nil),
		(*RasterData_RasterDataStringRepresentation)(nil),
	}
	file_ReferenceLayers_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*ReferenceLayer_RasterReferenceLayer)(nil),
		(*ReferenceLayer_ShapeReferenceLayer)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ReferenceLayers_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ReferenceLayers_proto_goTypes,
		DependencyIndexes: file_ReferenceLayers_proto_depIdxs,
		EnumInfos:         file_ReferenceLayers_proto_enumTypes,
		MessageInfos:      file_ReferenceLayers_proto_msgTypes,
	}.Build()
	File_ReferenceLayers_proto = out.File
	file_ReferenceLayers_proto_rawDesc = nil
	file_ReferenceLayers_proto_goTypes = nil
	file_ReferenceLayers_proto_depIdxs = nil
}
